// Code generated by MockGen. DO NOT EDIT.
// Source: ../../v1/v1connect/llm.connect.go
//
// Generated by this command:
//
//	mockgen -source=../../v1/v1connect/llm.connect.go -destination=llm.connect_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/gitpod-io/flex-sdk-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockLLMServiceClient is a mock of LLMServiceClient interface.
type MockLLMServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLLMServiceClientMockRecorder
	isgomock struct{}
}

// MockLLMServiceClientMockRecorder is the mock recorder for MockLLMServiceClient.
type MockLLMServiceClientMockRecorder struct {
	mock *MockLLMServiceClient
}

// NewMockLLMServiceClient creates a new mock instance.
func NewMockLLMServiceClient(ctrl *gomock.Controller) *MockLLMServiceClient {
	mock := &MockLLMServiceClient{ctrl: ctrl}
	mock.recorder = &MockLLMServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLMServiceClient) EXPECT() *MockLLMServiceClientMockRecorder {
	return m.recorder
}

// InvokeModel mocks base method.
func (m *MockLLMServiceClient) InvokeModel(arg0 context.Context, arg1 *connect.Request[v1.InvokeModelRequest]) (*connect.Response[v1.InvokeModelResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeModel", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.InvokeModelResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeModel indicates an expected call of InvokeModel.
func (mr *MockLLMServiceClientMockRecorder) InvokeModel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeModel", reflect.TypeOf((*MockLLMServiceClient)(nil).InvokeModel), arg0, arg1)
}

// MockLLMServiceHandler is a mock of LLMServiceHandler interface.
type MockLLMServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockLLMServiceHandlerMockRecorder
	isgomock struct{}
}

// MockLLMServiceHandlerMockRecorder is the mock recorder for MockLLMServiceHandler.
type MockLLMServiceHandlerMockRecorder struct {
	mock *MockLLMServiceHandler
}

// NewMockLLMServiceHandler creates a new mock instance.
func NewMockLLMServiceHandler(ctrl *gomock.Controller) *MockLLMServiceHandler {
	mock := &MockLLMServiceHandler{ctrl: ctrl}
	mock.recorder = &MockLLMServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLMServiceHandler) EXPECT() *MockLLMServiceHandlerMockRecorder {
	return m.recorder
}

// InvokeModel mocks base method.
func (m *MockLLMServiceHandler) InvokeModel(arg0 context.Context, arg1 *connect.Request[v1.InvokeModelRequest]) (*connect.Response[v1.InvokeModelResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeModel", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.InvokeModelResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeModel indicates an expected call of InvokeModel.
func (mr *MockLLMServiceHandlerMockRecorder) InvokeModel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeModel", reflect.TypeOf((*MockLLMServiceHandler)(nil).InvokeModel), arg0, arg1)
}
