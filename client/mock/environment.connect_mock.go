// Code generated by MockGen. DO NOT EDIT.
// Source: ../../v1/v1connect/environment.connect.go
//
// Generated by this command:
//
//	mockgen -source=../../v1/v1connect/environment.connect.go -destination=environment.connect_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/gitpod-io/flex-api-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockEnvironmentServiceClient is a mock of EnvironmentServiceClient interface.
type MockEnvironmentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentServiceClientMockRecorder
	isgomock struct{}
}

// MockEnvironmentServiceClientMockRecorder is the mock recorder for MockEnvironmentServiceClient.
type MockEnvironmentServiceClientMockRecorder struct {
	mock *MockEnvironmentServiceClient
}

// NewMockEnvironmentServiceClient creates a new mock instance.
func NewMockEnvironmentServiceClient(ctrl *gomock.Controller) *MockEnvironmentServiceClient {
	mock := &MockEnvironmentServiceClient{ctrl: ctrl}
	mock.recorder = &MockEnvironmentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentServiceClient) EXPECT() *MockEnvironmentServiceClientMockRecorder {
	return m.recorder
}

// CreateEnvironment mocks base method.
func (m *MockEnvironmentServiceClient) CreateEnvironment(arg0 context.Context, arg1 *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment.
func (mr *MockEnvironmentServiceClientMockRecorder) CreateEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockEnvironmentServiceClient)(nil).CreateEnvironment), arg0, arg1)
}

// CreateEnvironmentFromProject mocks base method.
func (m *MockEnvironmentServiceClient) CreateEnvironmentFromProject(arg0 context.Context, arg1 *connect.Request[v1.CreateEnvironmentFromProjectRequest]) (*connect.Response[v1.CreateEnvironmentFromProjectResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentFromProject", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateEnvironmentFromProjectResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentFromProject indicates an expected call of CreateEnvironmentFromProject.
func (mr *MockEnvironmentServiceClientMockRecorder) CreateEnvironmentFromProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentFromProject", reflect.TypeOf((*MockEnvironmentServiceClient)(nil).CreateEnvironmentFromProject), arg0, arg1)
}

// CreateEnvironmentLogsToken mocks base method.
func (m *MockEnvironmentServiceClient) CreateEnvironmentLogsToken(arg0 context.Context, arg1 *connect.Request[v1.CreateEnvironmentLogsTokenRequest]) (*connect.Response[v1.CreateEnvironmentLogsTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentLogsToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateEnvironmentLogsTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentLogsToken indicates an expected call of CreateEnvironmentLogsToken.
func (mr *MockEnvironmentServiceClientMockRecorder) CreateEnvironmentLogsToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentLogsToken", reflect.TypeOf((*MockEnvironmentServiceClient)(nil).CreateEnvironmentLogsToken), arg0, arg1)
}

// DeleteEnvironment mocks base method.
func (m *MockEnvironmentServiceClient) DeleteEnvironment(arg0 context.Context, arg1 *connect.Request[v1.DeleteEnvironmentRequest]) (*connect.Response[v1.DeleteEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockEnvironmentServiceClientMockRecorder) DeleteEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockEnvironmentServiceClient)(nil).DeleteEnvironment), arg0, arg1)
}

// GetEnvironment mocks base method.
func (m *MockEnvironmentServiceClient) GetEnvironment(arg0 context.Context, arg1 *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.GetEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockEnvironmentServiceClientMockRecorder) GetEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockEnvironmentServiceClient)(nil).GetEnvironment), arg0, arg1)
}

// ListEnvironmentClasses mocks base method.
func (m *MockEnvironmentServiceClient) ListEnvironmentClasses(arg0 context.Context, arg1 *connect.Request[v1.ListEnvironmentClassesRequest]) (*connect.Response[v1.ListEnvironmentClassesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentClasses", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListEnvironmentClassesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentClasses indicates an expected call of ListEnvironmentClasses.
func (mr *MockEnvironmentServiceClientMockRecorder) ListEnvironmentClasses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentClasses", reflect.TypeOf((*MockEnvironmentServiceClient)(nil).ListEnvironmentClasses), arg0, arg1)
}

// ListEnvironments mocks base method.
func (m *MockEnvironmentServiceClient) ListEnvironments(arg0 context.Context, arg1 *connect.Request[v1.ListEnvironmentsRequest]) (*connect.Response[v1.ListEnvironmentsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListEnvironmentsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments.
func (mr *MockEnvironmentServiceClientMockRecorder) ListEnvironments(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockEnvironmentServiceClient)(nil).ListEnvironments), arg0, arg1)
}

// MarkEnvironmentActive mocks base method.
func (m *MockEnvironmentServiceClient) MarkEnvironmentActive(arg0 context.Context, arg1 *connect.Request[v1.MarkEnvironmentActiveRequest]) (*connect.Response[v1.MarkEnvironmentActiveResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkEnvironmentActive", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.MarkEnvironmentActiveResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkEnvironmentActive indicates an expected call of MarkEnvironmentActive.
func (mr *MockEnvironmentServiceClientMockRecorder) MarkEnvironmentActive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkEnvironmentActive", reflect.TypeOf((*MockEnvironmentServiceClient)(nil).MarkEnvironmentActive), arg0, arg1)
}

// StartEnvironment mocks base method.
func (m *MockEnvironmentServiceClient) StartEnvironment(arg0 context.Context, arg1 *connect.Request[v1.StartEnvironmentRequest]) (*connect.Response[v1.StartEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.StartEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartEnvironment indicates an expected call of StartEnvironment.
func (mr *MockEnvironmentServiceClientMockRecorder) StartEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEnvironment", reflect.TypeOf((*MockEnvironmentServiceClient)(nil).StartEnvironment), arg0, arg1)
}

// StopEnvironment mocks base method.
func (m *MockEnvironmentServiceClient) StopEnvironment(arg0 context.Context, arg1 *connect.Request[v1.StopEnvironmentRequest]) (*connect.Response[v1.StopEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.StopEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopEnvironment indicates an expected call of StopEnvironment.
func (mr *MockEnvironmentServiceClientMockRecorder) StopEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEnvironment", reflect.TypeOf((*MockEnvironmentServiceClient)(nil).StopEnvironment), arg0, arg1)
}

// UpdateEnvironment mocks base method.
func (m *MockEnvironmentServiceClient) UpdateEnvironment(arg0 context.Context, arg1 *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment.
func (mr *MockEnvironmentServiceClientMockRecorder) UpdateEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockEnvironmentServiceClient)(nil).UpdateEnvironment), arg0, arg1)
}

// MockEnvironmentServiceHandler is a mock of EnvironmentServiceHandler interface.
type MockEnvironmentServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentServiceHandlerMockRecorder
	isgomock struct{}
}

// MockEnvironmentServiceHandlerMockRecorder is the mock recorder for MockEnvironmentServiceHandler.
type MockEnvironmentServiceHandlerMockRecorder struct {
	mock *MockEnvironmentServiceHandler
}

// NewMockEnvironmentServiceHandler creates a new mock instance.
func NewMockEnvironmentServiceHandler(ctrl *gomock.Controller) *MockEnvironmentServiceHandler {
	mock := &MockEnvironmentServiceHandler{ctrl: ctrl}
	mock.recorder = &MockEnvironmentServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentServiceHandler) EXPECT() *MockEnvironmentServiceHandlerMockRecorder {
	return m.recorder
}

// CreateEnvironment mocks base method.
func (m *MockEnvironmentServiceHandler) CreateEnvironment(arg0 context.Context, arg1 *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment.
func (mr *MockEnvironmentServiceHandlerMockRecorder) CreateEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockEnvironmentServiceHandler)(nil).CreateEnvironment), arg0, arg1)
}

// CreateEnvironmentFromProject mocks base method.
func (m *MockEnvironmentServiceHandler) CreateEnvironmentFromProject(arg0 context.Context, arg1 *connect.Request[v1.CreateEnvironmentFromProjectRequest]) (*connect.Response[v1.CreateEnvironmentFromProjectResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentFromProject", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateEnvironmentFromProjectResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentFromProject indicates an expected call of CreateEnvironmentFromProject.
func (mr *MockEnvironmentServiceHandlerMockRecorder) CreateEnvironmentFromProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentFromProject", reflect.TypeOf((*MockEnvironmentServiceHandler)(nil).CreateEnvironmentFromProject), arg0, arg1)
}

// CreateEnvironmentLogsToken mocks base method.
func (m *MockEnvironmentServiceHandler) CreateEnvironmentLogsToken(arg0 context.Context, arg1 *connect.Request[v1.CreateEnvironmentLogsTokenRequest]) (*connect.Response[v1.CreateEnvironmentLogsTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentLogsToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateEnvironmentLogsTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentLogsToken indicates an expected call of CreateEnvironmentLogsToken.
func (mr *MockEnvironmentServiceHandlerMockRecorder) CreateEnvironmentLogsToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentLogsToken", reflect.TypeOf((*MockEnvironmentServiceHandler)(nil).CreateEnvironmentLogsToken), arg0, arg1)
}

// DeleteEnvironment mocks base method.
func (m *MockEnvironmentServiceHandler) DeleteEnvironment(arg0 context.Context, arg1 *connect.Request[v1.DeleteEnvironmentRequest]) (*connect.Response[v1.DeleteEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockEnvironmentServiceHandlerMockRecorder) DeleteEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockEnvironmentServiceHandler)(nil).DeleteEnvironment), arg0, arg1)
}

// GetEnvironment mocks base method.
func (m *MockEnvironmentServiceHandler) GetEnvironment(arg0 context.Context, arg1 *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.GetEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockEnvironmentServiceHandlerMockRecorder) GetEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockEnvironmentServiceHandler)(nil).GetEnvironment), arg0, arg1)
}

// ListEnvironmentClasses mocks base method.
func (m *MockEnvironmentServiceHandler) ListEnvironmentClasses(arg0 context.Context, arg1 *connect.Request[v1.ListEnvironmentClassesRequest]) (*connect.Response[v1.ListEnvironmentClassesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentClasses", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListEnvironmentClassesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentClasses indicates an expected call of ListEnvironmentClasses.
func (mr *MockEnvironmentServiceHandlerMockRecorder) ListEnvironmentClasses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentClasses", reflect.TypeOf((*MockEnvironmentServiceHandler)(nil).ListEnvironmentClasses), arg0, arg1)
}

// ListEnvironments mocks base method.
func (m *MockEnvironmentServiceHandler) ListEnvironments(arg0 context.Context, arg1 *connect.Request[v1.ListEnvironmentsRequest]) (*connect.Response[v1.ListEnvironmentsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListEnvironmentsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments.
func (mr *MockEnvironmentServiceHandlerMockRecorder) ListEnvironments(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockEnvironmentServiceHandler)(nil).ListEnvironments), arg0, arg1)
}

// MarkEnvironmentActive mocks base method.
func (m *MockEnvironmentServiceHandler) MarkEnvironmentActive(arg0 context.Context, arg1 *connect.Request[v1.MarkEnvironmentActiveRequest]) (*connect.Response[v1.MarkEnvironmentActiveResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkEnvironmentActive", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.MarkEnvironmentActiveResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkEnvironmentActive indicates an expected call of MarkEnvironmentActive.
func (mr *MockEnvironmentServiceHandlerMockRecorder) MarkEnvironmentActive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkEnvironmentActive", reflect.TypeOf((*MockEnvironmentServiceHandler)(nil).MarkEnvironmentActive), arg0, arg1)
}

// StartEnvironment mocks base method.
func (m *MockEnvironmentServiceHandler) StartEnvironment(arg0 context.Context, arg1 *connect.Request[v1.StartEnvironmentRequest]) (*connect.Response[v1.StartEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.StartEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartEnvironment indicates an expected call of StartEnvironment.
func (mr *MockEnvironmentServiceHandlerMockRecorder) StartEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEnvironment", reflect.TypeOf((*MockEnvironmentServiceHandler)(nil).StartEnvironment), arg0, arg1)
}

// StopEnvironment mocks base method.
func (m *MockEnvironmentServiceHandler) StopEnvironment(arg0 context.Context, arg1 *connect.Request[v1.StopEnvironmentRequest]) (*connect.Response[v1.StopEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.StopEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopEnvironment indicates an expected call of StopEnvironment.
func (mr *MockEnvironmentServiceHandlerMockRecorder) StopEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEnvironment", reflect.TypeOf((*MockEnvironmentServiceHandler)(nil).StopEnvironment), arg0, arg1)
}

// UpdateEnvironment mocks base method.
func (m *MockEnvironmentServiceHandler) UpdateEnvironment(arg0 context.Context, arg1 *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment.
func (mr *MockEnvironmentServiceHandlerMockRecorder) UpdateEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockEnvironmentServiceHandler)(nil).UpdateEnvironment), arg0, arg1)
}
