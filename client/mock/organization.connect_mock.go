// Code generated by MockGen. DO NOT EDIT.
// Source: ../../v1/v1connect/organization.connect.go
//
// Generated by this command:
//
//	mockgen -source=../../v1/v1connect/organization.connect.go -destination=organization.connect_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/gitpod-io/flex-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationServiceClient is a mock of OrganizationServiceClient interface.
type MockOrganizationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationServiceClientMockRecorder
	isgomock struct{}
}

// MockOrganizationServiceClientMockRecorder is the mock recorder for MockOrganizationServiceClient.
type MockOrganizationServiceClientMockRecorder struct {
	mock *MockOrganizationServiceClient
}

// NewMockOrganizationServiceClient creates a new mock instance.
func NewMockOrganizationServiceClient(ctrl *gomock.Controller) *MockOrganizationServiceClient {
	mock := &MockOrganizationServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrganizationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationServiceClient) EXPECT() *MockOrganizationServiceClientMockRecorder {
	return m.recorder
}

// CreateOrganization mocks base method.
func (m *MockOrganizationServiceClient) CreateOrganization(arg0 context.Context, arg1 *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateOrganizationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockOrganizationServiceClientMockRecorder) CreateOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockOrganizationServiceClient)(nil).CreateOrganization), arg0, arg1)
}

// CreateOrganizationInvite mocks base method.
func (m *MockOrganizationServiceClient) CreateOrganizationInvite(arg0 context.Context, arg1 *connect.Request[v1.CreateOrganizationInviteRequest]) (*connect.Response[v1.CreateOrganizationInviteResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationInvite", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateOrganizationInviteResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationInvite indicates an expected call of CreateOrganizationInvite.
func (mr *MockOrganizationServiceClientMockRecorder) CreateOrganizationInvite(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationInvite", reflect.TypeOf((*MockOrganizationServiceClient)(nil).CreateOrganizationInvite), arg0, arg1)
}

// CreateSSOConfiguration mocks base method.
func (m *MockOrganizationServiceClient) CreateSSOConfiguration(arg0 context.Context, arg1 *connect.Request[v1.CreateSSOConfigurationRequest]) (*connect.Response[v1.CreateSSOConfigurationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSSOConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateSSOConfigurationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSSOConfiguration indicates an expected call of CreateSSOConfiguration.
func (mr *MockOrganizationServiceClientMockRecorder) CreateSSOConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSSOConfiguration", reflect.TypeOf((*MockOrganizationServiceClient)(nil).CreateSSOConfiguration), arg0, arg1)
}

// DeleteOrganization mocks base method.
func (m *MockOrganizationServiceClient) DeleteOrganization(arg0 context.Context, arg1 *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteOrganizationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockOrganizationServiceClientMockRecorder) DeleteOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockOrganizationServiceClient)(nil).DeleteOrganization), arg0, arg1)
}

// DeleteSSOConfiguration mocks base method.
func (m *MockOrganizationServiceClient) DeleteSSOConfiguration(arg0 context.Context, arg1 *connect.Request[v1.DeleteSSOConfigurationRequest]) (*connect.Response[v1.DeleteSSOConfigurationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSSOConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteSSOConfigurationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSSOConfiguration indicates an expected call of DeleteSSOConfiguration.
func (mr *MockOrganizationServiceClientMockRecorder) DeleteSSOConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSSOConfiguration", reflect.TypeOf((*MockOrganizationServiceClient)(nil).DeleteSSOConfiguration), arg0, arg1)
}

// GetOrganization mocks base method.
func (m *MockOrganizationServiceClient) GetOrganization(arg0 context.Context, arg1 *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetOrganizationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockOrganizationServiceClientMockRecorder) GetOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockOrganizationServiceClient)(nil).GetOrganization), arg0, arg1)
}

// GetOrganizationInvite mocks base method.
func (m *MockOrganizationServiceClient) GetOrganizationInvite(arg0 context.Context, arg1 *connect.Request[v1.GetOrganizationInviteRequest]) (*connect.Response[v1.GetOrganizationInviteResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationInvite", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetOrganizationInviteResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationInvite indicates an expected call of GetOrganizationInvite.
func (mr *MockOrganizationServiceClientMockRecorder) GetOrganizationInvite(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationInvite", reflect.TypeOf((*MockOrganizationServiceClient)(nil).GetOrganizationInvite), arg0, arg1)
}

// GetOrganizationInviteSummary mocks base method.
func (m *MockOrganizationServiceClient) GetOrganizationInviteSummary(arg0 context.Context, arg1 *connect.Request[v1.GetOrganizationInviteSummaryRequest]) (*connect.Response[v1.GetOrganizationInviteSummaryResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationInviteSummary", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetOrganizationInviteSummaryResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationInviteSummary indicates an expected call of GetOrganizationInviteSummary.
func (mr *MockOrganizationServiceClientMockRecorder) GetOrganizationInviteSummary(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationInviteSummary", reflect.TypeOf((*MockOrganizationServiceClient)(nil).GetOrganizationInviteSummary), arg0, arg1)
}

// GetSSOConfiguration mocks base method.
func (m *MockOrganizationServiceClient) GetSSOConfiguration(arg0 context.Context, arg1 *connect.Request[v1.GetSSOConfigurationRequest]) (*connect.Response[v1.GetSSOConfigurationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSOConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetSSOConfigurationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSOConfiguration indicates an expected call of GetSSOConfiguration.
func (mr *MockOrganizationServiceClientMockRecorder) GetSSOConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSOConfiguration", reflect.TypeOf((*MockOrganizationServiceClient)(nil).GetSSOConfiguration), arg0, arg1)
}

// JoinOrganization mocks base method.
func (m *MockOrganizationServiceClient) JoinOrganization(arg0 context.Context, arg1 *connect.Request[v1.JoinOrganizationRequest]) (*connect.Response[v1.JoinOrganizationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinOrganization", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.JoinOrganizationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinOrganization indicates an expected call of JoinOrganization.
func (mr *MockOrganizationServiceClientMockRecorder) JoinOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinOrganization", reflect.TypeOf((*MockOrganizationServiceClient)(nil).JoinOrganization), arg0, arg1)
}

// LeaveOrganization mocks base method.
func (m *MockOrganizationServiceClient) LeaveOrganization(arg0 context.Context, arg1 *connect.Request[v1.LeaveOrganizationRequest]) (*connect.Response[v1.LeaveOrganizationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveOrganization", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.LeaveOrganizationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveOrganization indicates an expected call of LeaveOrganization.
func (mr *MockOrganizationServiceClientMockRecorder) LeaveOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveOrganization", reflect.TypeOf((*MockOrganizationServiceClient)(nil).LeaveOrganization), arg0, arg1)
}

// ListMembers mocks base method.
func (m *MockOrganizationServiceClient) ListMembers(arg0 context.Context, arg1 *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListMembersResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockOrganizationServiceClientMockRecorder) ListMembers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockOrganizationServiceClient)(nil).ListMembers), arg0, arg1)
}

// ListOrganizations mocks base method.
func (m *MockOrganizationServiceClient) ListOrganizations(arg0 context.Context, arg1 *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListOrganizationsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockOrganizationServiceClientMockRecorder) ListOrganizations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockOrganizationServiceClient)(nil).ListOrganizations), arg0, arg1)
}

// ListSSOConfigurations mocks base method.
func (m *MockOrganizationServiceClient) ListSSOConfigurations(arg0 context.Context, arg1 *connect.Request[v1.ListSSOConfigurationsRequest]) (*connect.Response[v1.ListSSOConfigurationsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSSOConfigurations", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListSSOConfigurationsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSSOConfigurations indicates an expected call of ListSSOConfigurations.
func (mr *MockOrganizationServiceClientMockRecorder) ListSSOConfigurations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSSOConfigurations", reflect.TypeOf((*MockOrganizationServiceClient)(nil).ListSSOConfigurations), arg0, arg1)
}

// SetRole mocks base method.
func (m *MockOrganizationServiceClient) SetRole(arg0 context.Context, arg1 *connect.Request[v1.SetRoleRequest]) (*connect.Response[v1.SetRoleResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRole", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.SetRoleResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRole indicates an expected call of SetRole.
func (mr *MockOrganizationServiceClientMockRecorder) SetRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRole", reflect.TypeOf((*MockOrganizationServiceClient)(nil).SetRole), arg0, arg1)
}

// UpdateOrganization mocks base method.
func (m *MockOrganizationServiceClient) UpdateOrganization(arg0 context.Context, arg1 *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateOrganizationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockOrganizationServiceClientMockRecorder) UpdateOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockOrganizationServiceClient)(nil).UpdateOrganization), arg0, arg1)
}

// UpdateSSOConfiguration mocks base method.
func (m *MockOrganizationServiceClient) UpdateSSOConfiguration(arg0 context.Context, arg1 *connect.Request[v1.UpdateSSOConfigurationRequest]) (*connect.Response[v1.UpdateSSOConfigurationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSSOConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateSSOConfigurationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSSOConfiguration indicates an expected call of UpdateSSOConfiguration.
func (mr *MockOrganizationServiceClientMockRecorder) UpdateSSOConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSSOConfiguration", reflect.TypeOf((*MockOrganizationServiceClient)(nil).UpdateSSOConfiguration), arg0, arg1)
}

// MockOrganizationServiceHandler is a mock of OrganizationServiceHandler interface.
type MockOrganizationServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationServiceHandlerMockRecorder
	isgomock struct{}
}

// MockOrganizationServiceHandlerMockRecorder is the mock recorder for MockOrganizationServiceHandler.
type MockOrganizationServiceHandlerMockRecorder struct {
	mock *MockOrganizationServiceHandler
}

// NewMockOrganizationServiceHandler creates a new mock instance.
func NewMockOrganizationServiceHandler(ctrl *gomock.Controller) *MockOrganizationServiceHandler {
	mock := &MockOrganizationServiceHandler{ctrl: ctrl}
	mock.recorder = &MockOrganizationServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationServiceHandler) EXPECT() *MockOrganizationServiceHandlerMockRecorder {
	return m.recorder
}

// CreateOrganization mocks base method.
func (m *MockOrganizationServiceHandler) CreateOrganization(arg0 context.Context, arg1 *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateOrganizationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockOrganizationServiceHandlerMockRecorder) CreateOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).CreateOrganization), arg0, arg1)
}

// CreateOrganizationInvite mocks base method.
func (m *MockOrganizationServiceHandler) CreateOrganizationInvite(arg0 context.Context, arg1 *connect.Request[v1.CreateOrganizationInviteRequest]) (*connect.Response[v1.CreateOrganizationInviteResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationInvite", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateOrganizationInviteResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationInvite indicates an expected call of CreateOrganizationInvite.
func (mr *MockOrganizationServiceHandlerMockRecorder) CreateOrganizationInvite(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationInvite", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).CreateOrganizationInvite), arg0, arg1)
}

// CreateSSOConfiguration mocks base method.
func (m *MockOrganizationServiceHandler) CreateSSOConfiguration(arg0 context.Context, arg1 *connect.Request[v1.CreateSSOConfigurationRequest]) (*connect.Response[v1.CreateSSOConfigurationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSSOConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateSSOConfigurationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSSOConfiguration indicates an expected call of CreateSSOConfiguration.
func (mr *MockOrganizationServiceHandlerMockRecorder) CreateSSOConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSSOConfiguration", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).CreateSSOConfiguration), arg0, arg1)
}

// DeleteOrganization mocks base method.
func (m *MockOrganizationServiceHandler) DeleteOrganization(arg0 context.Context, arg1 *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteOrganizationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockOrganizationServiceHandlerMockRecorder) DeleteOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).DeleteOrganization), arg0, arg1)
}

// DeleteSSOConfiguration mocks base method.
func (m *MockOrganizationServiceHandler) DeleteSSOConfiguration(arg0 context.Context, arg1 *connect.Request[v1.DeleteSSOConfigurationRequest]) (*connect.Response[v1.DeleteSSOConfigurationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSSOConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteSSOConfigurationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSSOConfiguration indicates an expected call of DeleteSSOConfiguration.
func (mr *MockOrganizationServiceHandlerMockRecorder) DeleteSSOConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSSOConfiguration", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).DeleteSSOConfiguration), arg0, arg1)
}

// GetOrganization mocks base method.
func (m *MockOrganizationServiceHandler) GetOrganization(arg0 context.Context, arg1 *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetOrganizationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockOrganizationServiceHandlerMockRecorder) GetOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).GetOrganization), arg0, arg1)
}

// GetOrganizationInvite mocks base method.
func (m *MockOrganizationServiceHandler) GetOrganizationInvite(arg0 context.Context, arg1 *connect.Request[v1.GetOrganizationInviteRequest]) (*connect.Response[v1.GetOrganizationInviteResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationInvite", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetOrganizationInviteResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationInvite indicates an expected call of GetOrganizationInvite.
func (mr *MockOrganizationServiceHandlerMockRecorder) GetOrganizationInvite(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationInvite", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).GetOrganizationInvite), arg0, arg1)
}

// GetOrganizationInviteSummary mocks base method.
func (m *MockOrganizationServiceHandler) GetOrganizationInviteSummary(arg0 context.Context, arg1 *connect.Request[v1.GetOrganizationInviteSummaryRequest]) (*connect.Response[v1.GetOrganizationInviteSummaryResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationInviteSummary", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetOrganizationInviteSummaryResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationInviteSummary indicates an expected call of GetOrganizationInviteSummary.
func (mr *MockOrganizationServiceHandlerMockRecorder) GetOrganizationInviteSummary(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationInviteSummary", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).GetOrganizationInviteSummary), arg0, arg1)
}

// GetSSOConfiguration mocks base method.
func (m *MockOrganizationServiceHandler) GetSSOConfiguration(arg0 context.Context, arg1 *connect.Request[v1.GetSSOConfigurationRequest]) (*connect.Response[v1.GetSSOConfigurationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSOConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetSSOConfigurationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSOConfiguration indicates an expected call of GetSSOConfiguration.
func (mr *MockOrganizationServiceHandlerMockRecorder) GetSSOConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSOConfiguration", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).GetSSOConfiguration), arg0, arg1)
}

// JoinOrganization mocks base method.
func (m *MockOrganizationServiceHandler) JoinOrganization(arg0 context.Context, arg1 *connect.Request[v1.JoinOrganizationRequest]) (*connect.Response[v1.JoinOrganizationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinOrganization", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.JoinOrganizationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinOrganization indicates an expected call of JoinOrganization.
func (mr *MockOrganizationServiceHandlerMockRecorder) JoinOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinOrganization", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).JoinOrganization), arg0, arg1)
}

// LeaveOrganization mocks base method.
func (m *MockOrganizationServiceHandler) LeaveOrganization(arg0 context.Context, arg1 *connect.Request[v1.LeaveOrganizationRequest]) (*connect.Response[v1.LeaveOrganizationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveOrganization", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.LeaveOrganizationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveOrganization indicates an expected call of LeaveOrganization.
func (mr *MockOrganizationServiceHandlerMockRecorder) LeaveOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveOrganization", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).LeaveOrganization), arg0, arg1)
}

// ListMembers mocks base method.
func (m *MockOrganizationServiceHandler) ListMembers(arg0 context.Context, arg1 *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListMembersResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockOrganizationServiceHandlerMockRecorder) ListMembers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).ListMembers), arg0, arg1)
}

// ListOrganizations mocks base method.
func (m *MockOrganizationServiceHandler) ListOrganizations(arg0 context.Context, arg1 *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListOrganizationsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockOrganizationServiceHandlerMockRecorder) ListOrganizations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).ListOrganizations), arg0, arg1)
}

// ListSSOConfigurations mocks base method.
func (m *MockOrganizationServiceHandler) ListSSOConfigurations(arg0 context.Context, arg1 *connect.Request[v1.ListSSOConfigurationsRequest]) (*connect.Response[v1.ListSSOConfigurationsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSSOConfigurations", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListSSOConfigurationsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSSOConfigurations indicates an expected call of ListSSOConfigurations.
func (mr *MockOrganizationServiceHandlerMockRecorder) ListSSOConfigurations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSSOConfigurations", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).ListSSOConfigurations), arg0, arg1)
}

// SetRole mocks base method.
func (m *MockOrganizationServiceHandler) SetRole(arg0 context.Context, arg1 *connect.Request[v1.SetRoleRequest]) (*connect.Response[v1.SetRoleResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRole", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.SetRoleResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRole indicates an expected call of SetRole.
func (mr *MockOrganizationServiceHandlerMockRecorder) SetRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRole", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).SetRole), arg0, arg1)
}

// UpdateOrganization mocks base method.
func (m *MockOrganizationServiceHandler) UpdateOrganization(arg0 context.Context, arg1 *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateOrganizationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockOrganizationServiceHandlerMockRecorder) UpdateOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).UpdateOrganization), arg0, arg1)
}

// UpdateSSOConfiguration mocks base method.
func (m *MockOrganizationServiceHandler) UpdateSSOConfiguration(arg0 context.Context, arg1 *connect.Request[v1.UpdateSSOConfigurationRequest]) (*connect.Response[v1.UpdateSSOConfigurationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSSOConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateSSOConfigurationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSSOConfiguration indicates an expected call of UpdateSSOConfiguration.
func (mr *MockOrganizationServiceHandlerMockRecorder) UpdateSSOConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSSOConfiguration", reflect.TypeOf((*MockOrganizationServiceHandler)(nil).UpdateSSOConfiguration), arg0, arg1)
}
