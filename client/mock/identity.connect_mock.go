// Code generated by MockGen. DO NOT EDIT.
// Source: ../../v1/v1connect/identity.connect.go
//
// Generated by this command:
//
//	mockgen -source=../../v1/v1connect/identity.connect.go -destination=identity.connect_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/gitpod-io/flex-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockIdentityServiceClient is a mock of IdentityServiceClient interface.
type MockIdentityServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityServiceClientMockRecorder
	isgomock struct{}
}

// MockIdentityServiceClientMockRecorder is the mock recorder for MockIdentityServiceClient.
type MockIdentityServiceClientMockRecorder struct {
	mock *MockIdentityServiceClient
}

// NewMockIdentityServiceClient creates a new mock instance.
func NewMockIdentityServiceClient(ctrl *gomock.Controller) *MockIdentityServiceClient {
	mock := &MockIdentityServiceClient{ctrl: ctrl}
	mock.recorder = &MockIdentityServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityServiceClient) EXPECT() *MockIdentityServiceClientMockRecorder {
	return m.recorder
}

// ExchangeToken mocks base method.
func (m *MockIdentityServiceClient) ExchangeToken(arg0 context.Context, arg1 *connect.Request[v1.ExchangeTokenRequest]) (*connect.Response[v1.ExchangeTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ExchangeTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeToken indicates an expected call of ExchangeToken.
func (mr *MockIdentityServiceClientMockRecorder) ExchangeToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeToken", reflect.TypeOf((*MockIdentityServiceClient)(nil).ExchangeToken), arg0, arg1)
}

// GetAuthenticatedIdentity mocks base method.
func (m *MockIdentityServiceClient) GetAuthenticatedIdentity(arg0 context.Context, arg1 *connect.Request[v1.GetAuthenticatedIdentityRequest]) (*connect.Response[v1.GetAuthenticatedIdentityResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticatedIdentity", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetAuthenticatedIdentityResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticatedIdentity indicates an expected call of GetAuthenticatedIdentity.
func (mr *MockIdentityServiceClientMockRecorder) GetAuthenticatedIdentity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatedIdentity", reflect.TypeOf((*MockIdentityServiceClient)(nil).GetAuthenticatedIdentity), arg0, arg1)
}

// GetIDToken mocks base method.
func (m *MockIdentityServiceClient) GetIDToken(arg0 context.Context, arg1 *connect.Request[v1.GetIDTokenRequest]) (*connect.Response[v1.GetIDTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetIDTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDToken indicates an expected call of GetIDToken.
func (mr *MockIdentityServiceClientMockRecorder) GetIDToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDToken", reflect.TypeOf((*MockIdentityServiceClient)(nil).GetIDToken), arg0, arg1)
}

// MockIdentityServiceHandler is a mock of IdentityServiceHandler interface.
type MockIdentityServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityServiceHandlerMockRecorder
	isgomock struct{}
}

// MockIdentityServiceHandlerMockRecorder is the mock recorder for MockIdentityServiceHandler.
type MockIdentityServiceHandlerMockRecorder struct {
	mock *MockIdentityServiceHandler
}

// NewMockIdentityServiceHandler creates a new mock instance.
func NewMockIdentityServiceHandler(ctrl *gomock.Controller) *MockIdentityServiceHandler {
	mock := &MockIdentityServiceHandler{ctrl: ctrl}
	mock.recorder = &MockIdentityServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityServiceHandler) EXPECT() *MockIdentityServiceHandlerMockRecorder {
	return m.recorder
}

// ExchangeToken mocks base method.
func (m *MockIdentityServiceHandler) ExchangeToken(arg0 context.Context, arg1 *connect.Request[v1.ExchangeTokenRequest]) (*connect.Response[v1.ExchangeTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ExchangeTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeToken indicates an expected call of ExchangeToken.
func (mr *MockIdentityServiceHandlerMockRecorder) ExchangeToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeToken", reflect.TypeOf((*MockIdentityServiceHandler)(nil).ExchangeToken), arg0, arg1)
}

// GetAuthenticatedIdentity mocks base method.
func (m *MockIdentityServiceHandler) GetAuthenticatedIdentity(arg0 context.Context, arg1 *connect.Request[v1.GetAuthenticatedIdentityRequest]) (*connect.Response[v1.GetAuthenticatedIdentityResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticatedIdentity", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetAuthenticatedIdentityResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticatedIdentity indicates an expected call of GetAuthenticatedIdentity.
func (mr *MockIdentityServiceHandlerMockRecorder) GetAuthenticatedIdentity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatedIdentity", reflect.TypeOf((*MockIdentityServiceHandler)(nil).GetAuthenticatedIdentity), arg0, arg1)
}

// GetIDToken mocks base method.
func (m *MockIdentityServiceHandler) GetIDToken(arg0 context.Context, arg1 *connect.Request[v1.GetIDTokenRequest]) (*connect.Response[v1.GetIDTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetIDTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDToken indicates an expected call of GetIDToken.
func (mr *MockIdentityServiceHandlerMockRecorder) GetIDToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDToken", reflect.TypeOf((*MockIdentityServiceHandler)(nil).GetIDToken), arg0, arg1)
}
