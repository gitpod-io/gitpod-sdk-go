// Code generated by MockGen. DO NOT EDIT.
// Source: ../../v1/v1connect/runner_interaction.connect.go
//
// Generated by this command:
//
//	mockgen -source=../../v1/v1connect/runner_interaction.connect.go -destination=runner_interaction.connect_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/gitpod-io/flex-sdk-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockRunnerInteractionServiceClient is a mock of RunnerInteractionServiceClient interface.
type MockRunnerInteractionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerInteractionServiceClientMockRecorder
	isgomock struct{}
}

// MockRunnerInteractionServiceClientMockRecorder is the mock recorder for MockRunnerInteractionServiceClient.
type MockRunnerInteractionServiceClientMockRecorder struct {
	mock *MockRunnerInteractionServiceClient
}

// NewMockRunnerInteractionServiceClient creates a new mock instance.
func NewMockRunnerInteractionServiceClient(ctrl *gomock.Controller) *MockRunnerInteractionServiceClient {
	mock := &MockRunnerInteractionServiceClient{ctrl: ctrl}
	mock.recorder = &MockRunnerInteractionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunnerInteractionServiceClient) EXPECT() *MockRunnerInteractionServiceClientMockRecorder {
	return m.recorder
}

// GetHostAuthenticationTokenValue mocks base method.
func (m *MockRunnerInteractionServiceClient) GetHostAuthenticationTokenValue(arg0 context.Context, arg1 *connect.Request[v1.GetHostAuthenticationTokenValueRequest]) (*connect.Response[v1.GetHostAuthenticationTokenValueResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostAuthenticationTokenValue", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetHostAuthenticationTokenValueResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostAuthenticationTokenValue indicates an expected call of GetHostAuthenticationTokenValue.
func (mr *MockRunnerInteractionServiceClientMockRecorder) GetHostAuthenticationTokenValue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostAuthenticationTokenValue", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).GetHostAuthenticationTokenValue), arg0, arg1)
}

// GetLatestVersion mocks base method.
func (m *MockRunnerInteractionServiceClient) GetLatestVersion(arg0 context.Context, arg1 *connect.Request[v1.GetLatestVersionRequest]) (*connect.Response[v1.GetLatestVersionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestVersion", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetLatestVersionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestVersion indicates an expected call of GetLatestVersion.
func (mr *MockRunnerInteractionServiceClientMockRecorder) GetLatestVersion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestVersion", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).GetLatestVersion), arg0, arg1)
}

// GetRunnerEnvironment mocks base method.
func (m *MockRunnerInteractionServiceClient) GetRunnerEnvironment(arg0 context.Context, arg1 *connect.Request[v1.GetRunnerEnvironmentRequest]) (*connect.Response[v1.GetRunnerEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunnerEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetRunnerEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunnerEnvironment indicates an expected call of GetRunnerEnvironment.
func (mr *MockRunnerInteractionServiceClientMockRecorder) GetRunnerEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunnerEnvironment", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).GetRunnerEnvironment), arg0, arg1)
}

// ListRunnerEnvironmentClasses mocks base method.
func (m *MockRunnerInteractionServiceClient) ListRunnerEnvironmentClasses(arg0 context.Context, arg1 *connect.Request[v1.ListRunnerEnvironmentClassesRequest]) (*connect.Response[v1.ListRunnerEnvironmentClassesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunnerEnvironmentClasses", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListRunnerEnvironmentClassesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunnerEnvironmentClasses indicates an expected call of ListRunnerEnvironmentClasses.
func (mr *MockRunnerInteractionServiceClientMockRecorder) ListRunnerEnvironmentClasses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunnerEnvironmentClasses", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).ListRunnerEnvironmentClasses), arg0, arg1)
}

// ListRunnerEnvironments mocks base method.
func (m *MockRunnerInteractionServiceClient) ListRunnerEnvironments(arg0 context.Context, arg1 *connect.Request[v1.ListRunnerEnvironmentsRequest]) (*connect.Response[v1.ListRunnerEnvironmentsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunnerEnvironments", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListRunnerEnvironmentsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunnerEnvironments indicates an expected call of ListRunnerEnvironments.
func (mr *MockRunnerInteractionServiceClientMockRecorder) ListRunnerEnvironments(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunnerEnvironments", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).ListRunnerEnvironments), arg0, arg1)
}

// ListRunnerSCMIntegrations mocks base method.
func (m *MockRunnerInteractionServiceClient) ListRunnerSCMIntegrations(arg0 context.Context, arg1 *connect.Request[v1.ListRunnerSCMIntegrationsRequest]) (*connect.Response[v1.ListRunnerSCMIntegrationsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunnerSCMIntegrations", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListRunnerSCMIntegrationsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunnerSCMIntegrations indicates an expected call of ListRunnerSCMIntegrations.
func (mr *MockRunnerInteractionServiceClientMockRecorder) ListRunnerSCMIntegrations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunnerSCMIntegrations", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).ListRunnerSCMIntegrations), arg0, arg1)
}

// MarkRunnerActive mocks base method.
func (m *MockRunnerInteractionServiceClient) MarkRunnerActive(arg0 context.Context, arg1 *connect.Request[v1.MarkRunnerActiveRequest]) (*connect.Response[v1.MarkRunnerActiveResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRunnerActive", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.MarkRunnerActiveResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkRunnerActive indicates an expected call of MarkRunnerActive.
func (mr *MockRunnerInteractionServiceClientMockRecorder) MarkRunnerActive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRunnerActive", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).MarkRunnerActive), arg0, arg1)
}

// SendResponse mocks base method.
func (m *MockRunnerInteractionServiceClient) SendResponse(arg0 context.Context, arg1 *connect.Request[v1.SendResponseRequest]) (*connect.Response[v1.SendResponseResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResponse", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.SendResponseResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendResponse indicates an expected call of SendResponse.
func (mr *MockRunnerInteractionServiceClientMockRecorder) SendResponse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResponse", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).SendResponse), arg0, arg1)
}

// Signup mocks base method.
func (m *MockRunnerInteractionServiceClient) Signup(arg0 context.Context, arg1 *connect.Request[v1.SignupRequest]) (*connect.Response[v1.SignupResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.SignupResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockRunnerInteractionServiceClientMockRecorder) Signup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).Signup), arg0, arg1)
}

// UpdateRunnerConfigurationSchema mocks base method.
func (m *MockRunnerInteractionServiceClient) UpdateRunnerConfigurationSchema(arg0 context.Context, arg1 *connect.Request[v1.UpdateRunnerConfigurationSchemaRequest]) (*connect.Response[v1.UpdateRunnerConfigurationSchemaResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRunnerConfigurationSchema", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateRunnerConfigurationSchemaResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRunnerConfigurationSchema indicates an expected call of UpdateRunnerConfigurationSchema.
func (mr *MockRunnerInteractionServiceClientMockRecorder) UpdateRunnerConfigurationSchema(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRunnerConfigurationSchema", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).UpdateRunnerConfigurationSchema), arg0, arg1)
}

// UpdateRunnerEnvironmentStatus mocks base method.
func (m *MockRunnerInteractionServiceClient) UpdateRunnerEnvironmentStatus(arg0 context.Context, arg1 *connect.Request[v1.UpdateRunnerEnvironmentStatusRequest]) (*connect.Response[v1.UpdateRunnerEnvironmentStatusResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRunnerEnvironmentStatus", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateRunnerEnvironmentStatusResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRunnerEnvironmentStatus indicates an expected call of UpdateRunnerEnvironmentStatus.
func (mr *MockRunnerInteractionServiceClientMockRecorder) UpdateRunnerEnvironmentStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRunnerEnvironmentStatus", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).UpdateRunnerEnvironmentStatus), arg0, arg1)
}

// UpdateRunnerStatus mocks base method.
func (m *MockRunnerInteractionServiceClient) UpdateRunnerStatus(arg0 context.Context, arg1 *connect.Request[v1.UpdateRunnerStatusRequest]) (*connect.Response[v1.UpdateRunnerStatusResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRunnerStatus", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateRunnerStatusResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRunnerStatus indicates an expected call of UpdateRunnerStatus.
func (mr *MockRunnerInteractionServiceClientMockRecorder) UpdateRunnerStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRunnerStatus", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).UpdateRunnerStatus), arg0, arg1)
}

// WatchRequests mocks base method.
func (m *MockRunnerInteractionServiceClient) WatchRequests(arg0 context.Context, arg1 *connect.Request[v1.WatchRequestsRequest]) (*connect.ServerStreamForClient[v1.WatchRequestsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRequests", arg0, arg1)
	ret0, _ := ret[0].(*connect.ServerStreamForClient[v1.WatchRequestsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRequests indicates an expected call of WatchRequests.
func (mr *MockRunnerInteractionServiceClientMockRecorder) WatchRequests(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRequests", reflect.TypeOf((*MockRunnerInteractionServiceClient)(nil).WatchRequests), arg0, arg1)
}

// MockRunnerInteractionServiceHandler is a mock of RunnerInteractionServiceHandler interface.
type MockRunnerInteractionServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerInteractionServiceHandlerMockRecorder
	isgomock struct{}
}

// MockRunnerInteractionServiceHandlerMockRecorder is the mock recorder for MockRunnerInteractionServiceHandler.
type MockRunnerInteractionServiceHandlerMockRecorder struct {
	mock *MockRunnerInteractionServiceHandler
}

// NewMockRunnerInteractionServiceHandler creates a new mock instance.
func NewMockRunnerInteractionServiceHandler(ctrl *gomock.Controller) *MockRunnerInteractionServiceHandler {
	mock := &MockRunnerInteractionServiceHandler{ctrl: ctrl}
	mock.recorder = &MockRunnerInteractionServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunnerInteractionServiceHandler) EXPECT() *MockRunnerInteractionServiceHandlerMockRecorder {
	return m.recorder
}

// GetHostAuthenticationTokenValue mocks base method.
func (m *MockRunnerInteractionServiceHandler) GetHostAuthenticationTokenValue(arg0 context.Context, arg1 *connect.Request[v1.GetHostAuthenticationTokenValueRequest]) (*connect.Response[v1.GetHostAuthenticationTokenValueResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostAuthenticationTokenValue", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetHostAuthenticationTokenValueResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostAuthenticationTokenValue indicates an expected call of GetHostAuthenticationTokenValue.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) GetHostAuthenticationTokenValue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostAuthenticationTokenValue", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).GetHostAuthenticationTokenValue), arg0, arg1)
}

// GetLatestVersion mocks base method.
func (m *MockRunnerInteractionServiceHandler) GetLatestVersion(arg0 context.Context, arg1 *connect.Request[v1.GetLatestVersionRequest]) (*connect.Response[v1.GetLatestVersionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestVersion", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetLatestVersionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestVersion indicates an expected call of GetLatestVersion.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) GetLatestVersion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestVersion", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).GetLatestVersion), arg0, arg1)
}

// GetRunnerEnvironment mocks base method.
func (m *MockRunnerInteractionServiceHandler) GetRunnerEnvironment(arg0 context.Context, arg1 *connect.Request[v1.GetRunnerEnvironmentRequest]) (*connect.Response[v1.GetRunnerEnvironmentResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunnerEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetRunnerEnvironmentResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunnerEnvironment indicates an expected call of GetRunnerEnvironment.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) GetRunnerEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunnerEnvironment", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).GetRunnerEnvironment), arg0, arg1)
}

// ListRunnerEnvironmentClasses mocks base method.
func (m *MockRunnerInteractionServiceHandler) ListRunnerEnvironmentClasses(arg0 context.Context, arg1 *connect.Request[v1.ListRunnerEnvironmentClassesRequest]) (*connect.Response[v1.ListRunnerEnvironmentClassesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunnerEnvironmentClasses", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListRunnerEnvironmentClassesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunnerEnvironmentClasses indicates an expected call of ListRunnerEnvironmentClasses.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) ListRunnerEnvironmentClasses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunnerEnvironmentClasses", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).ListRunnerEnvironmentClasses), arg0, arg1)
}

// ListRunnerEnvironments mocks base method.
func (m *MockRunnerInteractionServiceHandler) ListRunnerEnvironments(arg0 context.Context, arg1 *connect.Request[v1.ListRunnerEnvironmentsRequest]) (*connect.Response[v1.ListRunnerEnvironmentsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunnerEnvironments", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListRunnerEnvironmentsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunnerEnvironments indicates an expected call of ListRunnerEnvironments.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) ListRunnerEnvironments(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunnerEnvironments", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).ListRunnerEnvironments), arg0, arg1)
}

// ListRunnerSCMIntegrations mocks base method.
func (m *MockRunnerInteractionServiceHandler) ListRunnerSCMIntegrations(arg0 context.Context, arg1 *connect.Request[v1.ListRunnerSCMIntegrationsRequest]) (*connect.Response[v1.ListRunnerSCMIntegrationsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunnerSCMIntegrations", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListRunnerSCMIntegrationsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunnerSCMIntegrations indicates an expected call of ListRunnerSCMIntegrations.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) ListRunnerSCMIntegrations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunnerSCMIntegrations", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).ListRunnerSCMIntegrations), arg0, arg1)
}

// MarkRunnerActive mocks base method.
func (m *MockRunnerInteractionServiceHandler) MarkRunnerActive(arg0 context.Context, arg1 *connect.Request[v1.MarkRunnerActiveRequest]) (*connect.Response[v1.MarkRunnerActiveResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRunnerActive", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.MarkRunnerActiveResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkRunnerActive indicates an expected call of MarkRunnerActive.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) MarkRunnerActive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRunnerActive", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).MarkRunnerActive), arg0, arg1)
}

// SendResponse mocks base method.
func (m *MockRunnerInteractionServiceHandler) SendResponse(arg0 context.Context, arg1 *connect.Request[v1.SendResponseRequest]) (*connect.Response[v1.SendResponseResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResponse", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.SendResponseResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendResponse indicates an expected call of SendResponse.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) SendResponse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResponse", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).SendResponse), arg0, arg1)
}

// Signup mocks base method.
func (m *MockRunnerInteractionServiceHandler) Signup(arg0 context.Context, arg1 *connect.Request[v1.SignupRequest]) (*connect.Response[v1.SignupResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.SignupResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) Signup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).Signup), arg0, arg1)
}

// UpdateRunnerConfigurationSchema mocks base method.
func (m *MockRunnerInteractionServiceHandler) UpdateRunnerConfigurationSchema(arg0 context.Context, arg1 *connect.Request[v1.UpdateRunnerConfigurationSchemaRequest]) (*connect.Response[v1.UpdateRunnerConfigurationSchemaResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRunnerConfigurationSchema", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateRunnerConfigurationSchemaResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRunnerConfigurationSchema indicates an expected call of UpdateRunnerConfigurationSchema.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) UpdateRunnerConfigurationSchema(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRunnerConfigurationSchema", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).UpdateRunnerConfigurationSchema), arg0, arg1)
}

// UpdateRunnerEnvironmentStatus mocks base method.
func (m *MockRunnerInteractionServiceHandler) UpdateRunnerEnvironmentStatus(arg0 context.Context, arg1 *connect.Request[v1.UpdateRunnerEnvironmentStatusRequest]) (*connect.Response[v1.UpdateRunnerEnvironmentStatusResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRunnerEnvironmentStatus", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateRunnerEnvironmentStatusResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRunnerEnvironmentStatus indicates an expected call of UpdateRunnerEnvironmentStatus.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) UpdateRunnerEnvironmentStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRunnerEnvironmentStatus", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).UpdateRunnerEnvironmentStatus), arg0, arg1)
}

// UpdateRunnerStatus mocks base method.
func (m *MockRunnerInteractionServiceHandler) UpdateRunnerStatus(arg0 context.Context, arg1 *connect.Request[v1.UpdateRunnerStatusRequest]) (*connect.Response[v1.UpdateRunnerStatusResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRunnerStatus", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateRunnerStatusResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRunnerStatus indicates an expected call of UpdateRunnerStatus.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) UpdateRunnerStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRunnerStatus", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).UpdateRunnerStatus), arg0, arg1)
}

// WatchRequests mocks base method.
func (m *MockRunnerInteractionServiceHandler) WatchRequests(arg0 context.Context, arg1 *connect.Request[v1.WatchRequestsRequest], arg2 *connect.ServerStream[v1.WatchRequestsResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRequests", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchRequests indicates an expected call of WatchRequests.
func (mr *MockRunnerInteractionServiceHandlerMockRecorder) WatchRequests(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRequests", reflect.TypeOf((*MockRunnerInteractionServiceHandler)(nil).WatchRequests), arg0, arg1, arg2)
}
