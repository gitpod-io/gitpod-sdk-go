// Code generated by MockGen. DO NOT EDIT.
// Source: ../../v1/v1connect/event.connect.go
//
// Generated by this command:
//
//	mockgen -source=../../v1/v1connect/event.connect.go -destination=event.connect_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/gitpod-io/flex-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockEventServiceClient is a mock of EventServiceClient interface.
type MockEventServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceClientMockRecorder
	isgomock struct{}
}

// MockEventServiceClientMockRecorder is the mock recorder for MockEventServiceClient.
type MockEventServiceClientMockRecorder struct {
	mock *MockEventServiceClient
}

// NewMockEventServiceClient creates a new mock instance.
func NewMockEventServiceClient(ctrl *gomock.Controller) *MockEventServiceClient {
	mock := &MockEventServiceClient{ctrl: ctrl}
	mock.recorder = &MockEventServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventServiceClient) EXPECT() *MockEventServiceClientMockRecorder {
	return m.recorder
}

// ListAuditLogs mocks base method.
func (m *MockEventServiceClient) ListAuditLogs(arg0 context.Context, arg1 *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuditLogs", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListAuditLogsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditLogs indicates an expected call of ListAuditLogs.
func (mr *MockEventServiceClientMockRecorder) ListAuditLogs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditLogs", reflect.TypeOf((*MockEventServiceClient)(nil).ListAuditLogs), arg0, arg1)
}

// WatchEvents mocks base method.
func (m *MockEventServiceClient) WatchEvents(arg0 context.Context, arg1 *connect.Request[v1.WatchEventsRequest]) (*connect.ServerStreamForClient[v1.WatchEventsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchEvents", arg0, arg1)
	ret0, _ := ret[0].(*connect.ServerStreamForClient[v1.WatchEventsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchEvents indicates an expected call of WatchEvents.
func (mr *MockEventServiceClientMockRecorder) WatchEvents(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEvents", reflect.TypeOf((*MockEventServiceClient)(nil).WatchEvents), arg0, arg1)
}

// MockEventServiceHandler is a mock of EventServiceHandler interface.
type MockEventServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceHandlerMockRecorder
	isgomock struct{}
}

// MockEventServiceHandlerMockRecorder is the mock recorder for MockEventServiceHandler.
type MockEventServiceHandlerMockRecorder struct {
	mock *MockEventServiceHandler
}

// NewMockEventServiceHandler creates a new mock instance.
func NewMockEventServiceHandler(ctrl *gomock.Controller) *MockEventServiceHandler {
	mock := &MockEventServiceHandler{ctrl: ctrl}
	mock.recorder = &MockEventServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventServiceHandler) EXPECT() *MockEventServiceHandlerMockRecorder {
	return m.recorder
}

// ListAuditLogs mocks base method.
func (m *MockEventServiceHandler) ListAuditLogs(arg0 context.Context, arg1 *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuditLogs", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListAuditLogsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditLogs indicates an expected call of ListAuditLogs.
func (mr *MockEventServiceHandlerMockRecorder) ListAuditLogs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditLogs", reflect.TypeOf((*MockEventServiceHandler)(nil).ListAuditLogs), arg0, arg1)
}

// WatchEvents mocks base method.
func (m *MockEventServiceHandler) WatchEvents(arg0 context.Context, arg1 *connect.Request[v1.WatchEventsRequest], arg2 *connect.ServerStream[v1.WatchEventsResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchEvents indicates an expected call of WatchEvents.
func (mr *MockEventServiceHandlerMockRecorder) WatchEvents(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEvents", reflect.TypeOf((*MockEventServiceHandler)(nil).WatchEvents), arg0, arg1, arg2)
}
