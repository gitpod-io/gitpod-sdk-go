// Code generated by MockGen. DO NOT EDIT.
// Source: ../../v1/v1connect/runner_configuration.connect.go
//
// Generated by this command:
//
//	mockgen -source=../../v1/v1connect/runner_configuration.connect.go -destination=runner_configuration.connect_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/gitpod-io/flex-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockRunnerConfigurationServiceClient is a mock of RunnerConfigurationServiceClient interface.
type MockRunnerConfigurationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerConfigurationServiceClientMockRecorder
	isgomock struct{}
}

// MockRunnerConfigurationServiceClientMockRecorder is the mock recorder for MockRunnerConfigurationServiceClient.
type MockRunnerConfigurationServiceClientMockRecorder struct {
	mock *MockRunnerConfigurationServiceClient
}

// NewMockRunnerConfigurationServiceClient creates a new mock instance.
func NewMockRunnerConfigurationServiceClient(ctrl *gomock.Controller) *MockRunnerConfigurationServiceClient {
	mock := &MockRunnerConfigurationServiceClient{ctrl: ctrl}
	mock.recorder = &MockRunnerConfigurationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunnerConfigurationServiceClient) EXPECT() *MockRunnerConfigurationServiceClientMockRecorder {
	return m.recorder
}

// CreateEnvironmentClass mocks base method.
func (m *MockRunnerConfigurationServiceClient) CreateEnvironmentClass(arg0 context.Context, arg1 *connect.Request[v1.CreateEnvironmentClassRequest]) (*connect.Response[v1.CreateEnvironmentClassResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentClass", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateEnvironmentClassResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentClass indicates an expected call of CreateEnvironmentClass.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) CreateEnvironmentClass(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentClass", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).CreateEnvironmentClass), arg0, arg1)
}

// CreateHostAuthenticationToken mocks base method.
func (m *MockRunnerConfigurationServiceClient) CreateHostAuthenticationToken(arg0 context.Context, arg1 *connect.Request[v1.CreateHostAuthenticationTokenRequest]) (*connect.Response[v1.CreateHostAuthenticationTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostAuthenticationToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateHostAuthenticationTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHostAuthenticationToken indicates an expected call of CreateHostAuthenticationToken.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) CreateHostAuthenticationToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostAuthenticationToken", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).CreateHostAuthenticationToken), arg0, arg1)
}

// CreateSCMIntegration mocks base method.
func (m *MockRunnerConfigurationServiceClient) CreateSCMIntegration(arg0 context.Context, arg1 *connect.Request[v1.CreateSCMIntegrationRequest]) (*connect.Response[v1.CreateSCMIntegrationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSCMIntegration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateSCMIntegrationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSCMIntegration indicates an expected call of CreateSCMIntegration.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) CreateSCMIntegration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSCMIntegration", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).CreateSCMIntegration), arg0, arg1)
}

// DeleteHostAuthenticationToken mocks base method.
func (m *MockRunnerConfigurationServiceClient) DeleteHostAuthenticationToken(arg0 context.Context, arg1 *connect.Request[v1.DeleteHostAuthenticationTokenRequest]) (*connect.Response[v1.DeleteHostAuthenticationTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostAuthenticationToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteHostAuthenticationTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHostAuthenticationToken indicates an expected call of DeleteHostAuthenticationToken.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) DeleteHostAuthenticationToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostAuthenticationToken", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).DeleteHostAuthenticationToken), arg0, arg1)
}

// DeleteSCMIntegration mocks base method.
func (m *MockRunnerConfigurationServiceClient) DeleteSCMIntegration(arg0 context.Context, arg1 *connect.Request[v1.DeleteSCMIntegrationRequest]) (*connect.Response[v1.DeleteSCMIntegrationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSCMIntegration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteSCMIntegrationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSCMIntegration indicates an expected call of DeleteSCMIntegration.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) DeleteSCMIntegration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSCMIntegration", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).DeleteSCMIntegration), arg0, arg1)
}

// GetEnvironmentClass mocks base method.
func (m *MockRunnerConfigurationServiceClient) GetEnvironmentClass(arg0 context.Context, arg1 *connect.Request[v1.GetEnvironmentClassRequest]) (*connect.Response[v1.GetEnvironmentClassResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentClass", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetEnvironmentClassResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentClass indicates an expected call of GetEnvironmentClass.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) GetEnvironmentClass(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentClass", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).GetEnvironmentClass), arg0, arg1)
}

// GetHostAuthenticationToken mocks base method.
func (m *MockRunnerConfigurationServiceClient) GetHostAuthenticationToken(arg0 context.Context, arg1 *connect.Request[v1.GetHostAuthenticationTokenRequest]) (*connect.Response[v1.GetHostAuthenticationTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostAuthenticationToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetHostAuthenticationTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostAuthenticationToken indicates an expected call of GetHostAuthenticationToken.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) GetHostAuthenticationToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostAuthenticationToken", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).GetHostAuthenticationToken), arg0, arg1)
}

// GetRunnerConfigurationSchema mocks base method.
func (m *MockRunnerConfigurationServiceClient) GetRunnerConfigurationSchema(arg0 context.Context, arg1 *connect.Request[v1.GetRunnerConfigurationSchemaRequest]) (*connect.Response[v1.GetRunnerConfigurationSchemaResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunnerConfigurationSchema", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetRunnerConfigurationSchemaResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunnerConfigurationSchema indicates an expected call of GetRunnerConfigurationSchema.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) GetRunnerConfigurationSchema(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunnerConfigurationSchema", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).GetRunnerConfigurationSchema), arg0, arg1)
}

// GetSCMIntegration mocks base method.
func (m *MockRunnerConfigurationServiceClient) GetSCMIntegration(arg0 context.Context, arg1 *connect.Request[v1.GetSCMIntegrationRequest]) (*connect.Response[v1.GetSCMIntegrationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSCMIntegration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetSCMIntegrationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSCMIntegration indicates an expected call of GetSCMIntegration.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) GetSCMIntegration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSCMIntegration", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).GetSCMIntegration), arg0, arg1)
}

// ListEnvironmentClasses mocks base method.
func (m *MockRunnerConfigurationServiceClient) ListEnvironmentClasses(arg0 context.Context, arg1 *connect.Request[v1.ListEnvironmentClassesRequest]) (*connect.Response[v1.ListEnvironmentClassesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentClasses", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListEnvironmentClassesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentClasses indicates an expected call of ListEnvironmentClasses.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) ListEnvironmentClasses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentClasses", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).ListEnvironmentClasses), arg0, arg1)
}

// ListHostAuthenticationTokens mocks base method.
func (m *MockRunnerConfigurationServiceClient) ListHostAuthenticationTokens(arg0 context.Context, arg1 *connect.Request[v1.ListHostAuthenticationTokensRequest]) (*connect.Response[v1.ListHostAuthenticationTokensResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostAuthenticationTokens", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListHostAuthenticationTokensResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostAuthenticationTokens indicates an expected call of ListHostAuthenticationTokens.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) ListHostAuthenticationTokens(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostAuthenticationTokens", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).ListHostAuthenticationTokens), arg0, arg1)
}

// ListSCMIntegrations mocks base method.
func (m *MockRunnerConfigurationServiceClient) ListSCMIntegrations(arg0 context.Context, arg1 *connect.Request[v1.ListSCMIntegrationsRequest]) (*connect.Response[v1.ListSCMIntegrationsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSCMIntegrations", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListSCMIntegrationsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSCMIntegrations indicates an expected call of ListSCMIntegrations.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) ListSCMIntegrations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSCMIntegrations", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).ListSCMIntegrations), arg0, arg1)
}

// UpdateEnvironmentClass mocks base method.
func (m *MockRunnerConfigurationServiceClient) UpdateEnvironmentClass(arg0 context.Context, arg1 *connect.Request[v1.UpdateEnvironmentClassRequest]) (*connect.Response[v1.UpdateEnvironmentClassResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentClass", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateEnvironmentClassResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentClass indicates an expected call of UpdateEnvironmentClass.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) UpdateEnvironmentClass(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentClass", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).UpdateEnvironmentClass), arg0, arg1)
}

// UpdateHostAuthenticationToken mocks base method.
func (m *MockRunnerConfigurationServiceClient) UpdateHostAuthenticationToken(arg0 context.Context, arg1 *connect.Request[v1.UpdateHostAuthenticationTokenRequest]) (*connect.Response[v1.UpdateHostAuthenticationTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostAuthenticationToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateHostAuthenticationTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostAuthenticationToken indicates an expected call of UpdateHostAuthenticationToken.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) UpdateHostAuthenticationToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostAuthenticationToken", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).UpdateHostAuthenticationToken), arg0, arg1)
}

// UpdateSCMIntegration mocks base method.
func (m *MockRunnerConfigurationServiceClient) UpdateSCMIntegration(arg0 context.Context, arg1 *connect.Request[v1.UpdateSCMIntegrationRequest]) (*connect.Response[v1.UpdateSCMIntegrationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSCMIntegration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateSCMIntegrationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSCMIntegration indicates an expected call of UpdateSCMIntegration.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) UpdateSCMIntegration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSCMIntegration", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).UpdateSCMIntegration), arg0, arg1)
}

// ValidateRunnerConfiguration mocks base method.
func (m *MockRunnerConfigurationServiceClient) ValidateRunnerConfiguration(arg0 context.Context, arg1 *connect.Request[v1.ValidateRunnerConfigurationRequest]) (*connect.Response[v1.ValidateRunnerConfigurationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRunnerConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ValidateRunnerConfigurationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRunnerConfiguration indicates an expected call of ValidateRunnerConfiguration.
func (mr *MockRunnerConfigurationServiceClientMockRecorder) ValidateRunnerConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRunnerConfiguration", reflect.TypeOf((*MockRunnerConfigurationServiceClient)(nil).ValidateRunnerConfiguration), arg0, arg1)
}

// MockRunnerConfigurationServiceHandler is a mock of RunnerConfigurationServiceHandler interface.
type MockRunnerConfigurationServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerConfigurationServiceHandlerMockRecorder
	isgomock struct{}
}

// MockRunnerConfigurationServiceHandlerMockRecorder is the mock recorder for MockRunnerConfigurationServiceHandler.
type MockRunnerConfigurationServiceHandlerMockRecorder struct {
	mock *MockRunnerConfigurationServiceHandler
}

// NewMockRunnerConfigurationServiceHandler creates a new mock instance.
func NewMockRunnerConfigurationServiceHandler(ctrl *gomock.Controller) *MockRunnerConfigurationServiceHandler {
	mock := &MockRunnerConfigurationServiceHandler{ctrl: ctrl}
	mock.recorder = &MockRunnerConfigurationServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunnerConfigurationServiceHandler) EXPECT() *MockRunnerConfigurationServiceHandlerMockRecorder {
	return m.recorder
}

// CreateEnvironmentClass mocks base method.
func (m *MockRunnerConfigurationServiceHandler) CreateEnvironmentClass(arg0 context.Context, arg1 *connect.Request[v1.CreateEnvironmentClassRequest]) (*connect.Response[v1.CreateEnvironmentClassResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentClass", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateEnvironmentClassResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentClass indicates an expected call of CreateEnvironmentClass.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) CreateEnvironmentClass(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentClass", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).CreateEnvironmentClass), arg0, arg1)
}

// CreateHostAuthenticationToken mocks base method.
func (m *MockRunnerConfigurationServiceHandler) CreateHostAuthenticationToken(arg0 context.Context, arg1 *connect.Request[v1.CreateHostAuthenticationTokenRequest]) (*connect.Response[v1.CreateHostAuthenticationTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHostAuthenticationToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateHostAuthenticationTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHostAuthenticationToken indicates an expected call of CreateHostAuthenticationToken.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) CreateHostAuthenticationToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHostAuthenticationToken", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).CreateHostAuthenticationToken), arg0, arg1)
}

// CreateSCMIntegration mocks base method.
func (m *MockRunnerConfigurationServiceHandler) CreateSCMIntegration(arg0 context.Context, arg1 *connect.Request[v1.CreateSCMIntegrationRequest]) (*connect.Response[v1.CreateSCMIntegrationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSCMIntegration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateSCMIntegrationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSCMIntegration indicates an expected call of CreateSCMIntegration.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) CreateSCMIntegration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSCMIntegration", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).CreateSCMIntegration), arg0, arg1)
}

// DeleteHostAuthenticationToken mocks base method.
func (m *MockRunnerConfigurationServiceHandler) DeleteHostAuthenticationToken(arg0 context.Context, arg1 *connect.Request[v1.DeleteHostAuthenticationTokenRequest]) (*connect.Response[v1.DeleteHostAuthenticationTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostAuthenticationToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteHostAuthenticationTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHostAuthenticationToken indicates an expected call of DeleteHostAuthenticationToken.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) DeleteHostAuthenticationToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostAuthenticationToken", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).DeleteHostAuthenticationToken), arg0, arg1)
}

// DeleteSCMIntegration mocks base method.
func (m *MockRunnerConfigurationServiceHandler) DeleteSCMIntegration(arg0 context.Context, arg1 *connect.Request[v1.DeleteSCMIntegrationRequest]) (*connect.Response[v1.DeleteSCMIntegrationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSCMIntegration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteSCMIntegrationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSCMIntegration indicates an expected call of DeleteSCMIntegration.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) DeleteSCMIntegration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSCMIntegration", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).DeleteSCMIntegration), arg0, arg1)
}

// GetEnvironmentClass mocks base method.
func (m *MockRunnerConfigurationServiceHandler) GetEnvironmentClass(arg0 context.Context, arg1 *connect.Request[v1.GetEnvironmentClassRequest]) (*connect.Response[v1.GetEnvironmentClassResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentClass", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetEnvironmentClassResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentClass indicates an expected call of GetEnvironmentClass.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) GetEnvironmentClass(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentClass", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).GetEnvironmentClass), arg0, arg1)
}

// GetHostAuthenticationToken mocks base method.
func (m *MockRunnerConfigurationServiceHandler) GetHostAuthenticationToken(arg0 context.Context, arg1 *connect.Request[v1.GetHostAuthenticationTokenRequest]) (*connect.Response[v1.GetHostAuthenticationTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostAuthenticationToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetHostAuthenticationTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostAuthenticationToken indicates an expected call of GetHostAuthenticationToken.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) GetHostAuthenticationToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostAuthenticationToken", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).GetHostAuthenticationToken), arg0, arg1)
}

// GetRunnerConfigurationSchema mocks base method.
func (m *MockRunnerConfigurationServiceHandler) GetRunnerConfigurationSchema(arg0 context.Context, arg1 *connect.Request[v1.GetRunnerConfigurationSchemaRequest]) (*connect.Response[v1.GetRunnerConfigurationSchemaResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunnerConfigurationSchema", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetRunnerConfigurationSchemaResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunnerConfigurationSchema indicates an expected call of GetRunnerConfigurationSchema.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) GetRunnerConfigurationSchema(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunnerConfigurationSchema", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).GetRunnerConfigurationSchema), arg0, arg1)
}

// GetSCMIntegration mocks base method.
func (m *MockRunnerConfigurationServiceHandler) GetSCMIntegration(arg0 context.Context, arg1 *connect.Request[v1.GetSCMIntegrationRequest]) (*connect.Response[v1.GetSCMIntegrationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSCMIntegration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetSCMIntegrationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSCMIntegration indicates an expected call of GetSCMIntegration.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) GetSCMIntegration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSCMIntegration", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).GetSCMIntegration), arg0, arg1)
}

// ListEnvironmentClasses mocks base method.
func (m *MockRunnerConfigurationServiceHandler) ListEnvironmentClasses(arg0 context.Context, arg1 *connect.Request[v1.ListEnvironmentClassesRequest]) (*connect.Response[v1.ListEnvironmentClassesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentClasses", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListEnvironmentClassesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentClasses indicates an expected call of ListEnvironmentClasses.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) ListEnvironmentClasses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentClasses", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).ListEnvironmentClasses), arg0, arg1)
}

// ListHostAuthenticationTokens mocks base method.
func (m *MockRunnerConfigurationServiceHandler) ListHostAuthenticationTokens(arg0 context.Context, arg1 *connect.Request[v1.ListHostAuthenticationTokensRequest]) (*connect.Response[v1.ListHostAuthenticationTokensResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostAuthenticationTokens", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListHostAuthenticationTokensResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostAuthenticationTokens indicates an expected call of ListHostAuthenticationTokens.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) ListHostAuthenticationTokens(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostAuthenticationTokens", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).ListHostAuthenticationTokens), arg0, arg1)
}

// ListSCMIntegrations mocks base method.
func (m *MockRunnerConfigurationServiceHandler) ListSCMIntegrations(arg0 context.Context, arg1 *connect.Request[v1.ListSCMIntegrationsRequest]) (*connect.Response[v1.ListSCMIntegrationsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSCMIntegrations", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListSCMIntegrationsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSCMIntegrations indicates an expected call of ListSCMIntegrations.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) ListSCMIntegrations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSCMIntegrations", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).ListSCMIntegrations), arg0, arg1)
}

// UpdateEnvironmentClass mocks base method.
func (m *MockRunnerConfigurationServiceHandler) UpdateEnvironmentClass(arg0 context.Context, arg1 *connect.Request[v1.UpdateEnvironmentClassRequest]) (*connect.Response[v1.UpdateEnvironmentClassResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentClass", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateEnvironmentClassResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentClass indicates an expected call of UpdateEnvironmentClass.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) UpdateEnvironmentClass(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentClass", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).UpdateEnvironmentClass), arg0, arg1)
}

// UpdateHostAuthenticationToken mocks base method.
func (m *MockRunnerConfigurationServiceHandler) UpdateHostAuthenticationToken(arg0 context.Context, arg1 *connect.Request[v1.UpdateHostAuthenticationTokenRequest]) (*connect.Response[v1.UpdateHostAuthenticationTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHostAuthenticationToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateHostAuthenticationTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostAuthenticationToken indicates an expected call of UpdateHostAuthenticationToken.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) UpdateHostAuthenticationToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostAuthenticationToken", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).UpdateHostAuthenticationToken), arg0, arg1)
}

// UpdateSCMIntegration mocks base method.
func (m *MockRunnerConfigurationServiceHandler) UpdateSCMIntegration(arg0 context.Context, arg1 *connect.Request[v1.UpdateSCMIntegrationRequest]) (*connect.Response[v1.UpdateSCMIntegrationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSCMIntegration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateSCMIntegrationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSCMIntegration indicates an expected call of UpdateSCMIntegration.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) UpdateSCMIntegration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSCMIntegration", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).UpdateSCMIntegration), arg0, arg1)
}

// ValidateRunnerConfiguration mocks base method.
func (m *MockRunnerConfigurationServiceHandler) ValidateRunnerConfiguration(arg0 context.Context, arg1 *connect.Request[v1.ValidateRunnerConfigurationRequest]) (*connect.Response[v1.ValidateRunnerConfigurationResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRunnerConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ValidateRunnerConfigurationResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRunnerConfiguration indicates an expected call of ValidateRunnerConfiguration.
func (mr *MockRunnerConfigurationServiceHandlerMockRecorder) ValidateRunnerConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRunnerConfiguration", reflect.TypeOf((*MockRunnerConfigurationServiceHandler)(nil).ValidateRunnerConfiguration), arg0, arg1)
}
