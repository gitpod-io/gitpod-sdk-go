// Code generated by MockGen. DO NOT EDIT.
// Source: ../../v1/v1connect/environment_automation.connect.go
//
// Generated by this command:
//
//	mockgen -source=../../v1/v1connect/environment_automation.connect.go -destination=environment_automation.connect_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/gitpod-io/flex-sdk-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockEnvironmentAutomationServiceClient is a mock of EnvironmentAutomationServiceClient interface.
type MockEnvironmentAutomationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentAutomationServiceClientMockRecorder
	isgomock struct{}
}

// MockEnvironmentAutomationServiceClientMockRecorder is the mock recorder for MockEnvironmentAutomationServiceClient.
type MockEnvironmentAutomationServiceClientMockRecorder struct {
	mock *MockEnvironmentAutomationServiceClient
}

// NewMockEnvironmentAutomationServiceClient creates a new mock instance.
func NewMockEnvironmentAutomationServiceClient(ctrl *gomock.Controller) *MockEnvironmentAutomationServiceClient {
	mock := &MockEnvironmentAutomationServiceClient{ctrl: ctrl}
	mock.recorder = &MockEnvironmentAutomationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentAutomationServiceClient) EXPECT() *MockEnvironmentAutomationServiceClientMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockEnvironmentAutomationServiceClient) CreateService(arg0 context.Context, arg1 *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v1.CreateServiceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateServiceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) CreateService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).CreateService), arg0, arg1)
}

// CreateTask mocks base method.
func (m *MockEnvironmentAutomationServiceClient) CreateTask(arg0 context.Context, arg1 *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateTaskResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) CreateTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).CreateTask), arg0, arg1)
}

// DeleteService mocks base method.
func (m *MockEnvironmentAutomationServiceClient) DeleteService(arg0 context.Context, arg1 *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[v1.DeleteServiceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteServiceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) DeleteService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).DeleteService), arg0, arg1)
}

// DeleteTask mocks base method.
func (m *MockEnvironmentAutomationServiceClient) DeleteTask(arg0 context.Context, arg1 *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteTaskResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) DeleteTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).DeleteTask), arg0, arg1)
}

// GetService mocks base method.
func (m *MockEnvironmentAutomationServiceClient) GetService(arg0 context.Context, arg1 *connect.Request[v1.GetServiceRequest]) (*connect.Response[v1.GetServiceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetServiceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) GetService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).GetService), arg0, arg1)
}

// GetTask mocks base method.
func (m *MockEnvironmentAutomationServiceClient) GetTask(arg0 context.Context, arg1 *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetTaskResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) GetTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).GetTask), arg0, arg1)
}

// GetTaskExecution mocks base method.
func (m *MockEnvironmentAutomationServiceClient) GetTaskExecution(arg0 context.Context, arg1 *connect.Request[v1.GetTaskExecutionRequest]) (*connect.Response[v1.GetTaskExecutionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskExecution", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetTaskExecutionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskExecution indicates an expected call of GetTaskExecution.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) GetTaskExecution(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskExecution", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).GetTaskExecution), arg0, arg1)
}

// ListServices mocks base method.
func (m *MockEnvironmentAutomationServiceClient) ListServices(arg0 context.Context, arg1 *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListServicesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) ListServices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).ListServices), arg0, arg1)
}

// ListTaskExecutions mocks base method.
func (m *MockEnvironmentAutomationServiceClient) ListTaskExecutions(arg0 context.Context, arg1 *connect.Request[v1.ListTaskExecutionsRequest]) (*connect.Response[v1.ListTaskExecutionsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaskExecutions", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListTaskExecutionsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaskExecutions indicates an expected call of ListTaskExecutions.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) ListTaskExecutions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaskExecutions", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).ListTaskExecutions), arg0, arg1)
}

// ListTasks mocks base method.
func (m *MockEnvironmentAutomationServiceClient) ListTasks(arg0 context.Context, arg1 *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListTasksResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) ListTasks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).ListTasks), arg0, arg1)
}

// StartService mocks base method.
func (m *MockEnvironmentAutomationServiceClient) StartService(arg0 context.Context, arg1 *connect.Request[v1.StartServiceRequest]) (*connect.Response[v1.StartServiceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartService", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.StartServiceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartService indicates an expected call of StartService.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) StartService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartService", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).StartService), arg0, arg1)
}

// StartTask mocks base method.
func (m *MockEnvironmentAutomationServiceClient) StartTask(arg0 context.Context, arg1 *connect.Request[v1.StartTaskRequest]) (*connect.Response[v1.StartTaskResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTask", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.StartTaskResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTask indicates an expected call of StartTask.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) StartTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTask", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).StartTask), arg0, arg1)
}

// StopService mocks base method.
func (m *MockEnvironmentAutomationServiceClient) StopService(arg0 context.Context, arg1 *connect.Request[v1.StopServiceRequest]) (*connect.Response[v1.StopServiceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopService", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.StopServiceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopService indicates an expected call of StopService.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) StopService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopService", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).StopService), arg0, arg1)
}

// StopTaskExecution mocks base method.
func (m *MockEnvironmentAutomationServiceClient) StopTaskExecution(arg0 context.Context, arg1 *connect.Request[v1.StopTaskExecutionRequest]) (*connect.Response[v1.StopTaskExecutionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTaskExecution", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.StopTaskExecutionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTaskExecution indicates an expected call of StopTaskExecution.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) StopTaskExecution(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTaskExecution", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).StopTaskExecution), arg0, arg1)
}

// UpdateService mocks base method.
func (m *MockEnvironmentAutomationServiceClient) UpdateService(arg0 context.Context, arg1 *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v1.UpdateServiceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateServiceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) UpdateService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).UpdateService), arg0, arg1)
}

// UpdateTask mocks base method.
func (m *MockEnvironmentAutomationServiceClient) UpdateTask(arg0 context.Context, arg1 *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateTaskResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) UpdateTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).UpdateTask), arg0, arg1)
}

// UpdateTaskExecutionStatus mocks base method.
func (m *MockEnvironmentAutomationServiceClient) UpdateTaskExecutionStatus(arg0 context.Context, arg1 *connect.Request[v1.UpdateTaskExecutionStatusRequest]) (*connect.Response[v1.UpdateTaskExecutionStatusResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskExecutionStatus", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateTaskExecutionStatusResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskExecutionStatus indicates an expected call of UpdateTaskExecutionStatus.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) UpdateTaskExecutionStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskExecutionStatus", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).UpdateTaskExecutionStatus), arg0, arg1)
}

// UpsertAutomationsFile mocks base method.
func (m *MockEnvironmentAutomationServiceClient) UpsertAutomationsFile(arg0 context.Context, arg1 *connect.Request[v1.UpsertAutomationsFileRequest]) (*connect.Response[v1.UpsertAutomationsFileResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAutomationsFile", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpsertAutomationsFileResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAutomationsFile indicates an expected call of UpsertAutomationsFile.
func (mr *MockEnvironmentAutomationServiceClientMockRecorder) UpsertAutomationsFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAutomationsFile", reflect.TypeOf((*MockEnvironmentAutomationServiceClient)(nil).UpsertAutomationsFile), arg0, arg1)
}

// MockEnvironmentAutomationServiceHandler is a mock of EnvironmentAutomationServiceHandler interface.
type MockEnvironmentAutomationServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentAutomationServiceHandlerMockRecorder
	isgomock struct{}
}

// MockEnvironmentAutomationServiceHandlerMockRecorder is the mock recorder for MockEnvironmentAutomationServiceHandler.
type MockEnvironmentAutomationServiceHandlerMockRecorder struct {
	mock *MockEnvironmentAutomationServiceHandler
}

// NewMockEnvironmentAutomationServiceHandler creates a new mock instance.
func NewMockEnvironmentAutomationServiceHandler(ctrl *gomock.Controller) *MockEnvironmentAutomationServiceHandler {
	mock := &MockEnvironmentAutomationServiceHandler{ctrl: ctrl}
	mock.recorder = &MockEnvironmentAutomationServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentAutomationServiceHandler) EXPECT() *MockEnvironmentAutomationServiceHandlerMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) CreateService(arg0 context.Context, arg1 *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v1.CreateServiceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateServiceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) CreateService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).CreateService), arg0, arg1)
}

// CreateTask mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) CreateTask(arg0 context.Context, arg1 *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateTaskResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) CreateTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).CreateTask), arg0, arg1)
}

// DeleteService mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) DeleteService(arg0 context.Context, arg1 *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[v1.DeleteServiceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteServiceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) DeleteService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).DeleteService), arg0, arg1)
}

// DeleteTask mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) DeleteTask(arg0 context.Context, arg1 *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteTaskResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) DeleteTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).DeleteTask), arg0, arg1)
}

// GetService mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) GetService(arg0 context.Context, arg1 *connect.Request[v1.GetServiceRequest]) (*connect.Response[v1.GetServiceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetServiceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) GetService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).GetService), arg0, arg1)
}

// GetTask mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) GetTask(arg0 context.Context, arg1 *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetTaskResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) GetTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).GetTask), arg0, arg1)
}

// GetTaskExecution mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) GetTaskExecution(arg0 context.Context, arg1 *connect.Request[v1.GetTaskExecutionRequest]) (*connect.Response[v1.GetTaskExecutionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskExecution", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetTaskExecutionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskExecution indicates an expected call of GetTaskExecution.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) GetTaskExecution(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskExecution", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).GetTaskExecution), arg0, arg1)
}

// ListServices mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) ListServices(arg0 context.Context, arg1 *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListServicesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) ListServices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).ListServices), arg0, arg1)
}

// ListTaskExecutions mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) ListTaskExecutions(arg0 context.Context, arg1 *connect.Request[v1.ListTaskExecutionsRequest]) (*connect.Response[v1.ListTaskExecutionsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaskExecutions", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListTaskExecutionsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaskExecutions indicates an expected call of ListTaskExecutions.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) ListTaskExecutions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaskExecutions", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).ListTaskExecutions), arg0, arg1)
}

// ListTasks mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) ListTasks(arg0 context.Context, arg1 *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListTasksResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) ListTasks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).ListTasks), arg0, arg1)
}

// StartService mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) StartService(arg0 context.Context, arg1 *connect.Request[v1.StartServiceRequest]) (*connect.Response[v1.StartServiceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartService", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.StartServiceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartService indicates an expected call of StartService.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) StartService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartService", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).StartService), arg0, arg1)
}

// StartTask mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) StartTask(arg0 context.Context, arg1 *connect.Request[v1.StartTaskRequest]) (*connect.Response[v1.StartTaskResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTask", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.StartTaskResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTask indicates an expected call of StartTask.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) StartTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTask", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).StartTask), arg0, arg1)
}

// StopService mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) StopService(arg0 context.Context, arg1 *connect.Request[v1.StopServiceRequest]) (*connect.Response[v1.StopServiceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopService", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.StopServiceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopService indicates an expected call of StopService.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) StopService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopService", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).StopService), arg0, arg1)
}

// StopTaskExecution mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) StopTaskExecution(arg0 context.Context, arg1 *connect.Request[v1.StopTaskExecutionRequest]) (*connect.Response[v1.StopTaskExecutionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTaskExecution", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.StopTaskExecutionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTaskExecution indicates an expected call of StopTaskExecution.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) StopTaskExecution(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTaskExecution", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).StopTaskExecution), arg0, arg1)
}

// UpdateService mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) UpdateService(arg0 context.Context, arg1 *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v1.UpdateServiceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateServiceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) UpdateService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).UpdateService), arg0, arg1)
}

// UpdateTask mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) UpdateTask(arg0 context.Context, arg1 *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateTaskResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) UpdateTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).UpdateTask), arg0, arg1)
}

// UpdateTaskExecutionStatus mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) UpdateTaskExecutionStatus(arg0 context.Context, arg1 *connect.Request[v1.UpdateTaskExecutionStatusRequest]) (*connect.Response[v1.UpdateTaskExecutionStatusResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskExecutionStatus", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateTaskExecutionStatusResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskExecutionStatus indicates an expected call of UpdateTaskExecutionStatus.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) UpdateTaskExecutionStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskExecutionStatus", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).UpdateTaskExecutionStatus), arg0, arg1)
}

// UpsertAutomationsFile mocks base method.
func (m *MockEnvironmentAutomationServiceHandler) UpsertAutomationsFile(arg0 context.Context, arg1 *connect.Request[v1.UpsertAutomationsFileRequest]) (*connect.Response[v1.UpsertAutomationsFileResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAutomationsFile", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpsertAutomationsFileResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAutomationsFile indicates an expected call of UpsertAutomationsFile.
func (mr *MockEnvironmentAutomationServiceHandlerMockRecorder) UpsertAutomationsFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAutomationsFile", reflect.TypeOf((*MockEnvironmentAutomationServiceHandler)(nil).UpsertAutomationsFile), arg0, arg1)
}
