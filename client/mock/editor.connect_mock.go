// Code generated by MockGen. DO NOT EDIT.
// Source: ../../v1/v1connect/editor.connect.go
//
// Generated by this command:
//
//	mockgen -source=../../v1/v1connect/editor.connect.go -destination=editor.connect_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/gitpod-io/flex-api-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockEditorServiceClient is a mock of EditorServiceClient interface.
type MockEditorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEditorServiceClientMockRecorder
	isgomock struct{}
}

// MockEditorServiceClientMockRecorder is the mock recorder for MockEditorServiceClient.
type MockEditorServiceClientMockRecorder struct {
	mock *MockEditorServiceClient
}

// NewMockEditorServiceClient creates a new mock instance.
func NewMockEditorServiceClient(ctrl *gomock.Controller) *MockEditorServiceClient {
	mock := &MockEditorServiceClient{ctrl: ctrl}
	mock.recorder = &MockEditorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEditorServiceClient) EXPECT() *MockEditorServiceClientMockRecorder {
	return m.recorder
}

// GetEditor mocks base method.
func (m *MockEditorServiceClient) GetEditor(arg0 context.Context, arg1 *connect.Request[v1.GetEditorRequest]) (*connect.Response[v1.GetEditorResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEditor", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetEditorResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditor indicates an expected call of GetEditor.
func (mr *MockEditorServiceClientMockRecorder) GetEditor(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditor", reflect.TypeOf((*MockEditorServiceClient)(nil).GetEditor), arg0, arg1)
}

// ListEditors mocks base method.
func (m *MockEditorServiceClient) ListEditors(arg0 context.Context, arg1 *connect.Request[v1.ListEditorsRequest]) (*connect.Response[v1.ListEditorsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEditors", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListEditorsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditors indicates an expected call of ListEditors.
func (mr *MockEditorServiceClientMockRecorder) ListEditors(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditors", reflect.TypeOf((*MockEditorServiceClient)(nil).ListEditors), arg0, arg1)
}

// ResolveEditorURL mocks base method.
func (m *MockEditorServiceClient) ResolveEditorURL(arg0 context.Context, arg1 *connect.Request[v1.ResolveEditorURLRequest]) (*connect.Response[v1.ResolveEditorURLResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveEditorURL", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ResolveEditorURLResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveEditorURL indicates an expected call of ResolveEditorURL.
func (mr *MockEditorServiceClientMockRecorder) ResolveEditorURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveEditorURL", reflect.TypeOf((*MockEditorServiceClient)(nil).ResolveEditorURL), arg0, arg1)
}

// MockEditorServiceHandler is a mock of EditorServiceHandler interface.
type MockEditorServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEditorServiceHandlerMockRecorder
	isgomock struct{}
}

// MockEditorServiceHandlerMockRecorder is the mock recorder for MockEditorServiceHandler.
type MockEditorServiceHandlerMockRecorder struct {
	mock *MockEditorServiceHandler
}

// NewMockEditorServiceHandler creates a new mock instance.
func NewMockEditorServiceHandler(ctrl *gomock.Controller) *MockEditorServiceHandler {
	mock := &MockEditorServiceHandler{ctrl: ctrl}
	mock.recorder = &MockEditorServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEditorServiceHandler) EXPECT() *MockEditorServiceHandlerMockRecorder {
	return m.recorder
}

// GetEditor mocks base method.
func (m *MockEditorServiceHandler) GetEditor(arg0 context.Context, arg1 *connect.Request[v1.GetEditorRequest]) (*connect.Response[v1.GetEditorResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEditor", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetEditorResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditor indicates an expected call of GetEditor.
func (mr *MockEditorServiceHandlerMockRecorder) GetEditor(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditor", reflect.TypeOf((*MockEditorServiceHandler)(nil).GetEditor), arg0, arg1)
}

// ListEditors mocks base method.
func (m *MockEditorServiceHandler) ListEditors(arg0 context.Context, arg1 *connect.Request[v1.ListEditorsRequest]) (*connect.Response[v1.ListEditorsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEditors", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListEditorsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditors indicates an expected call of ListEditors.
func (mr *MockEditorServiceHandlerMockRecorder) ListEditors(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditors", reflect.TypeOf((*MockEditorServiceHandler)(nil).ListEditors), arg0, arg1)
}

// ResolveEditorURL mocks base method.
func (m *MockEditorServiceHandler) ResolveEditorURL(arg0 context.Context, arg1 *connect.Request[v1.ResolveEditorURLRequest]) (*connect.Response[v1.ResolveEditorURLResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveEditorURL", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ResolveEditorURLResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveEditorURL indicates an expected call of ResolveEditorURL.
func (mr *MockEditorServiceHandlerMockRecorder) ResolveEditorURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveEditorURL", reflect.TypeOf((*MockEditorServiceHandler)(nil).ResolveEditorURL), arg0, arg1)
}
