// Code generated by MockGen. DO NOT EDIT.
// Source: ../../v1/v1connect/secret.connect.go
//
// Generated by this command:
//
//	mockgen -source=../../v1/v1connect/secret.connect.go -destination=secret.connect_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/gitpod-io/flex-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretServiceClient is a mock of SecretServiceClient interface.
type MockSecretServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretServiceClientMockRecorder
	isgomock struct{}
}

// MockSecretServiceClientMockRecorder is the mock recorder for MockSecretServiceClient.
type MockSecretServiceClientMockRecorder struct {
	mock *MockSecretServiceClient
}

// NewMockSecretServiceClient creates a new mock instance.
func NewMockSecretServiceClient(ctrl *gomock.Controller) *MockSecretServiceClient {
	mock := &MockSecretServiceClient{ctrl: ctrl}
	mock.recorder = &MockSecretServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretServiceClient) EXPECT() *MockSecretServiceClientMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method.
func (m *MockSecretServiceClient) CreateSecret(arg0 context.Context, arg1 *connect.Request[v1.CreateSecretRequest]) (*connect.Response[v1.CreateSecretResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateSecretResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretServiceClientMockRecorder) CreateSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretServiceClient)(nil).CreateSecret), arg0, arg1)
}

// DeleteSecret mocks base method.
func (m *MockSecretServiceClient) DeleteSecret(arg0 context.Context, arg1 *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteSecretResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretServiceClientMockRecorder) DeleteSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretServiceClient)(nil).DeleteSecret), arg0, arg1)
}

// GetSecretValue mocks base method.
func (m *MockSecretServiceClient) GetSecretValue(arg0 context.Context, arg1 *connect.Request[v1.GetSecretValueRequest]) (*connect.Response[v1.GetSecretValueResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretValue", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetSecretValueResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockSecretServiceClientMockRecorder) GetSecretValue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockSecretServiceClient)(nil).GetSecretValue), arg0, arg1)
}

// ListSecrets mocks base method.
func (m *MockSecretServiceClient) ListSecrets(arg0 context.Context, arg1 *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListSecretsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockSecretServiceClientMockRecorder) ListSecrets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretServiceClient)(nil).ListSecrets), arg0, arg1)
}

// UpdateSecretValue mocks base method.
func (m *MockSecretServiceClient) UpdateSecretValue(arg0 context.Context, arg1 *connect.Request[v1.UpdateSecretValueRequest]) (*connect.Response[v1.UpdateSecretValueResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecretValue", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateSecretValueResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecretValue indicates an expected call of UpdateSecretValue.
func (mr *MockSecretServiceClientMockRecorder) UpdateSecretValue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretValue", reflect.TypeOf((*MockSecretServiceClient)(nil).UpdateSecretValue), arg0, arg1)
}

// MockSecretServiceHandler is a mock of SecretServiceHandler interface.
type MockSecretServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSecretServiceHandlerMockRecorder
	isgomock struct{}
}

// MockSecretServiceHandlerMockRecorder is the mock recorder for MockSecretServiceHandler.
type MockSecretServiceHandlerMockRecorder struct {
	mock *MockSecretServiceHandler
}

// NewMockSecretServiceHandler creates a new mock instance.
func NewMockSecretServiceHandler(ctrl *gomock.Controller) *MockSecretServiceHandler {
	mock := &MockSecretServiceHandler{ctrl: ctrl}
	mock.recorder = &MockSecretServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretServiceHandler) EXPECT() *MockSecretServiceHandlerMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method.
func (m *MockSecretServiceHandler) CreateSecret(arg0 context.Context, arg1 *connect.Request[v1.CreateSecretRequest]) (*connect.Response[v1.CreateSecretResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateSecretResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretServiceHandlerMockRecorder) CreateSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretServiceHandler)(nil).CreateSecret), arg0, arg1)
}

// DeleteSecret mocks base method.
func (m *MockSecretServiceHandler) DeleteSecret(arg0 context.Context, arg1 *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteSecretResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretServiceHandlerMockRecorder) DeleteSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretServiceHandler)(nil).DeleteSecret), arg0, arg1)
}

// GetSecretValue mocks base method.
func (m *MockSecretServiceHandler) GetSecretValue(arg0 context.Context, arg1 *connect.Request[v1.GetSecretValueRequest]) (*connect.Response[v1.GetSecretValueResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretValue", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetSecretValueResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockSecretServiceHandlerMockRecorder) GetSecretValue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockSecretServiceHandler)(nil).GetSecretValue), arg0, arg1)
}

// ListSecrets mocks base method.
func (m *MockSecretServiceHandler) ListSecrets(arg0 context.Context, arg1 *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListSecretsResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockSecretServiceHandlerMockRecorder) ListSecrets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretServiceHandler)(nil).ListSecrets), arg0, arg1)
}

// UpdateSecretValue mocks base method.
func (m *MockSecretServiceHandler) UpdateSecretValue(arg0 context.Context, arg1 *connect.Request[v1.UpdateSecretValueRequest]) (*connect.Response[v1.UpdateSecretValueResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecretValue", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateSecretValueResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecretValue indicates an expected call of UpdateSecretValue.
func (mr *MockSecretServiceHandlerMockRecorder) UpdateSecretValue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretValue", reflect.TypeOf((*MockSecretServiceHandler)(nil).UpdateSecretValue), arg0, arg1)
}
