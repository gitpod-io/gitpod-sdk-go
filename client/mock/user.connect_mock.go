// Code generated by MockGen. DO NOT EDIT.
// Source: ../../v1/v1connect/user.connect.go
//
// Generated by this command:
//
//	mockgen -source=../../v1/v1connect/user.connect.go -destination=user.connect_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/gitpod-io/flex-sdk-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
	isgomock struct{}
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// CreatePersonalAccessToken mocks base method.
func (m *MockUserServiceClient) CreatePersonalAccessToken(arg0 context.Context, arg1 *connect.Request[v1.CreatePersonalAccessTokenRequest]) (*connect.Response[v1.CreatePersonalAccessTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePersonalAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreatePersonalAccessTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePersonalAccessToken indicates an expected call of CreatePersonalAccessToken.
func (mr *MockUserServiceClientMockRecorder) CreatePersonalAccessToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePersonalAccessToken", reflect.TypeOf((*MockUserServiceClient)(nil).CreatePersonalAccessToken), arg0, arg1)
}

// DeletePersonalAccessToken mocks base method.
func (m *MockUserServiceClient) DeletePersonalAccessToken(arg0 context.Context, arg1 *connect.Request[v1.DeletePersonalAccessTokenRequest]) (*connect.Response[v1.DeletePersonalAccessTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePersonalAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeletePersonalAccessTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePersonalAccessToken indicates an expected call of DeletePersonalAccessToken.
func (mr *MockUserServiceClientMockRecorder) DeletePersonalAccessToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePersonalAccessToken", reflect.TypeOf((*MockUserServiceClient)(nil).DeletePersonalAccessToken), arg0, arg1)
}

// DeletePreference mocks base method.
func (m *MockUserServiceClient) DeletePreference(arg0 context.Context, arg1 *connect.Request[v1.DeletePreferenceRequest]) (*connect.Response[v1.DeletePreferenceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePreference", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeletePreferenceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePreference indicates an expected call of DeletePreference.
func (mr *MockUserServiceClientMockRecorder) DeletePreference(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePreference", reflect.TypeOf((*MockUserServiceClient)(nil).DeletePreference), arg0, arg1)
}

// GetAuthenticatedUser mocks base method.
func (m *MockUserServiceClient) GetAuthenticatedUser(arg0 context.Context, arg1 *connect.Request[v1.GetAuthenticatedUserRequest]) (*connect.Response[v1.GetAuthenticatedUserResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticatedUser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetAuthenticatedUserResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticatedUser indicates an expected call of GetAuthenticatedUser.
func (mr *MockUserServiceClientMockRecorder) GetAuthenticatedUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatedUser", reflect.TypeOf((*MockUserServiceClient)(nil).GetAuthenticatedUser), arg0, arg1)
}

// GetPersonalAccessToken mocks base method.
func (m *MockUserServiceClient) GetPersonalAccessToken(arg0 context.Context, arg1 *connect.Request[v1.GetPersonalAccessTokenRequest]) (*connect.Response[v1.GetPersonalAccessTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetPersonalAccessTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalAccessToken indicates an expected call of GetPersonalAccessToken.
func (mr *MockUserServiceClientMockRecorder) GetPersonalAccessToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalAccessToken", reflect.TypeOf((*MockUserServiceClient)(nil).GetPersonalAccessToken), arg0, arg1)
}

// GetPreference mocks base method.
func (m *MockUserServiceClient) GetPreference(arg0 context.Context, arg1 *connect.Request[v1.GetPreferenceRequest]) (*connect.Response[v1.GetPreferenceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreference", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetPreferenceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreference indicates an expected call of GetPreference.
func (mr *MockUserServiceClientMockRecorder) GetPreference(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreference", reflect.TypeOf((*MockUserServiceClient)(nil).GetPreference), arg0, arg1)
}

// ListPersonalAccessTokens mocks base method.
func (m *MockUserServiceClient) ListPersonalAccessTokens(arg0 context.Context, arg1 *connect.Request[v1.ListPersonalAccessTokensRequest]) (*connect.Response[v1.ListPersonalAccessTokensResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPersonalAccessTokens", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListPersonalAccessTokensResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPersonalAccessTokens indicates an expected call of ListPersonalAccessTokens.
func (mr *MockUserServiceClientMockRecorder) ListPersonalAccessTokens(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPersonalAccessTokens", reflect.TypeOf((*MockUserServiceClient)(nil).ListPersonalAccessTokens), arg0, arg1)
}

// ListPreferences mocks base method.
func (m *MockUserServiceClient) ListPreferences(arg0 context.Context, arg1 *connect.Request[v1.ListPreferencesRequest]) (*connect.Response[v1.ListPreferencesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPreferences", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListPreferencesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPreferences indicates an expected call of ListPreferences.
func (mr *MockUserServiceClientMockRecorder) ListPreferences(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPreferences", reflect.TypeOf((*MockUserServiceClient)(nil).ListPreferences), arg0, arg1)
}

// SetPreference mocks base method.
func (m *MockUserServiceClient) SetPreference(arg0 context.Context, arg1 *connect.Request[v1.SetPreferenceRequest]) (*connect.Response[v1.SetPreferenceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPreference", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.SetPreferenceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPreference indicates an expected call of SetPreference.
func (mr *MockUserServiceClientMockRecorder) SetPreference(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreference", reflect.TypeOf((*MockUserServiceClient)(nil).SetPreference), arg0, arg1)
}

// SetSuspended mocks base method.
func (m *MockUserServiceClient) SetSuspended(arg0 context.Context, arg1 *connect.Request[v1.SetSuspendedRequest]) (*connect.Response[v1.SetSuspendedResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSuspended", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.SetSuspendedResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSuspended indicates an expected call of SetSuspended.
func (mr *MockUserServiceClientMockRecorder) SetSuspended(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSuspended", reflect.TypeOf((*MockUserServiceClient)(nil).SetSuspended), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserServiceClient) UpdateUser(arg0 context.Context, arg1 *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateUserResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceClientMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateUser), arg0, arg1)
}

// MockUserServiceHandler is a mock of UserServiceHandler interface.
type MockUserServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceHandlerMockRecorder
	isgomock struct{}
}

// MockUserServiceHandlerMockRecorder is the mock recorder for MockUserServiceHandler.
type MockUserServiceHandlerMockRecorder struct {
	mock *MockUserServiceHandler
}

// NewMockUserServiceHandler creates a new mock instance.
func NewMockUserServiceHandler(ctrl *gomock.Controller) *MockUserServiceHandler {
	mock := &MockUserServiceHandler{ctrl: ctrl}
	mock.recorder = &MockUserServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceHandler) EXPECT() *MockUserServiceHandlerMockRecorder {
	return m.recorder
}

// CreatePersonalAccessToken mocks base method.
func (m *MockUserServiceHandler) CreatePersonalAccessToken(arg0 context.Context, arg1 *connect.Request[v1.CreatePersonalAccessTokenRequest]) (*connect.Response[v1.CreatePersonalAccessTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePersonalAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreatePersonalAccessTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePersonalAccessToken indicates an expected call of CreatePersonalAccessToken.
func (mr *MockUserServiceHandlerMockRecorder) CreatePersonalAccessToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePersonalAccessToken", reflect.TypeOf((*MockUserServiceHandler)(nil).CreatePersonalAccessToken), arg0, arg1)
}

// DeletePersonalAccessToken mocks base method.
func (m *MockUserServiceHandler) DeletePersonalAccessToken(arg0 context.Context, arg1 *connect.Request[v1.DeletePersonalAccessTokenRequest]) (*connect.Response[v1.DeletePersonalAccessTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePersonalAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeletePersonalAccessTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePersonalAccessToken indicates an expected call of DeletePersonalAccessToken.
func (mr *MockUserServiceHandlerMockRecorder) DeletePersonalAccessToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePersonalAccessToken", reflect.TypeOf((*MockUserServiceHandler)(nil).DeletePersonalAccessToken), arg0, arg1)
}

// DeletePreference mocks base method.
func (m *MockUserServiceHandler) DeletePreference(arg0 context.Context, arg1 *connect.Request[v1.DeletePreferenceRequest]) (*connect.Response[v1.DeletePreferenceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePreference", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeletePreferenceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePreference indicates an expected call of DeletePreference.
func (mr *MockUserServiceHandlerMockRecorder) DeletePreference(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePreference", reflect.TypeOf((*MockUserServiceHandler)(nil).DeletePreference), arg0, arg1)
}

// GetAuthenticatedUser mocks base method.
func (m *MockUserServiceHandler) GetAuthenticatedUser(arg0 context.Context, arg1 *connect.Request[v1.GetAuthenticatedUserRequest]) (*connect.Response[v1.GetAuthenticatedUserResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticatedUser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetAuthenticatedUserResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticatedUser indicates an expected call of GetAuthenticatedUser.
func (mr *MockUserServiceHandlerMockRecorder) GetAuthenticatedUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatedUser", reflect.TypeOf((*MockUserServiceHandler)(nil).GetAuthenticatedUser), arg0, arg1)
}

// GetPersonalAccessToken mocks base method.
func (m *MockUserServiceHandler) GetPersonalAccessToken(arg0 context.Context, arg1 *connect.Request[v1.GetPersonalAccessTokenRequest]) (*connect.Response[v1.GetPersonalAccessTokenResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetPersonalAccessTokenResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalAccessToken indicates an expected call of GetPersonalAccessToken.
func (mr *MockUserServiceHandlerMockRecorder) GetPersonalAccessToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalAccessToken", reflect.TypeOf((*MockUserServiceHandler)(nil).GetPersonalAccessToken), arg0, arg1)
}

// GetPreference mocks base method.
func (m *MockUserServiceHandler) GetPreference(arg0 context.Context, arg1 *connect.Request[v1.GetPreferenceRequest]) (*connect.Response[v1.GetPreferenceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreference", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetPreferenceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreference indicates an expected call of GetPreference.
func (mr *MockUserServiceHandlerMockRecorder) GetPreference(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreference", reflect.TypeOf((*MockUserServiceHandler)(nil).GetPreference), arg0, arg1)
}

// ListPersonalAccessTokens mocks base method.
func (m *MockUserServiceHandler) ListPersonalAccessTokens(arg0 context.Context, arg1 *connect.Request[v1.ListPersonalAccessTokensRequest]) (*connect.Response[v1.ListPersonalAccessTokensResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPersonalAccessTokens", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListPersonalAccessTokensResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPersonalAccessTokens indicates an expected call of ListPersonalAccessTokens.
func (mr *MockUserServiceHandlerMockRecorder) ListPersonalAccessTokens(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPersonalAccessTokens", reflect.TypeOf((*MockUserServiceHandler)(nil).ListPersonalAccessTokens), arg0, arg1)
}

// ListPreferences mocks base method.
func (m *MockUserServiceHandler) ListPreferences(arg0 context.Context, arg1 *connect.Request[v1.ListPreferencesRequest]) (*connect.Response[v1.ListPreferencesResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPreferences", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListPreferencesResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPreferences indicates an expected call of ListPreferences.
func (mr *MockUserServiceHandlerMockRecorder) ListPreferences(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPreferences", reflect.TypeOf((*MockUserServiceHandler)(nil).ListPreferences), arg0, arg1)
}

// SetPreference mocks base method.
func (m *MockUserServiceHandler) SetPreference(arg0 context.Context, arg1 *connect.Request[v1.SetPreferenceRequest]) (*connect.Response[v1.SetPreferenceResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPreference", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.SetPreferenceResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPreference indicates an expected call of SetPreference.
func (mr *MockUserServiceHandlerMockRecorder) SetPreference(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreference", reflect.TypeOf((*MockUserServiceHandler)(nil).SetPreference), arg0, arg1)
}

// SetSuspended mocks base method.
func (m *MockUserServiceHandler) SetSuspended(arg0 context.Context, arg1 *connect.Request[v1.SetSuspendedRequest]) (*connect.Response[v1.SetSuspendedResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSuspended", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.SetSuspendedResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSuspended indicates an expected call of SetSuspended.
func (mr *MockUserServiceHandlerMockRecorder) SetSuspended(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSuspended", reflect.TypeOf((*MockUserServiceHandler)(nil).SetSuspended), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserServiceHandler) UpdateUser(arg0 context.Context, arg1 *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.UpdateUserResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceHandlerMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServiceHandler)(nil).UpdateUser), arg0, arg1)
}
