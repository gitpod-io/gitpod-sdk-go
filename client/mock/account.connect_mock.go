// Code generated by MockGen. DO NOT EDIT.
// Source: ../../v1/v1connect/account.connect.go
//
// Generated by this command:
//
//	mockgen -source=../../v1/v1connect/account.connect.go -destination=account.connect_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/gitpod-io/flex-api-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountServiceClient is a mock of AccountServiceClient interface.
type MockAccountServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceClientMockRecorder
	isgomock struct{}
}

// MockAccountServiceClientMockRecorder is the mock recorder for MockAccountServiceClient.
type MockAccountServiceClientMockRecorder struct {
	mock *MockAccountServiceClient
}

// NewMockAccountServiceClient creates a new mock instance.
func NewMockAccountServiceClient(ctrl *gomock.Controller) *MockAccountServiceClient {
	mock := &MockAccountServiceClient{ctrl: ctrl}
	mock.recorder = &MockAccountServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountServiceClient) EXPECT() *MockAccountServiceClientMockRecorder {
	return m.recorder
}

// DeleteAccount mocks base method.
func (m *MockAccountServiceClient) DeleteAccount(arg0 context.Context, arg1 *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteAccountResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountServiceClientMockRecorder) DeleteAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountServiceClient)(nil).DeleteAccount), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockAccountServiceClient) GetAccount(arg0 context.Context, arg1 *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetAccountResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountServiceClientMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountServiceClient)(nil).GetAccount), arg0, arg1)
}

// GetSSOLoginURL mocks base method.
func (m *MockAccountServiceClient) GetSSOLoginURL(arg0 context.Context, arg1 *connect.Request[v1.GetSSOLoginURLRequest]) (*connect.Response[v1.GetSSOLoginURLResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSOLoginURL", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetSSOLoginURLResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSOLoginURL indicates an expected call of GetSSOLoginURL.
func (mr *MockAccountServiceClientMockRecorder) GetSSOLoginURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSOLoginURL", reflect.TypeOf((*MockAccountServiceClient)(nil).GetSSOLoginURL), arg0, arg1)
}

// ListLoginProviders mocks base method.
func (m *MockAccountServiceClient) ListLoginProviders(arg0 context.Context, arg1 *connect.Request[v1.ListLoginProvidersRequest]) (*connect.Response[v1.ListLoginProvidersResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoginProviders", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListLoginProvidersResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoginProviders indicates an expected call of ListLoginProviders.
func (mr *MockAccountServiceClientMockRecorder) ListLoginProviders(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoginProviders", reflect.TypeOf((*MockAccountServiceClient)(nil).ListLoginProviders), arg0, arg1)
}

// MockAccountServiceHandler is a mock of AccountServiceHandler interface.
type MockAccountServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceHandlerMockRecorder
	isgomock struct{}
}

// MockAccountServiceHandlerMockRecorder is the mock recorder for MockAccountServiceHandler.
type MockAccountServiceHandlerMockRecorder struct {
	mock *MockAccountServiceHandler
}

// NewMockAccountServiceHandler creates a new mock instance.
func NewMockAccountServiceHandler(ctrl *gomock.Controller) *MockAccountServiceHandler {
	mock := &MockAccountServiceHandler{ctrl: ctrl}
	mock.recorder = &MockAccountServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountServiceHandler) EXPECT() *MockAccountServiceHandlerMockRecorder {
	return m.recorder
}

// DeleteAccount mocks base method.
func (m *MockAccountServiceHandler) DeleteAccount(arg0 context.Context, arg1 *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.DeleteAccountResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountServiceHandlerMockRecorder) DeleteAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountServiceHandler)(nil).DeleteAccount), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockAccountServiceHandler) GetAccount(arg0 context.Context, arg1 *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetAccountResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountServiceHandlerMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountServiceHandler)(nil).GetAccount), arg0, arg1)
}

// GetSSOLoginURL mocks base method.
func (m *MockAccountServiceHandler) GetSSOLoginURL(arg0 context.Context, arg1 *connect.Request[v1.GetSSOLoginURLRequest]) (*connect.Response[v1.GetSSOLoginURLResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSOLoginURL", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetSSOLoginURLResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSOLoginURL indicates an expected call of GetSSOLoginURL.
func (mr *MockAccountServiceHandlerMockRecorder) GetSSOLoginURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSOLoginURL", reflect.TypeOf((*MockAccountServiceHandler)(nil).GetSSOLoginURL), arg0, arg1)
}

// ListLoginProviders mocks base method.
func (m *MockAccountServiceHandler) ListLoginProviders(arg0 context.Context, arg1 *connect.Request[v1.ListLoginProvidersRequest]) (*connect.Response[v1.ListLoginProvidersResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoginProviders", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ListLoginProvidersResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoginProviders indicates an expected call of ListLoginProviders.
func (mr *MockAccountServiceHandlerMockRecorder) ListLoginProviders(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoginProviders", reflect.TypeOf((*MockAccountServiceHandler)(nil).ListLoginProviders), arg0, arg1)
}
