// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: gitpod/v1/runner_interaction.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendResponseRequest_ErrorCode int32

const (
	SendResponseRequest_ERROR_CODE_UNSPECIFIED         SendResponseRequest_ErrorCode = 0
	SendResponseRequest_ERROR_CODE_CANCELED            SendResponseRequest_ErrorCode = 1
	SendResponseRequest_ERROR_CODE_INVALID_ARGUMENT    SendResponseRequest_ErrorCode = 3
	SendResponseRequest_ERROR_CODE_DEADLINE_EXCEEDED   SendResponseRequest_ErrorCode = 4
	SendResponseRequest_ERROR_CODE_NOT_FOUND           SendResponseRequest_ErrorCode = 5
	SendResponseRequest_ERROR_CODE_ALREADY_EXISTS      SendResponseRequest_ErrorCode = 6
	SendResponseRequest_ERROR_CODE_PERMISSION_DENIED   SendResponseRequest_ErrorCode = 7
	SendResponseRequest_ERROR_CODE_RESOURCE_EXHAUSTED  SendResponseRequest_ErrorCode = 8
	SendResponseRequest_ERROR_CODE_FAILED_PRECONDITION SendResponseRequest_ErrorCode = 9
	SendResponseRequest_ERROR_CODE_UNIMPLEMENTED       SendResponseRequest_ErrorCode = 12
	SendResponseRequest_ERROR_CODE_UNAVAILABLE         SendResponseRequest_ErrorCode = 14
	SendResponseRequest_ERROR_CODE_UNAUTHENTICATED     SendResponseRequest_ErrorCode = 16
)

// Enum value maps for SendResponseRequest_ErrorCode.
var (
	SendResponseRequest_ErrorCode_name = map[int32]string{
		0:  "ERROR_CODE_UNSPECIFIED",
		1:  "ERROR_CODE_CANCELED",
		3:  "ERROR_CODE_INVALID_ARGUMENT",
		4:  "ERROR_CODE_DEADLINE_EXCEEDED",
		5:  "ERROR_CODE_NOT_FOUND",
		6:  "ERROR_CODE_ALREADY_EXISTS",
		7:  "ERROR_CODE_PERMISSION_DENIED",
		8:  "ERROR_CODE_RESOURCE_EXHAUSTED",
		9:  "ERROR_CODE_FAILED_PRECONDITION",
		12: "ERROR_CODE_UNIMPLEMENTED",
		14: "ERROR_CODE_UNAVAILABLE",
		16: "ERROR_CODE_UNAUTHENTICATED",
	}
	SendResponseRequest_ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":         0,
		"ERROR_CODE_CANCELED":            1,
		"ERROR_CODE_INVALID_ARGUMENT":    3,
		"ERROR_CODE_DEADLINE_EXCEEDED":   4,
		"ERROR_CODE_NOT_FOUND":           5,
		"ERROR_CODE_ALREADY_EXISTS":      6,
		"ERROR_CODE_PERMISSION_DENIED":   7,
		"ERROR_CODE_RESOURCE_EXHAUSTED":  8,
		"ERROR_CODE_FAILED_PRECONDITION": 9,
		"ERROR_CODE_UNIMPLEMENTED":       12,
		"ERROR_CODE_UNAVAILABLE":         14,
		"ERROR_CODE_UNAUTHENTICATED":     16,
	}
)

func (x SendResponseRequest_ErrorCode) Enum() *SendResponseRequest_ErrorCode {
	p := new(SendResponseRequest_ErrorCode)
	*p = x
	return p
}

func (x SendResponseRequest_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendResponseRequest_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_runner_interaction_proto_enumTypes[0].Descriptor()
}

func (SendResponseRequest_ErrorCode) Type() protoreflect.EnumType {
	return &file_gitpod_v1_runner_interaction_proto_enumTypes[0]
}

func (x SendResponseRequest_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendResponseRequest_ErrorCode.Descriptor instead.
func (SendResponseRequest_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{23, 0}
}

type SignupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runner's public key. Must be an ECDH public key encoded in PKIX, ASN.1 DER format.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The environment classes this runner has to offer
	EnvironmentClasses []*EnvironmentClass `protobuf:"bytes,2,rep,name=environment_classes,json=environmentClasses,proto3" json:"environment_classes,omitempty"`
}

func (x *SignupRequest) Reset() {
	*x = SignupRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignupRequest) ProtoMessage() {}

func (x *SignupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignupRequest.ProtoReflect.Descriptor instead.
func (*SignupRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{0}
}

func (x *SignupRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SignupRequest) GetEnvironmentClasses() []*EnvironmentClass {
	if x != nil {
		return x.EnvironmentClasses
	}
	return nil
}

type SignupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runner's identity
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
}

func (x *SignupResponse) Reset() {
	*x = SignupResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignupResponse) ProtoMessage() {}

func (x *SignupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignupResponse.ProtoReflect.Descriptor instead.
func (*SignupResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{1}
}

func (x *SignupResponse) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

type MarkRunnerActiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runner's identity
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
}

func (x *MarkRunnerActiveRequest) Reset() {
	*x = MarkRunnerActiveRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkRunnerActiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkRunnerActiveRequest) ProtoMessage() {}

func (x *MarkRunnerActiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkRunnerActiveRequest.ProtoReflect.Descriptor instead.
func (*MarkRunnerActiveRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{2}
}

func (x *MarkRunnerActiveRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

type MarkRunnerActiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkRunnerActiveResponse) Reset() {
	*x = MarkRunnerActiveResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkRunnerActiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkRunnerActiveResponse) ProtoMessage() {}

func (x *MarkRunnerActiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkRunnerActiveResponse.ProtoReflect.Descriptor instead.
func (*MarkRunnerActiveResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{3}
}

type ListRunnerEnvironmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing environments
	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The runner's identifier
	RunnerId string `protobuf:"bytes,2,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// An optional list of environment IDs to fetch. If this list is empty/not provided
	// all environments that ought to run on the runner are returned.
	EnvironmentIds []string `protobuf:"bytes,3,rep,name=environment_ids,json=environmentIds,proto3" json:"environment_ids,omitempty"`
}

func (x *ListRunnerEnvironmentsRequest) Reset() {
	*x = ListRunnerEnvironmentsRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnerEnvironmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerEnvironmentsRequest) ProtoMessage() {}

func (x *ListRunnerEnvironmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerEnvironmentsRequest.ProtoReflect.Descriptor instead.
func (*ListRunnerEnvironmentsRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{4}
}

func (x *ListRunnerEnvironmentsRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRunnerEnvironmentsRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *ListRunnerEnvironmentsRequest) GetEnvironmentIds() []string {
	if x != nil {
		return x.EnvironmentIds
	}
	return nil
}

type RunnerEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is a unique identifier of this environment. No other environment with the same name must be managed by this
	// environment manager
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata is data associated with this environment that's required for other parts of Gitpod to function
	Metadata *EnvironmentMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the configuration of the environment that's required for the runner to start the environment
	Spec *EnvironmentSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// The environment's access token
	EnvironmentAccessToken string `protobuf:"bytes,4,opt,name=environment_access_token,json=environmentAccessToken,proto3" json:"environment_access_token,omitempty"`
	// The last activity signal received by the management plane
	ActivitySignal *EnvironmentActivitySignal `protobuf:"bytes,5,opt,name=activity_signal,json=activitySignal,proto3" json:"activity_signal,omitempty"`
}

func (x *RunnerEnvironment) Reset() {
	*x = RunnerEnvironment{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerEnvironment) ProtoMessage() {}

func (x *RunnerEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerEnvironment.ProtoReflect.Descriptor instead.
func (*RunnerEnvironment) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{5}
}

func (x *RunnerEnvironment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunnerEnvironment) GetMetadata() *EnvironmentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RunnerEnvironment) GetSpec() *EnvironmentSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *RunnerEnvironment) GetEnvironmentAccessToken() string {
	if x != nil {
		return x.EnvironmentAccessToken
	}
	return ""
}

func (x *RunnerEnvironment) GetActivitySignal() *EnvironmentActivitySignal {
	if x != nil {
		return x.ActivitySignal
	}
	return nil
}

type ListRunnerEnvironmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing environments
	Pagination *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The environments running on the runner
	Environments []*RunnerEnvironment `protobuf:"bytes,2,rep,name=environments,proto3" json:"environments,omitempty"`
}

func (x *ListRunnerEnvironmentsResponse) Reset() {
	*x = ListRunnerEnvironmentsResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnerEnvironmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerEnvironmentsResponse) ProtoMessage() {}

func (x *ListRunnerEnvironmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerEnvironmentsResponse.ProtoReflect.Descriptor instead.
func (*ListRunnerEnvironmentsResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{6}
}

func (x *ListRunnerEnvironmentsResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRunnerEnvironmentsResponse) GetEnvironments() []*RunnerEnvironment {
	if x != nil {
		return x.Environments
	}
	return nil
}

type GetRunnerEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runner's identity
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// The environment's ID
	EnvironmentId string `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
}

func (x *GetRunnerEnvironmentRequest) Reset() {
	*x = GetRunnerEnvironmentRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunnerEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunnerEnvironmentRequest) ProtoMessage() {}

func (x *GetRunnerEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunnerEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*GetRunnerEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{7}
}

func (x *GetRunnerEnvironmentRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *GetRunnerEnvironmentRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type GetRunnerEnvironmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment *RunnerEnvironment `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *GetRunnerEnvironmentResponse) Reset() {
	*x = GetRunnerEnvironmentResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunnerEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunnerEnvironmentResponse) ProtoMessage() {}

func (x *GetRunnerEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunnerEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*GetRunnerEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{8}
}

func (x *GetRunnerEnvironmentResponse) GetEnvironment() *RunnerEnvironment {
	if x != nil {
		return x.Environment
	}
	return nil
}

type UpdateRunnerEnvironmentStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runner's identity
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// The environment's ID
	EnvironmentId string `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	// The environment's status
	Status *EnvironmentStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateRunnerEnvironmentStatusRequest) Reset() {
	*x = UpdateRunnerEnvironmentStatusRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRunnerEnvironmentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerEnvironmentStatusRequest) ProtoMessage() {}

func (x *UpdateRunnerEnvironmentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerEnvironmentStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateRunnerEnvironmentStatusRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRunnerEnvironmentStatusRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *UpdateRunnerEnvironmentStatusRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *UpdateRunnerEnvironmentStatusRequest) GetStatus() *EnvironmentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateRunnerEnvironmentStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRunnerEnvironmentStatusResponse) Reset() {
	*x = UpdateRunnerEnvironmentStatusResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRunnerEnvironmentStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerEnvironmentStatusResponse) ProtoMessage() {}

func (x *UpdateRunnerEnvironmentStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerEnvironmentStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateRunnerEnvironmentStatusResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{10}
}

type UpdateRunnerStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runner's identity
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// version is the version of the runner. This is used to detect if the runner is outdated.
	Version *string `protobuf:"bytes,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// system_details is a runner specific system detail string. Think of this like a user agent string.
	// It's intended to be used for debugging and support purposes and might be shown to the user.
	SystemDetails *string `protobuf:"bytes,4,opt,name=system_details,json=systemDetails,proto3,oneof" json:"system_details,omitempty"`
	// log_url is the URL to the runner's logs
	LogUrl *string `protobuf:"bytes,5,opt,name=log_url,json=logUrl,proto3,oneof" json:"log_url,omitempty"`
	// Degredation message is an optional message that is shown to users when the runner is in a degraded state.
	// Setting this to "" changes the runner's phase back from "degraded" to "active".
	DegredationMessage *string `protobuf:"bytes,6,opt,name=degredation_message,json=degredationMessage,proto3,oneof" json:"degredation_message,omitempty"`
	// region is the region the runner is running in, if applicable.
	Region *string `protobuf:"bytes,7,opt,name=region,proto3,oneof" json:"region,omitempty"`
	// additional_info updates fields in the runner's additional_info.
	AdditionalInfo []*FieldValueUpdate `protobuf:"bytes,8,rep,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
	// capabilities contains the runner's supported capabilities.
	// Optional field, only overwrites previous capabilities if set to a non-empty list.
	// To clear capabilities, set this to a list with a single UNSPECIFIED capability.
	Capabilities []RunnerCapability `protobuf:"varint,9,rep,packed,name=capabilities,proto3,enum=gitpod.v1.RunnerCapability" json:"capabilities,omitempty"`
}

func (x *UpdateRunnerStatusRequest) Reset() {
	*x = UpdateRunnerStatusRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRunnerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerStatusRequest) ProtoMessage() {}

func (x *UpdateRunnerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateRunnerStatusRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateRunnerStatusRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *UpdateRunnerStatusRequest) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *UpdateRunnerStatusRequest) GetSystemDetails() string {
	if x != nil && x.SystemDetails != nil {
		return *x.SystemDetails
	}
	return ""
}

func (x *UpdateRunnerStatusRequest) GetLogUrl() string {
	if x != nil && x.LogUrl != nil {
		return *x.LogUrl
	}
	return ""
}

func (x *UpdateRunnerStatusRequest) GetDegredationMessage() string {
	if x != nil && x.DegredationMessage != nil {
		return *x.DegredationMessage
	}
	return ""
}

func (x *UpdateRunnerStatusRequest) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *UpdateRunnerStatusRequest) GetAdditionalInfo() []*FieldValueUpdate {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

func (x *UpdateRunnerStatusRequest) GetCapabilities() []RunnerCapability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type UpdateRunnerStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRunnerStatusResponse) Reset() {
	*x = UpdateRunnerStatusResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRunnerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerStatusResponse) ProtoMessage() {}

func (x *UpdateRunnerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateRunnerStatusResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{12}
}

type UpdateRunnerConfigurationSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runner's identity
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// config_schema is the schema for the runner's configuration
	ConfigSchema *RunnerConfigurationSchema `protobuf:"bytes,2,opt,name=config_schema,json=configSchema,proto3" json:"config_schema,omitempty"`
}

func (x *UpdateRunnerConfigurationSchemaRequest) Reset() {
	*x = UpdateRunnerConfigurationSchemaRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRunnerConfigurationSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerConfigurationSchemaRequest) ProtoMessage() {}

func (x *UpdateRunnerConfigurationSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerConfigurationSchemaRequest.ProtoReflect.Descriptor instead.
func (*UpdateRunnerConfigurationSchemaRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateRunnerConfigurationSchemaRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *UpdateRunnerConfigurationSchemaRequest) GetConfigSchema() *RunnerConfigurationSchema {
	if x != nil {
		return x.ConfigSchema
	}
	return nil
}

type UpdateRunnerConfigurationSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRunnerConfigurationSchemaResponse) Reset() {
	*x = UpdateRunnerConfigurationSchemaResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRunnerConfigurationSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerConfigurationSchemaResponse) ProtoMessage() {}

func (x *UpdateRunnerConfigurationSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerConfigurationSchemaResponse.ProtoReflect.Descriptor instead.
func (*UpdateRunnerConfigurationSchemaResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{14}
}

type GetHostAuthenticationTokenValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runner's identity
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// The principal's ID to get the authentication token for
	PrincipalId string `protobuf:"bytes,2,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
	// The host to get the authentication token for
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *GetHostAuthenticationTokenValueRequest) Reset() {
	*x = GetHostAuthenticationTokenValueRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHostAuthenticationTokenValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostAuthenticationTokenValueRequest) ProtoMessage() {}

func (x *GetHostAuthenticationTokenValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostAuthenticationTokenValueRequest.ProtoReflect.Descriptor instead.
func (*GetHostAuthenticationTokenValueRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{15}
}

func (x *GetHostAuthenticationTokenValueRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *GetHostAuthenticationTokenValueRequest) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

func (x *GetHostAuthenticationTokenValueRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type GetHostAuthenticationTokenValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The authentication token encrypted as NaCL anonymous sealed box using the runner's public key
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The host authentication token's ID
	TokenId string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// The host authentication token's expiry
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// The host authentication token's refresh token encrypted as NaCL anonymous sealed box using the runner's public key
	RefreshToken []byte `protobuf:"bytes,4,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *GetHostAuthenticationTokenValueResponse) Reset() {
	*x = GetHostAuthenticationTokenValueResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHostAuthenticationTokenValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostAuthenticationTokenValueResponse) ProtoMessage() {}

func (x *GetHostAuthenticationTokenValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostAuthenticationTokenValueResponse.ProtoReflect.Descriptor instead.
func (*GetHostAuthenticationTokenValueResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{16}
}

func (x *GetHostAuthenticationTokenValueResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GetHostAuthenticationTokenValueResponse) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *GetHostAuthenticationTokenValueResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *GetHostAuthenticationTokenValueResponse) GetRefreshToken() []byte {
	if x != nil {
		return x.RefreshToken
	}
	return nil
}

type ListRunnerEnvironmentClassesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing environment classes
	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The runner's identity
	RunnerId string                                      `protobuf:"bytes,2,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	Filter   *ListRunnerEnvironmentClassesRequest_Filter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListRunnerEnvironmentClassesRequest) Reset() {
	*x = ListRunnerEnvironmentClassesRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnerEnvironmentClassesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerEnvironmentClassesRequest) ProtoMessage() {}

func (x *ListRunnerEnvironmentClassesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerEnvironmentClassesRequest.ProtoReflect.Descriptor instead.
func (*ListRunnerEnvironmentClassesRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{17}
}

func (x *ListRunnerEnvironmentClassesRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRunnerEnvironmentClassesRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *ListRunnerEnvironmentClassesRequest) GetFilter() *ListRunnerEnvironmentClassesRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListRunnerEnvironmentClassesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing environment classes
	Pagination *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The environment classes configured for the runner
	EnvironmentClasses []*EnvironmentClass `protobuf:"bytes,2,rep,name=environment_classes,json=environmentClasses,proto3" json:"environment_classes,omitempty"`
}

func (x *ListRunnerEnvironmentClassesResponse) Reset() {
	*x = ListRunnerEnvironmentClassesResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnerEnvironmentClassesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerEnvironmentClassesResponse) ProtoMessage() {}

func (x *ListRunnerEnvironmentClassesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerEnvironmentClassesResponse.ProtoReflect.Descriptor instead.
func (*ListRunnerEnvironmentClassesResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{18}
}

func (x *ListRunnerEnvironmentClassesResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRunnerEnvironmentClassesResponse) GetEnvironmentClasses() []*EnvironmentClass {
	if x != nil {
		return x.EnvironmentClasses
	}
	return nil
}

type ListRunnerSCMIntegrationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing SCM integrations
	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The runner's identity
	RunnerId string                                   `protobuf:"bytes,2,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	Filter   *ListRunnerSCMIntegrationsRequest_Filter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListRunnerSCMIntegrationsRequest) Reset() {
	*x = ListRunnerSCMIntegrationsRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnerSCMIntegrationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerSCMIntegrationsRequest) ProtoMessage() {}

func (x *ListRunnerSCMIntegrationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerSCMIntegrationsRequest.ProtoReflect.Descriptor instead.
func (*ListRunnerSCMIntegrationsRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{19}
}

func (x *ListRunnerSCMIntegrationsRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRunnerSCMIntegrationsRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *ListRunnerSCMIntegrationsRequest) GetFilter() *ListRunnerSCMIntegrationsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListRunnerSCMIntegrationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing SCM integrations
	Pagination *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The SCM integrations configured for the runner
	ScmIntegrations []*SCMIntegration `protobuf:"bytes,2,rep,name=scm_integrations,json=scmIntegrations,proto3" json:"scm_integrations,omitempty"`
}

func (x *ListRunnerSCMIntegrationsResponse) Reset() {
	*x = ListRunnerSCMIntegrationsResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnerSCMIntegrationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerSCMIntegrationsResponse) ProtoMessage() {}

func (x *ListRunnerSCMIntegrationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerSCMIntegrationsResponse.ProtoReflect.Descriptor instead.
func (*ListRunnerSCMIntegrationsResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{20}
}

func (x *ListRunnerSCMIntegrationsResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRunnerSCMIntegrationsResponse) GetScmIntegrations() []*SCMIntegration {
	if x != nil {
		return x.ScmIntegrations
	}
	return nil
}

type WatchRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runner's identity
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
}

func (x *WatchRequestsRequest) Reset() {
	*x = WatchRequestsRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRequestsRequest) ProtoMessage() {}

func (x *WatchRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRequestsRequest.ProtoReflect.Descriptor instead.
func (*WatchRequestsRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{21}
}

func (x *WatchRequestsRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

type WatchRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request's ID
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The request to handle
	//
	// Types that are assignable to Request:
	//
	//	*WatchRequestsResponse_EventEnvironmentSpecChange
	//	*WatchRequestsResponse_EventEnvironmentMarkedActive
	//	*WatchRequestsResponse_EventScmIntegrationChange
	//	*WatchRequestsResponse_EventHostAuthenticationTokenDeleted
	//	*WatchRequestsResponse_CallParseContext
	//	*WatchRequestsResponse_CallPing
	//	*WatchRequestsResponse_CallCheckAuthenticationForHost
	//	*WatchRequestsResponse_CallValidateConfig
	Request isWatchRequestsResponse_Request `protobuf_oneof:"request"`
}

func (x *WatchRequestsResponse) Reset() {
	*x = WatchRequestsResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRequestsResponse) ProtoMessage() {}

func (x *WatchRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRequestsResponse.ProtoReflect.Descriptor instead.
func (*WatchRequestsResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{22}
}

func (x *WatchRequestsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (m *WatchRequestsResponse) GetRequest() isWatchRequestsResponse_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *WatchRequestsResponse) GetEventEnvironmentSpecChange() *EventEnvironmentSpecChange {
	if x, ok := x.GetRequest().(*WatchRequestsResponse_EventEnvironmentSpecChange); ok {
		return x.EventEnvironmentSpecChange
	}
	return nil
}

func (x *WatchRequestsResponse) GetEventEnvironmentMarkedActive() *EventEnvironmentMarkedActive {
	if x, ok := x.GetRequest().(*WatchRequestsResponse_EventEnvironmentMarkedActive); ok {
		return x.EventEnvironmentMarkedActive
	}
	return nil
}

func (x *WatchRequestsResponse) GetEventScmIntegrationChange() *EventSCMIntegrationChange {
	if x, ok := x.GetRequest().(*WatchRequestsResponse_EventScmIntegrationChange); ok {
		return x.EventScmIntegrationChange
	}
	return nil
}

func (x *WatchRequestsResponse) GetEventHostAuthenticationTokenDeleted() *EventHostAuthenticationTokenDeleted {
	if x, ok := x.GetRequest().(*WatchRequestsResponse_EventHostAuthenticationTokenDeleted); ok {
		return x.EventHostAuthenticationTokenDeleted
	}
	return nil
}

func (x *WatchRequestsResponse) GetCallParseContext() *CallParseContext_Request {
	if x, ok := x.GetRequest().(*WatchRequestsResponse_CallParseContext); ok {
		return x.CallParseContext
	}
	return nil
}

func (x *WatchRequestsResponse) GetCallPing() *CallPing_Request {
	if x, ok := x.GetRequest().(*WatchRequestsResponse_CallPing); ok {
		return x.CallPing
	}
	return nil
}

func (x *WatchRequestsResponse) GetCallCheckAuthenticationForHost() *CallCheckAuthenticationForHost_Request {
	if x, ok := x.GetRequest().(*WatchRequestsResponse_CallCheckAuthenticationForHost); ok {
		return x.CallCheckAuthenticationForHost
	}
	return nil
}

func (x *WatchRequestsResponse) GetCallValidateConfig() *CallValidateConfig_Request {
	if x, ok := x.GetRequest().(*WatchRequestsResponse_CallValidateConfig); ok {
		return x.CallValidateConfig
	}
	return nil
}

type isWatchRequestsResponse_Request interface {
	isWatchRequestsResponse_Request()
}

type WatchRequestsResponse_EventEnvironmentSpecChange struct {
	EventEnvironmentSpecChange *EventEnvironmentSpecChange `protobuf:"bytes,10,opt,name=event_environment_spec_change,json=eventEnvironmentSpecChange,proto3,oneof"`
}

type WatchRequestsResponse_EventEnvironmentMarkedActive struct {
	EventEnvironmentMarkedActive *EventEnvironmentMarkedActive `protobuf:"bytes,11,opt,name=event_environment_marked_active,json=eventEnvironmentMarkedActive,proto3,oneof"`
}

type WatchRequestsResponse_EventScmIntegrationChange struct {
	EventScmIntegrationChange *EventSCMIntegrationChange `protobuf:"bytes,12,opt,name=event_scm_integration_change,json=eventScmIntegrationChange,proto3,oneof"`
}

type WatchRequestsResponse_EventHostAuthenticationTokenDeleted struct {
	EventHostAuthenticationTokenDeleted *EventHostAuthenticationTokenDeleted `protobuf:"bytes,13,opt,name=event_host_authentication_token_deleted,json=eventHostAuthenticationTokenDeleted,proto3,oneof"`
}

type WatchRequestsResponse_CallParseContext struct {
	CallParseContext *CallParseContext_Request `protobuf:"bytes,50,opt,name=call_parse_context,json=callParseContext,proto3,oneof"`
}

type WatchRequestsResponse_CallPing struct {
	CallPing *CallPing_Request `protobuf:"bytes,51,opt,name=call_ping,json=callPing,proto3,oneof"`
}

type WatchRequestsResponse_CallCheckAuthenticationForHost struct {
	CallCheckAuthenticationForHost *CallCheckAuthenticationForHost_Request `protobuf:"bytes,52,opt,name=call_check_authentication_for_host,json=callCheckAuthenticationForHost,proto3,oneof"`
}

type WatchRequestsResponse_CallValidateConfig struct {
	CallValidateConfig *CallValidateConfig_Request `protobuf:"bytes,53,opt,name=call_validate_config,json=callValidateConfig,proto3,oneof"`
}

func (*WatchRequestsResponse_EventEnvironmentSpecChange) isWatchRequestsResponse_Request() {}

func (*WatchRequestsResponse_EventEnvironmentMarkedActive) isWatchRequestsResponse_Request() {}

func (*WatchRequestsResponse_EventScmIntegrationChange) isWatchRequestsResponse_Request() {}

func (*WatchRequestsResponse_EventHostAuthenticationTokenDeleted) isWatchRequestsResponse_Request() {}

func (*WatchRequestsResponse_CallParseContext) isWatchRequestsResponse_Request() {}

func (*WatchRequestsResponse_CallPing) isWatchRequestsResponse_Request() {}

func (*WatchRequestsResponse_CallCheckAuthenticationForHost) isWatchRequestsResponse_Request() {}

func (*WatchRequestsResponse_CallValidateConfig) isWatchRequestsResponse_Request() {}

type SendResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runner's identity
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// The request's ID we're responding to
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The response to send
	//
	// Types that are assignable to Response:
	//
	//	*SendResponseRequest_Error
	//	*SendResponseRequest_CallParseContext
	//	*SendResponseRequest_CallPing
	//	*SendResponseRequest_CallCheckAuthenticationForHost
	//	*SendResponseRequest_CallValidateConfig
	Response isSendResponseRequest_Response `protobuf_oneof:"response"`
}

func (x *SendResponseRequest) Reset() {
	*x = SendResponseRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponseRequest) ProtoMessage() {}

func (x *SendResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponseRequest.ProtoReflect.Descriptor instead.
func (*SendResponseRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{23}
}

func (x *SendResponseRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *SendResponseRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (m *SendResponseRequest) GetResponse() isSendResponseRequest_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SendResponseRequest) GetError() *SendResponseRequest_CallError {
	if x, ok := x.GetResponse().(*SendResponseRequest_Error); ok {
		return x.Error
	}
	return nil
}

func (x *SendResponseRequest) GetCallParseContext() *CallParseContext_Response {
	if x, ok := x.GetResponse().(*SendResponseRequest_CallParseContext); ok {
		return x.CallParseContext
	}
	return nil
}

func (x *SendResponseRequest) GetCallPing() *CallPing_Response {
	if x, ok := x.GetResponse().(*SendResponseRequest_CallPing); ok {
		return x.CallPing
	}
	return nil
}

func (x *SendResponseRequest) GetCallCheckAuthenticationForHost() *CallCheckAuthenticationForHost_Response {
	if x, ok := x.GetResponse().(*SendResponseRequest_CallCheckAuthenticationForHost); ok {
		return x.CallCheckAuthenticationForHost
	}
	return nil
}

func (x *SendResponseRequest) GetCallValidateConfig() *CallValidateConfig_Response {
	if x, ok := x.GetResponse().(*SendResponseRequest_CallValidateConfig); ok {
		return x.CallValidateConfig
	}
	return nil
}

type isSendResponseRequest_Response interface {
	isSendResponseRequest_Response()
}

type SendResponseRequest_Error struct {
	Error *SendResponseRequest_CallError `protobuf:"bytes,5,opt,name=error,proto3,oneof"`
}

type SendResponseRequest_CallParseContext struct {
	CallParseContext *CallParseContext_Response `protobuf:"bytes,50,opt,name=call_parse_context,json=callParseContext,proto3,oneof"`
}

type SendResponseRequest_CallPing struct {
	CallPing *CallPing_Response `protobuf:"bytes,51,opt,name=call_ping,json=callPing,proto3,oneof"`
}

type SendResponseRequest_CallCheckAuthenticationForHost struct {
	CallCheckAuthenticationForHost *CallCheckAuthenticationForHost_Response `protobuf:"bytes,52,opt,name=call_check_authentication_for_host,json=callCheckAuthenticationForHost,proto3,oneof"`
}

type SendResponseRequest_CallValidateConfig struct {
	CallValidateConfig *CallValidateConfig_Response `protobuf:"bytes,53,opt,name=call_validate_config,json=callValidateConfig,proto3,oneof"`
}

func (*SendResponseRequest_Error) isSendResponseRequest_Response() {}

func (*SendResponseRequest_CallParseContext) isSendResponseRequest_Response() {}

func (*SendResponseRequest_CallPing) isSendResponseRequest_Response() {}

func (*SendResponseRequest_CallCheckAuthenticationForHost) isSendResponseRequest_Response() {}

func (*SendResponseRequest_CallValidateConfig) isSendResponseRequest_Response() {}

type SendResponseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendResponseResponse) Reset() {
	*x = SendResponseResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendResponseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponseResponse) ProtoMessage() {}

func (x *SendResponseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponseResponse.ProtoReflect.Descriptor instead.
func (*SendResponseResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{24}
}

type EventEnvironmentSpecChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The environment's ID
	EnvironmentId string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
}

func (x *EventEnvironmentSpecChange) Reset() {
	*x = EventEnvironmentSpecChange{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventEnvironmentSpecChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEnvironmentSpecChange) ProtoMessage() {}

func (x *EventEnvironmentSpecChange) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEnvironmentSpecChange.ProtoReflect.Descriptor instead.
func (*EventEnvironmentSpecChange) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{25}
}

func (x *EventEnvironmentSpecChange) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type EventEnvironmentMarkedActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The environment's ID
	EnvironmentId string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
}

func (x *EventEnvironmentMarkedActive) Reset() {
	*x = EventEnvironmentMarkedActive{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventEnvironmentMarkedActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEnvironmentMarkedActive) ProtoMessage() {}

func (x *EventEnvironmentMarkedActive) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEnvironmentMarkedActive.ProtoReflect.Descriptor instead.
func (*EventEnvironmentMarkedActive) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{26}
}

func (x *EventEnvironmentMarkedActive) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type EventSCMIntegrationChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The SCM integration's ID
	ScmIntegrationId string `protobuf:"bytes,1,opt,name=scm_integration_id,json=scmIntegrationId,proto3" json:"scm_integration_id,omitempty"`
}

func (x *EventSCMIntegrationChange) Reset() {
	*x = EventSCMIntegrationChange{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventSCMIntegrationChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSCMIntegrationChange) ProtoMessage() {}

func (x *EventSCMIntegrationChange) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSCMIntegrationChange.ProtoReflect.Descriptor instead.
func (*EventSCMIntegrationChange) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{27}
}

func (x *EventSCMIntegrationChange) GetScmIntegrationId() string {
	if x != nil {
		return x.ScmIntegrationId
	}
	return ""
}

type EventHostAuthenticationTokenDeleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host authentication token's host.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The principal ID of the deleted token.
	PrincipalId string `protobuf:"bytes,2,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
}

func (x *EventHostAuthenticationTokenDeleted) Reset() {
	*x = EventHostAuthenticationTokenDeleted{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventHostAuthenticationTokenDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventHostAuthenticationTokenDeleted) ProtoMessage() {}

func (x *EventHostAuthenticationTokenDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventHostAuthenticationTokenDeleted.ProtoReflect.Descriptor instead.
func (*EventHostAuthenticationTokenDeleted) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{28}
}

func (x *EventHostAuthenticationTokenDeleted) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *EventHostAuthenticationTokenDeleted) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

type CallParseContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallParseContext) Reset() {
	*x = CallParseContext{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallParseContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallParseContext) ProtoMessage() {}

func (x *CallParseContext) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallParseContext.ProtoReflect.Descriptor instead.
func (*CallParseContext) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{29}
}

type CallPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallPing) Reset() {
	*x = CallPing{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallPing) ProtoMessage() {}

func (x *CallPing) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallPing.ProtoReflect.Descriptor instead.
func (*CallPing) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{30}
}

type CallCheckAuthenticationForHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallCheckAuthenticationForHost) Reset() {
	*x = CallCheckAuthenticationForHost{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallCheckAuthenticationForHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallCheckAuthenticationForHost) ProtoMessage() {}

func (x *CallCheckAuthenticationForHost) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallCheckAuthenticationForHost.ProtoReflect.Descriptor instead.
func (*CallCheckAuthenticationForHost) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{31}
}

type CallValidateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallValidateConfig) Reset() {
	*x = CallValidateConfig{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallValidateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallValidateConfig) ProtoMessage() {}

func (x *CallValidateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallValidateConfig.ProtoReflect.Descriptor instead.
func (*CallValidateConfig) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{32}
}

type GetLatestVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runner's identity
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// The current version of the runner
	CurrentVersion string `protobuf:"bytes,2,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	// The version of the infrastructure
	InfrastructureVersion string `protobuf:"bytes,3,opt,name=infrastructure_version,json=infrastructureVersion,proto3" json:"infrastructure_version,omitempty"`
}

func (x *GetLatestVersionRequest) Reset() {
	*x = GetLatestVersionRequest{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestVersionRequest) ProtoMessage() {}

func (x *GetLatestVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestVersionRequest.ProtoReflect.Descriptor instead.
func (*GetLatestVersionRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{33}
}

func (x *GetLatestVersionRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *GetLatestVersionRequest) GetCurrentVersion() string {
	if x != nil {
		return x.CurrentVersion
	}
	return ""
}

func (x *GetLatestVersionRequest) GetInfrastructureVersion() string {
	if x != nil {
		return x.InfrastructureVersion
	}
	return ""
}

type GetLatestVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The latest version of the runner
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The container image of the runner
	RunnerImage string `protobuf:"bytes,2,opt,name=runner_image,json=runnerImage,proto3" json:"runner_image,omitempty"`
	// auto-update indicates if the runner should be updated automatically
	AutoUpdate bool `protobuf:"varint,3,opt,name=auto_update,json=autoUpdate,proto3" json:"auto_update,omitempty"`
	// supervisor_download_url is the URL to download the supervisor
	SupervisorDownloadUrl string `protobuf:"bytes,4,opt,name=supervisor_download_url,json=supervisorDownloadUrl,proto3" json:"supervisor_download_url,omitempty"`
	// gitpod_cli_download_url is the URL to download the gitpod CLI
	GitpodCliDownloadUrl string `protobuf:"bytes,5,opt,name=gitpod_cli_download_url,json=gitpodCliDownloadUrl,proto3" json:"gitpod_cli_download_url,omitempty"`
}

func (x *GetLatestVersionResponse) Reset() {
	*x = GetLatestVersionResponse{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestVersionResponse) ProtoMessage() {}

func (x *GetLatestVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestVersionResponse.ProtoReflect.Descriptor instead.
func (*GetLatestVersionResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{34}
}

func (x *GetLatestVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetLatestVersionResponse) GetRunnerImage() string {
	if x != nil {
		return x.RunnerImage
	}
	return ""
}

func (x *GetLatestVersionResponse) GetAutoUpdate() bool {
	if x != nil {
		return x.AutoUpdate
	}
	return false
}

func (x *GetLatestVersionResponse) GetSupervisorDownloadUrl() string {
	if x != nil {
		return x.SupervisorDownloadUrl
	}
	return ""
}

func (x *GetLatestVersionResponse) GetGitpodCliDownloadUrl() string {
	if x != nil {
		return x.GitpodCliDownloadUrl
	}
	return ""
}

type ListRunnerEnvironmentClassesRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// environment_class_ids filters the response to only environment classes with these IDs
	EnvironmentClassIds []string `protobuf:"bytes,1,rep,name=environment_class_ids,json=environmentClassIds,proto3" json:"environment_class_ids,omitempty"`
}

func (x *ListRunnerEnvironmentClassesRequest_Filter) Reset() {
	*x = ListRunnerEnvironmentClassesRequest_Filter{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnerEnvironmentClassesRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerEnvironmentClassesRequest_Filter) ProtoMessage() {}

func (x *ListRunnerEnvironmentClassesRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerEnvironmentClassesRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListRunnerEnvironmentClassesRequest_Filter) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ListRunnerEnvironmentClassesRequest_Filter) GetEnvironmentClassIds() []string {
	if x != nil {
		return x.EnvironmentClassIds
	}
	return nil
}

type ListRunnerSCMIntegrationsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// environment_class_ids filters the response to only SCM integrations with these IDs
	ScmIntegrationIds []string `protobuf:"bytes,1,rep,name=scm_integration_ids,json=scmIntegrationIds,proto3" json:"scm_integration_ids,omitempty"`
}

func (x *ListRunnerSCMIntegrationsRequest_Filter) Reset() {
	*x = ListRunnerSCMIntegrationsRequest_Filter{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnerSCMIntegrationsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerSCMIntegrationsRequest_Filter) ProtoMessage() {}

func (x *ListRunnerSCMIntegrationsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerSCMIntegrationsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListRunnerSCMIntegrationsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ListRunnerSCMIntegrationsRequest_Filter) GetScmIntegrationIds() []string {
	if x != nil {
		return x.ScmIntegrationIds
	}
	return nil
}

type SendResponseRequest_CallError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error's code
	Code SendResponseRequest_ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=gitpod.v1.SendResponseRequest_ErrorCode" json:"code,omitempty"`
	// The error's message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Error details
	Details []*anypb.Any `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *SendResponseRequest_CallError) Reset() {
	*x = SendResponseRequest_CallError{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendResponseRequest_CallError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponseRequest_CallError) ProtoMessage() {}

func (x *SendResponseRequest_CallError) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponseRequest_CallError.ProtoReflect.Descriptor instead.
func (*SendResponseRequest_CallError) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{23, 0}
}

func (x *SendResponseRequest_CallError) GetCode() SendResponseRequest_ErrorCode {
	if x != nil {
		return x.Code
	}
	return SendResponseRequest_ERROR_CODE_UNSPECIFIED
}

func (x *SendResponseRequest_CallError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendResponseRequest_CallError) GetDetails() []*anypb.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

type CallParseContext_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextUrl  string `protobuf:"bytes,1,opt,name=context_url,json=contextUrl,proto3" json:"context_url,omitempty"`
	PrincipalId string `protobuf:"bytes,2,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
}

func (x *CallParseContext_Request) Reset() {
	*x = CallParseContext_Request{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallParseContext_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallParseContext_Request) ProtoMessage() {}

func (x *CallParseContext_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallParseContext_Request.ProtoReflect.Descriptor instead.
func (*CallParseContext_Request) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CallParseContext_Request) GetContextUrl() string {
	if x != nil {
		return x.ContextUrl
	}
	return ""
}

func (x *CallParseContext_Request) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

type CallParseContext_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp *ParseContextURLResponse `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *CallParseContext_Response) Reset() {
	*x = CallParseContext_Response{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallParseContext_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallParseContext_Response) ProtoMessage() {}

func (x *CallParseContext_Response) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallParseContext_Response.ProtoReflect.Descriptor instead.
func (*CallParseContext_Response) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{29, 1}
}

func (x *CallParseContext_Response) GetResp() *ParseContextURLResponse {
	if x != nil {
		return x.Resp
	}
	return nil
}

type CallPing_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallPing_Request) Reset() {
	*x = CallPing_Request{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallPing_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallPing_Request) ProtoMessage() {}

func (x *CallPing_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallPing_Request.ProtoReflect.Descriptor instead.
func (*CallPing_Request) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{30, 0}
}

type CallPing_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallPing_Response) Reset() {
	*x = CallPing_Response{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallPing_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallPing_Response) ProtoMessage() {}

func (x *CallPing_Response) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallPing_Response.ProtoReflect.Descriptor instead.
func (*CallPing_Response) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{30, 1}
}

type CallCheckAuthenticationForHost_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host        string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	PrincipalId string `protobuf:"bytes,2,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
}

func (x *CallCheckAuthenticationForHost_Request) Reset() {
	*x = CallCheckAuthenticationForHost_Request{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallCheckAuthenticationForHost_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallCheckAuthenticationForHost_Request) ProtoMessage() {}

func (x *CallCheckAuthenticationForHost_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallCheckAuthenticationForHost_Request.ProtoReflect.Descriptor instead.
func (*CallCheckAuthenticationForHost_Request) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{31, 0}
}

func (x *CallCheckAuthenticationForHost_Request) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CallCheckAuthenticationForHost_Request) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

type CallCheckAuthenticationForHost_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp *CheckAuthenticationForHostResponse `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (x *CallCheckAuthenticationForHost_Response) Reset() {
	*x = CallCheckAuthenticationForHost_Response{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallCheckAuthenticationForHost_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallCheckAuthenticationForHost_Response) ProtoMessage() {}

func (x *CallCheckAuthenticationForHost_Response) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallCheckAuthenticationForHost_Response.ProtoReflect.Descriptor instead.
func (*CallCheckAuthenticationForHost_Response) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{31, 1}
}

func (x *CallCheckAuthenticationForHost_Response) GetResp() *CheckAuthenticationForHostResponse {
	if x != nil {
		return x.Resp
	}
	return nil
}

type CallValidateConfig_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*CallValidateConfig_Request_EnvironmentClass
	//	*CallValidateConfig_Request_Scm
	Config isCallValidateConfig_Request_Config `protobuf_oneof:"config"`
}

func (x *CallValidateConfig_Request) Reset() {
	*x = CallValidateConfig_Request{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallValidateConfig_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallValidateConfig_Request) ProtoMessage() {}

func (x *CallValidateConfig_Request) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallValidateConfig_Request.ProtoReflect.Descriptor instead.
func (*CallValidateConfig_Request) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{32, 0}
}

func (m *CallValidateConfig_Request) GetConfig() isCallValidateConfig_Request_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *CallValidateConfig_Request) GetEnvironmentClass() *EnvironmentClass {
	if x, ok := x.GetConfig().(*CallValidateConfig_Request_EnvironmentClass); ok {
		return x.EnvironmentClass
	}
	return nil
}

func (x *CallValidateConfig_Request) GetScm() *SCMIntegration {
	if x, ok := x.GetConfig().(*CallValidateConfig_Request_Scm); ok {
		return x.Scm
	}
	return nil
}

type isCallValidateConfig_Request_Config interface {
	isCallValidateConfig_Request_Config()
}

type CallValidateConfig_Request_EnvironmentClass struct {
	EnvironmentClass *EnvironmentClass `protobuf:"bytes,1,opt,name=environment_class,json=environmentClass,proto3,oneof"`
}

type CallValidateConfig_Request_Scm struct {
	Scm *SCMIntegration `protobuf:"bytes,2,opt,name=scm,proto3,oneof"`
}

func (*CallValidateConfig_Request_EnvironmentClass) isCallValidateConfig_Request_Config() {}

func (*CallValidateConfig_Request_Scm) isCallValidateConfig_Request_Config() {}

type CallValidateConfig_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*CallValidateConfig_Response_EnvironmentClass
	//	*CallValidateConfig_Response_Scm
	Result isCallValidateConfig_Response_Result `protobuf_oneof:"result"`
}

func (x *CallValidateConfig_Response) Reset() {
	*x = CallValidateConfig_Response{}
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallValidateConfig_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallValidateConfig_Response) ProtoMessage() {}

func (x *CallValidateConfig_Response) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_interaction_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallValidateConfig_Response.ProtoReflect.Descriptor instead.
func (*CallValidateConfig_Response) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_interaction_proto_rawDescGZIP(), []int{32, 1}
}

func (m *CallValidateConfig_Response) GetResult() isCallValidateConfig_Response_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *CallValidateConfig_Response) GetEnvironmentClass() *EnvironmentClassValidationResult {
	if x, ok := x.GetResult().(*CallValidateConfig_Response_EnvironmentClass); ok {
		return x.EnvironmentClass
	}
	return nil
}

func (x *CallValidateConfig_Response) GetScm() *SCMIntegrationValidationResult {
	if x, ok := x.GetResult().(*CallValidateConfig_Response_Scm); ok {
		return x.Scm
	}
	return nil
}

type isCallValidateConfig_Response_Result interface {
	isCallValidateConfig_Response_Result()
}

type CallValidateConfig_Response_EnvironmentClass struct {
	EnvironmentClass *EnvironmentClassValidationResult `protobuf:"bytes,1,opt,name=environment_class,json=environmentClass,proto3,oneof"`
}

type CallValidateConfig_Response_Scm struct {
	Scm *SCMIntegrationValidationResult `protobuf:"bytes,2,opt,name=scm,proto3,oneof"`
}

func (*CallValidateConfig_Response_EnvironmentClass) isCallValidateConfig_Response_Result() {}

func (*CallValidateConfig_Response_Scm) isCallValidateConfig_Response_Result() {}

var File_gitpod_v1_runner_interaction_proto protoreflect.FileDescriptor

var file_gitpod_v1_runner_interaction_proto_rawDesc = []byte{
	0x0a, 0x22, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f,
	0x67, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x85, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xba, 0x48, 0x04, 0x7a, 0x02, 0x68, 0x20, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x13, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x4f, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x1a, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcb, 0x01,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48,
	0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x11,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x18, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x22, 0xa1, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0xa2, 0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x27, 0x0a,
	0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xec, 0x03, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64,
	0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01,
	0x48, 0x02, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x13, 0x64, 0x65, 0x67, 0x72, 0x65, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x12, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a,
	0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22,
	0x29, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x26, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69,
	0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xba, 0x01, 0x0a,
	0x27, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xdb, 0x02, 0x0a, 0x23, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b,
	0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x71, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x67,
	0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x33, 0xba,
	0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0xa2, 0xab, 0x1e, 0x1e, 0x0a, 0x1c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x73, 0x52, 0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0xcf, 0x02,
	0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x43, 0x4d, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e,
	0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x43, 0x4d,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x6b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x13,
	0x73, 0x63, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x31, 0xba, 0x48, 0x0e, 0x92, 0x01,
	0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x1c,
	0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x6d, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x11, 0x73, 0x63,
	0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22,
	0xa8, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x43,
	0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x63, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x4d, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x63, 0x6d, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4c, 0x0a, 0x14, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2,
	0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x98, 0x07, 0x0a, 0x15, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0xa2, 0xab, 0x1e, 0x0c, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x69, 0x64,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x1d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x1f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x67, 0x0a, 0x1c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x19, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x27, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x23, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x12, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x3a, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x7f, 0x0a, 0x22,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x63,
	0x61, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x59, 0x0a,
	0x14, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xdc, 0x08, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2,
	0xab, 0x1e, 0x0c, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x69, 0x64, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x12,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x80, 0x01, 0x0a, 0x22, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x1e, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x93,
	0x01, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0xff, 0x02, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52,
	0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x48,
	0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x4d, 0x50,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x10, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x0a, 0x1a, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x10, 0x0a, 0x0e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x52, 0x0d,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a,
	0x1c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x43, 0x0a,
	0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2,
	0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x6a, 0x0a, 0x19, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x43, 0x4d, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x4d, 0x0a, 0x12, 0x73, 0x63, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x13, 0x0a, 0x11, 0x73, 0x63, 0x6d, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x69, 0x64, 0x52, 0x10, 0x73, 0x63,
	0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x66,
	0x0a, 0x23, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x6c, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x4d, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x1a, 0x42, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x52, 0x4c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x21,
	0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x69, 0x6e, 0x67, 0x1a, 0x09, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xb1, 0x01, 0x0a, 0x1e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x48, 0x6f, 0x73, 0x74, 0x1a, 0x40, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x1a, 0x4d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0xd7, 0x02, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x8e, 0x01, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x73, 0x63, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43,
	0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03,
	0x73, 0x63, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xaf, 0x01,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x03, 0x73, 0x63, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x73, 0x63, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xaf, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x5f, 0x63,
	0x6c, 0x69, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x43, 0x6c, 0x69,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x32, 0xad, 0x0b, 0x0a, 0x18,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x12, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x4d, 0x61, 0x72,
	0x6b, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x6f, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8d, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01,
	0x12, 0x81, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_gitpod_v1_runner_interaction_proto_rawDescOnce sync.Once
	file_gitpod_v1_runner_interaction_proto_rawDescData = file_gitpod_v1_runner_interaction_proto_rawDesc
)

func file_gitpod_v1_runner_interaction_proto_rawDescGZIP() []byte {
	file_gitpod_v1_runner_interaction_proto_rawDescOnce.Do(func() {
		file_gitpod_v1_runner_interaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitpod_v1_runner_interaction_proto_rawDescData)
	})
	return file_gitpod_v1_runner_interaction_proto_rawDescData
}

var file_gitpod_v1_runner_interaction_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gitpod_v1_runner_interaction_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_gitpod_v1_runner_interaction_proto_goTypes = []any{
	(SendResponseRequest_ErrorCode)(0),                 // 0: gitpod.v1.SendResponseRequest.ErrorCode
	(*SignupRequest)(nil),                              // 1: gitpod.v1.SignupRequest
	(*SignupResponse)(nil),                             // 2: gitpod.v1.SignupResponse
	(*MarkRunnerActiveRequest)(nil),                    // 3: gitpod.v1.MarkRunnerActiveRequest
	(*MarkRunnerActiveResponse)(nil),                   // 4: gitpod.v1.MarkRunnerActiveResponse
	(*ListRunnerEnvironmentsRequest)(nil),              // 5: gitpod.v1.ListRunnerEnvironmentsRequest
	(*RunnerEnvironment)(nil),                          // 6: gitpod.v1.RunnerEnvironment
	(*ListRunnerEnvironmentsResponse)(nil),             // 7: gitpod.v1.ListRunnerEnvironmentsResponse
	(*GetRunnerEnvironmentRequest)(nil),                // 8: gitpod.v1.GetRunnerEnvironmentRequest
	(*GetRunnerEnvironmentResponse)(nil),               // 9: gitpod.v1.GetRunnerEnvironmentResponse
	(*UpdateRunnerEnvironmentStatusRequest)(nil),       // 10: gitpod.v1.UpdateRunnerEnvironmentStatusRequest
	(*UpdateRunnerEnvironmentStatusResponse)(nil),      // 11: gitpod.v1.UpdateRunnerEnvironmentStatusResponse
	(*UpdateRunnerStatusRequest)(nil),                  // 12: gitpod.v1.UpdateRunnerStatusRequest
	(*UpdateRunnerStatusResponse)(nil),                 // 13: gitpod.v1.UpdateRunnerStatusResponse
	(*UpdateRunnerConfigurationSchemaRequest)(nil),     // 14: gitpod.v1.UpdateRunnerConfigurationSchemaRequest
	(*UpdateRunnerConfigurationSchemaResponse)(nil),    // 15: gitpod.v1.UpdateRunnerConfigurationSchemaResponse
	(*GetHostAuthenticationTokenValueRequest)(nil),     // 16: gitpod.v1.GetHostAuthenticationTokenValueRequest
	(*GetHostAuthenticationTokenValueResponse)(nil),    // 17: gitpod.v1.GetHostAuthenticationTokenValueResponse
	(*ListRunnerEnvironmentClassesRequest)(nil),        // 18: gitpod.v1.ListRunnerEnvironmentClassesRequest
	(*ListRunnerEnvironmentClassesResponse)(nil),       // 19: gitpod.v1.ListRunnerEnvironmentClassesResponse
	(*ListRunnerSCMIntegrationsRequest)(nil),           // 20: gitpod.v1.ListRunnerSCMIntegrationsRequest
	(*ListRunnerSCMIntegrationsResponse)(nil),          // 21: gitpod.v1.ListRunnerSCMIntegrationsResponse
	(*WatchRequestsRequest)(nil),                       // 22: gitpod.v1.WatchRequestsRequest
	(*WatchRequestsResponse)(nil),                      // 23: gitpod.v1.WatchRequestsResponse
	(*SendResponseRequest)(nil),                        // 24: gitpod.v1.SendResponseRequest
	(*SendResponseResponse)(nil),                       // 25: gitpod.v1.SendResponseResponse
	(*EventEnvironmentSpecChange)(nil),                 // 26: gitpod.v1.EventEnvironmentSpecChange
	(*EventEnvironmentMarkedActive)(nil),               // 27: gitpod.v1.EventEnvironmentMarkedActive
	(*EventSCMIntegrationChange)(nil),                  // 28: gitpod.v1.EventSCMIntegrationChange
	(*EventHostAuthenticationTokenDeleted)(nil),        // 29: gitpod.v1.EventHostAuthenticationTokenDeleted
	(*CallParseContext)(nil),                           // 30: gitpod.v1.CallParseContext
	(*CallPing)(nil),                                   // 31: gitpod.v1.CallPing
	(*CallCheckAuthenticationForHost)(nil),             // 32: gitpod.v1.CallCheckAuthenticationForHost
	(*CallValidateConfig)(nil),                         // 33: gitpod.v1.CallValidateConfig
	(*GetLatestVersionRequest)(nil),                    // 34: gitpod.v1.GetLatestVersionRequest
	(*GetLatestVersionResponse)(nil),                   // 35: gitpod.v1.GetLatestVersionResponse
	(*ListRunnerEnvironmentClassesRequest_Filter)(nil), // 36: gitpod.v1.ListRunnerEnvironmentClassesRequest.Filter
	(*ListRunnerSCMIntegrationsRequest_Filter)(nil),    // 37: gitpod.v1.ListRunnerSCMIntegrationsRequest.Filter
	(*SendResponseRequest_CallError)(nil),              // 38: gitpod.v1.SendResponseRequest.CallError
	(*CallParseContext_Request)(nil),                   // 39: gitpod.v1.CallParseContext.Request
	(*CallParseContext_Response)(nil),                  // 40: gitpod.v1.CallParseContext.Response
	(*CallPing_Request)(nil),                           // 41: gitpod.v1.CallPing.Request
	(*CallPing_Response)(nil),                          // 42: gitpod.v1.CallPing.Response
	(*CallCheckAuthenticationForHost_Request)(nil),     // 43: gitpod.v1.CallCheckAuthenticationForHost.Request
	(*CallCheckAuthenticationForHost_Response)(nil),    // 44: gitpod.v1.CallCheckAuthenticationForHost.Response
	(*CallValidateConfig_Request)(nil),                 // 45: gitpod.v1.CallValidateConfig.Request
	(*CallValidateConfig_Response)(nil),                // 46: gitpod.v1.CallValidateConfig.Response
	(*EnvironmentClass)(nil),                           // 47: gitpod.v1.EnvironmentClass
	(*PaginationRequest)(nil),                          // 48: gitpod.v1.PaginationRequest
	(*EnvironmentMetadata)(nil),                        // 49: gitpod.v1.EnvironmentMetadata
	(*EnvironmentSpec)(nil),                            // 50: gitpod.v1.EnvironmentSpec
	(*EnvironmentActivitySignal)(nil),                  // 51: gitpod.v1.EnvironmentActivitySignal
	(*PaginationResponse)(nil),                         // 52: gitpod.v1.PaginationResponse
	(*EnvironmentStatus)(nil),                          // 53: gitpod.v1.EnvironmentStatus
	(*FieldValueUpdate)(nil),                           // 54: gitpod.v1.FieldValueUpdate
	(RunnerCapability)(0),                              // 55: gitpod.v1.RunnerCapability
	(*RunnerConfigurationSchema)(nil),                  // 56: gitpod.v1.RunnerConfigurationSchema
	(*timestamppb.Timestamp)(nil),                      // 57: google.protobuf.Timestamp
	(*SCMIntegration)(nil),                             // 58: gitpod.v1.SCMIntegration
	(*anypb.Any)(nil),                                  // 59: google.protobuf.Any
	(*ParseContextURLResponse)(nil),                    // 60: gitpod.v1.ParseContextURLResponse
	(*CheckAuthenticationForHostResponse)(nil),         // 61: gitpod.v1.CheckAuthenticationForHostResponse
	(*EnvironmentClassValidationResult)(nil),           // 62: gitpod.v1.EnvironmentClassValidationResult
	(*SCMIntegrationValidationResult)(nil),             // 63: gitpod.v1.SCMIntegrationValidationResult
}
var file_gitpod_v1_runner_interaction_proto_depIdxs = []int32{
	47, // 0: gitpod.v1.SignupRequest.environment_classes:type_name -> gitpod.v1.EnvironmentClass
	48, // 1: gitpod.v1.ListRunnerEnvironmentsRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	49, // 2: gitpod.v1.RunnerEnvironment.metadata:type_name -> gitpod.v1.EnvironmentMetadata
	50, // 3: gitpod.v1.RunnerEnvironment.spec:type_name -> gitpod.v1.EnvironmentSpec
	51, // 4: gitpod.v1.RunnerEnvironment.activity_signal:type_name -> gitpod.v1.EnvironmentActivitySignal
	52, // 5: gitpod.v1.ListRunnerEnvironmentsResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	6,  // 6: gitpod.v1.ListRunnerEnvironmentsResponse.environments:type_name -> gitpod.v1.RunnerEnvironment
	6,  // 7: gitpod.v1.GetRunnerEnvironmentResponse.environment:type_name -> gitpod.v1.RunnerEnvironment
	53, // 8: gitpod.v1.UpdateRunnerEnvironmentStatusRequest.status:type_name -> gitpod.v1.EnvironmentStatus
	54, // 9: gitpod.v1.UpdateRunnerStatusRequest.additional_info:type_name -> gitpod.v1.FieldValueUpdate
	55, // 10: gitpod.v1.UpdateRunnerStatusRequest.capabilities:type_name -> gitpod.v1.RunnerCapability
	56, // 11: gitpod.v1.UpdateRunnerConfigurationSchemaRequest.config_schema:type_name -> gitpod.v1.RunnerConfigurationSchema
	57, // 12: gitpod.v1.GetHostAuthenticationTokenValueResponse.expires_at:type_name -> google.protobuf.Timestamp
	48, // 13: gitpod.v1.ListRunnerEnvironmentClassesRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	36, // 14: gitpod.v1.ListRunnerEnvironmentClassesRequest.filter:type_name -> gitpod.v1.ListRunnerEnvironmentClassesRequest.Filter
	52, // 15: gitpod.v1.ListRunnerEnvironmentClassesResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	47, // 16: gitpod.v1.ListRunnerEnvironmentClassesResponse.environment_classes:type_name -> gitpod.v1.EnvironmentClass
	48, // 17: gitpod.v1.ListRunnerSCMIntegrationsRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	37, // 18: gitpod.v1.ListRunnerSCMIntegrationsRequest.filter:type_name -> gitpod.v1.ListRunnerSCMIntegrationsRequest.Filter
	52, // 19: gitpod.v1.ListRunnerSCMIntegrationsResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	58, // 20: gitpod.v1.ListRunnerSCMIntegrationsResponse.scm_integrations:type_name -> gitpod.v1.SCMIntegration
	26, // 21: gitpod.v1.WatchRequestsResponse.event_environment_spec_change:type_name -> gitpod.v1.EventEnvironmentSpecChange
	27, // 22: gitpod.v1.WatchRequestsResponse.event_environment_marked_active:type_name -> gitpod.v1.EventEnvironmentMarkedActive
	28, // 23: gitpod.v1.WatchRequestsResponse.event_scm_integration_change:type_name -> gitpod.v1.EventSCMIntegrationChange
	29, // 24: gitpod.v1.WatchRequestsResponse.event_host_authentication_token_deleted:type_name -> gitpod.v1.EventHostAuthenticationTokenDeleted
	39, // 25: gitpod.v1.WatchRequestsResponse.call_parse_context:type_name -> gitpod.v1.CallParseContext.Request
	41, // 26: gitpod.v1.WatchRequestsResponse.call_ping:type_name -> gitpod.v1.CallPing.Request
	43, // 27: gitpod.v1.WatchRequestsResponse.call_check_authentication_for_host:type_name -> gitpod.v1.CallCheckAuthenticationForHost.Request
	45, // 28: gitpod.v1.WatchRequestsResponse.call_validate_config:type_name -> gitpod.v1.CallValidateConfig.Request
	38, // 29: gitpod.v1.SendResponseRequest.error:type_name -> gitpod.v1.SendResponseRequest.CallError
	40, // 30: gitpod.v1.SendResponseRequest.call_parse_context:type_name -> gitpod.v1.CallParseContext.Response
	42, // 31: gitpod.v1.SendResponseRequest.call_ping:type_name -> gitpod.v1.CallPing.Response
	44, // 32: gitpod.v1.SendResponseRequest.call_check_authentication_for_host:type_name -> gitpod.v1.CallCheckAuthenticationForHost.Response
	46, // 33: gitpod.v1.SendResponseRequest.call_validate_config:type_name -> gitpod.v1.CallValidateConfig.Response
	0,  // 34: gitpod.v1.SendResponseRequest.CallError.code:type_name -> gitpod.v1.SendResponseRequest.ErrorCode
	59, // 35: gitpod.v1.SendResponseRequest.CallError.details:type_name -> google.protobuf.Any
	60, // 36: gitpod.v1.CallParseContext.Response.resp:type_name -> gitpod.v1.ParseContextURLResponse
	61, // 37: gitpod.v1.CallCheckAuthenticationForHost.Response.resp:type_name -> gitpod.v1.CheckAuthenticationForHostResponse
	47, // 38: gitpod.v1.CallValidateConfig.Request.environment_class:type_name -> gitpod.v1.EnvironmentClass
	58, // 39: gitpod.v1.CallValidateConfig.Request.scm:type_name -> gitpod.v1.SCMIntegration
	62, // 40: gitpod.v1.CallValidateConfig.Response.environment_class:type_name -> gitpod.v1.EnvironmentClassValidationResult
	63, // 41: gitpod.v1.CallValidateConfig.Response.scm:type_name -> gitpod.v1.SCMIntegrationValidationResult
	1,  // 42: gitpod.v1.RunnerInteractionService.Signup:input_type -> gitpod.v1.SignupRequest
	3,  // 43: gitpod.v1.RunnerInteractionService.MarkRunnerActive:input_type -> gitpod.v1.MarkRunnerActiveRequest
	8,  // 44: gitpod.v1.RunnerInteractionService.GetRunnerEnvironment:input_type -> gitpod.v1.GetRunnerEnvironmentRequest
	5,  // 45: gitpod.v1.RunnerInteractionService.ListRunnerEnvironments:input_type -> gitpod.v1.ListRunnerEnvironmentsRequest
	10, // 46: gitpod.v1.RunnerInteractionService.UpdateRunnerEnvironmentStatus:input_type -> gitpod.v1.UpdateRunnerEnvironmentStatusRequest
	12, // 47: gitpod.v1.RunnerInteractionService.UpdateRunnerStatus:input_type -> gitpod.v1.UpdateRunnerStatusRequest
	14, // 48: gitpod.v1.RunnerInteractionService.UpdateRunnerConfigurationSchema:input_type -> gitpod.v1.UpdateRunnerConfigurationSchemaRequest
	16, // 49: gitpod.v1.RunnerInteractionService.GetHostAuthenticationTokenValue:input_type -> gitpod.v1.GetHostAuthenticationTokenValueRequest
	18, // 50: gitpod.v1.RunnerInteractionService.ListRunnerEnvironmentClasses:input_type -> gitpod.v1.ListRunnerEnvironmentClassesRequest
	20, // 51: gitpod.v1.RunnerInteractionService.ListRunnerSCMIntegrations:input_type -> gitpod.v1.ListRunnerSCMIntegrationsRequest
	22, // 52: gitpod.v1.RunnerInteractionService.WatchRequests:input_type -> gitpod.v1.WatchRequestsRequest
	24, // 53: gitpod.v1.RunnerInteractionService.SendResponse:input_type -> gitpod.v1.SendResponseRequest
	34, // 54: gitpod.v1.RunnerInteractionService.GetLatestVersion:input_type -> gitpod.v1.GetLatestVersionRequest
	2,  // 55: gitpod.v1.RunnerInteractionService.Signup:output_type -> gitpod.v1.SignupResponse
	4,  // 56: gitpod.v1.RunnerInteractionService.MarkRunnerActive:output_type -> gitpod.v1.MarkRunnerActiveResponse
	9,  // 57: gitpod.v1.RunnerInteractionService.GetRunnerEnvironment:output_type -> gitpod.v1.GetRunnerEnvironmentResponse
	7,  // 58: gitpod.v1.RunnerInteractionService.ListRunnerEnvironments:output_type -> gitpod.v1.ListRunnerEnvironmentsResponse
	11, // 59: gitpod.v1.RunnerInteractionService.UpdateRunnerEnvironmentStatus:output_type -> gitpod.v1.UpdateRunnerEnvironmentStatusResponse
	13, // 60: gitpod.v1.RunnerInteractionService.UpdateRunnerStatus:output_type -> gitpod.v1.UpdateRunnerStatusResponse
	15, // 61: gitpod.v1.RunnerInteractionService.UpdateRunnerConfigurationSchema:output_type -> gitpod.v1.UpdateRunnerConfigurationSchemaResponse
	17, // 62: gitpod.v1.RunnerInteractionService.GetHostAuthenticationTokenValue:output_type -> gitpod.v1.GetHostAuthenticationTokenValueResponse
	19, // 63: gitpod.v1.RunnerInteractionService.ListRunnerEnvironmentClasses:output_type -> gitpod.v1.ListRunnerEnvironmentClassesResponse
	21, // 64: gitpod.v1.RunnerInteractionService.ListRunnerSCMIntegrations:output_type -> gitpod.v1.ListRunnerSCMIntegrationsResponse
	23, // 65: gitpod.v1.RunnerInteractionService.WatchRequests:output_type -> gitpod.v1.WatchRequestsResponse
	25, // 66: gitpod.v1.RunnerInteractionService.SendResponse:output_type -> gitpod.v1.SendResponseResponse
	35, // 67: gitpod.v1.RunnerInteractionService.GetLatestVersion:output_type -> gitpod.v1.GetLatestVersionResponse
	55, // [55:68] is the sub-list for method output_type
	42, // [42:55] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_gitpod_v1_runner_interaction_proto_init() }
func file_gitpod_v1_runner_interaction_proto_init() {
	if File_gitpod_v1_runner_interaction_proto != nil {
		return
	}
	file_gitpod_v1_environment_proto_init()
	file_gitpod_v1_pagination_proto_init()
	file_gitpod_v1_runner_proto_init()
	file_gitpod_v1_runner_configuration_proto_init()
	file_gitpod_v1_runner_interaction_proto_msgTypes[11].OneofWrappers = []any{}
	file_gitpod_v1_runner_interaction_proto_msgTypes[22].OneofWrappers = []any{
		(*WatchRequestsResponse_EventEnvironmentSpecChange)(nil),
		(*WatchRequestsResponse_EventEnvironmentMarkedActive)(nil),
		(*WatchRequestsResponse_EventScmIntegrationChange)(nil),
		(*WatchRequestsResponse_EventHostAuthenticationTokenDeleted)(nil),
		(*WatchRequestsResponse_CallParseContext)(nil),
		(*WatchRequestsResponse_CallPing)(nil),
		(*WatchRequestsResponse_CallCheckAuthenticationForHost)(nil),
		(*WatchRequestsResponse_CallValidateConfig)(nil),
	}
	file_gitpod_v1_runner_interaction_proto_msgTypes[23].OneofWrappers = []any{
		(*SendResponseRequest_Error)(nil),
		(*SendResponseRequest_CallParseContext)(nil),
		(*SendResponseRequest_CallPing)(nil),
		(*SendResponseRequest_CallCheckAuthenticationForHost)(nil),
		(*SendResponseRequest_CallValidateConfig)(nil),
	}
	file_gitpod_v1_runner_interaction_proto_msgTypes[44].OneofWrappers = []any{
		(*CallValidateConfig_Request_EnvironmentClass)(nil),
		(*CallValidateConfig_Request_Scm)(nil),
	}
	file_gitpod_v1_runner_interaction_proto_msgTypes[45].OneofWrappers = []any{
		(*CallValidateConfig_Response_EnvironmentClass)(nil),
		(*CallValidateConfig_Response_Scm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitpod_v1_runner_interaction_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitpod_v1_runner_interaction_proto_goTypes,
		DependencyIndexes: file_gitpod_v1_runner_interaction_proto_depIdxs,
		EnumInfos:         file_gitpod_v1_runner_interaction_proto_enumTypes,
		MessageInfos:      file_gitpod_v1_runner_interaction_proto_msgTypes,
	}.Build()
	File_gitpod_v1_runner_interaction_proto = out.File
	file_gitpod_v1_runner_interaction_proto_rawDesc = nil
	file_gitpod_v1_runner_interaction_proto_goTypes = nil
	file_gitpod_v1_runner_interaction_proto_depIdxs = nil
}
