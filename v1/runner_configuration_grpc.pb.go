// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gitpod/v1/runner_configuration.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RunnerConfigurationService_CreateHostAuthenticationToken_FullMethodName = "/gitpod.v1.RunnerConfigurationService/CreateHostAuthenticationToken"
	RunnerConfigurationService_GetHostAuthenticationToken_FullMethodName    = "/gitpod.v1.RunnerConfigurationService/GetHostAuthenticationToken"
	RunnerConfigurationService_ListHostAuthenticationTokens_FullMethodName  = "/gitpod.v1.RunnerConfigurationService/ListHostAuthenticationTokens"
	RunnerConfigurationService_UpdateHostAuthenticationToken_FullMethodName = "/gitpod.v1.RunnerConfigurationService/UpdateHostAuthenticationToken"
	RunnerConfigurationService_DeleteHostAuthenticationToken_FullMethodName = "/gitpod.v1.RunnerConfigurationService/DeleteHostAuthenticationToken"
	RunnerConfigurationService_GetRunnerConfigurationSchema_FullMethodName  = "/gitpod.v1.RunnerConfigurationService/GetRunnerConfigurationSchema"
	RunnerConfigurationService_CreateSCMIntegration_FullMethodName          = "/gitpod.v1.RunnerConfigurationService/CreateSCMIntegration"
	RunnerConfigurationService_GetSCMIntegration_FullMethodName             = "/gitpod.v1.RunnerConfigurationService/GetSCMIntegration"
	RunnerConfigurationService_ListSCMIntegrations_FullMethodName           = "/gitpod.v1.RunnerConfigurationService/ListSCMIntegrations"
	RunnerConfigurationService_UpdateSCMIntegration_FullMethodName          = "/gitpod.v1.RunnerConfigurationService/UpdateSCMIntegration"
	RunnerConfigurationService_DeleteSCMIntegration_FullMethodName          = "/gitpod.v1.RunnerConfigurationService/DeleteSCMIntegration"
	RunnerConfigurationService_CreateEnvironmentClass_FullMethodName        = "/gitpod.v1.RunnerConfigurationService/CreateEnvironmentClass"
	RunnerConfigurationService_GetEnvironmentClass_FullMethodName           = "/gitpod.v1.RunnerConfigurationService/GetEnvironmentClass"
	RunnerConfigurationService_ListEnvironmentClasses_FullMethodName        = "/gitpod.v1.RunnerConfigurationService/ListEnvironmentClasses"
	RunnerConfigurationService_UpdateEnvironmentClass_FullMethodName        = "/gitpod.v1.RunnerConfigurationService/UpdateEnvironmentClass"
	RunnerConfigurationService_ValidateRunnerConfiguration_FullMethodName   = "/gitpod.v1.RunnerConfigurationService/ValidateRunnerConfiguration"
)

// RunnerConfigurationServiceClient is the client API for RunnerConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerConfigurationServiceClient interface {
	CreateHostAuthenticationToken(ctx context.Context, in *CreateHostAuthenticationTokenRequest, opts ...grpc.CallOption) (*CreateHostAuthenticationTokenResponse, error)
	GetHostAuthenticationToken(ctx context.Context, in *GetHostAuthenticationTokenRequest, opts ...grpc.CallOption) (*GetHostAuthenticationTokenResponse, error)
	ListHostAuthenticationTokens(ctx context.Context, in *ListHostAuthenticationTokensRequest, opts ...grpc.CallOption) (*ListHostAuthenticationTokensResponse, error)
	UpdateHostAuthenticationToken(ctx context.Context, in *UpdateHostAuthenticationTokenRequest, opts ...grpc.CallOption) (*UpdateHostAuthenticationTokenResponse, error)
	DeleteHostAuthenticationToken(ctx context.Context, in *DeleteHostAuthenticationTokenRequest, opts ...grpc.CallOption) (*DeleteHostAuthenticationTokenResponse, error)
	// GetRunnerConfigurationSchema retrieves the latest Runner configuration schema
	GetRunnerConfigurationSchema(ctx context.Context, in *GetRunnerConfigurationSchemaRequest, opts ...grpc.CallOption) (*GetRunnerConfigurationSchemaResponse, error)
	// CreateSCMIntegration creates a new SCM integration on a runner.
	CreateSCMIntegration(ctx context.Context, in *CreateSCMIntegrationRequest, opts ...grpc.CallOption) (*CreateSCMIntegrationResponse, error)
	// GetSCMIntegration returns a single SCM integration configured for a runner.
	GetSCMIntegration(ctx context.Context, in *GetSCMIntegrationRequest, opts ...grpc.CallOption) (*GetSCMIntegrationResponse, error)
	// ListSCMIntegrations returns all SCM integrations configured for a runner.
	ListSCMIntegrations(ctx context.Context, in *ListSCMIntegrationsRequest, opts ...grpc.CallOption) (*ListSCMIntegrationsResponse, error)
	// UpdateSCMIntegration updates an existing SCM integration on a runner.
	UpdateSCMIntegration(ctx context.Context, in *UpdateSCMIntegrationRequest, opts ...grpc.CallOption) (*UpdateSCMIntegrationResponse, error)
	// DeleteSCMIntegration deletes an existing SCM integration on a runner.
	DeleteSCMIntegration(ctx context.Context, in *DeleteSCMIntegrationRequest, opts ...grpc.CallOption) (*DeleteSCMIntegrationResponse, error)
	// CreateEnvironmentClass creates a new environment class on a runner.
	CreateEnvironmentClass(ctx context.Context, in *CreateEnvironmentClassRequest, opts ...grpc.CallOption) (*CreateEnvironmentClassResponse, error)
	// GetEnvironmentClass returns a single environment class configured for a runner.
	GetEnvironmentClass(ctx context.Context, in *GetEnvironmentClassRequest, opts ...grpc.CallOption) (*GetEnvironmentClassResponse, error)
	// ListEnvironmentClasses returns all environment classes configured for a runner.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ListEnvironmentClasses(ctx context.Context, in *ListEnvironmentClassesRequest, opts ...grpc.CallOption) (*ListEnvironmentClassesResponse, error)
	// UpdateEnvironmentClass updates an existing environment class on a runner.
	UpdateEnvironmentClass(ctx context.Context, in *UpdateEnvironmentClassRequest, opts ...grpc.CallOption) (*UpdateEnvironmentClassResponse, error)
	// ValidateRunnerConfiguration validates a runner configuration (e.g. environment class, SCM integration)
	// with the runner.
	ValidateRunnerConfiguration(ctx context.Context, in *ValidateRunnerConfigurationRequest, opts ...grpc.CallOption) (*ValidateRunnerConfigurationResponse, error)
}

type runnerConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerConfigurationServiceClient(cc grpc.ClientConnInterface) RunnerConfigurationServiceClient {
	return &runnerConfigurationServiceClient{cc}
}

func (c *runnerConfigurationServiceClient) CreateHostAuthenticationToken(ctx context.Context, in *CreateHostAuthenticationTokenRequest, opts ...grpc.CallOption) (*CreateHostAuthenticationTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHostAuthenticationTokenResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_CreateHostAuthenticationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) GetHostAuthenticationToken(ctx context.Context, in *GetHostAuthenticationTokenRequest, opts ...grpc.CallOption) (*GetHostAuthenticationTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHostAuthenticationTokenResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_GetHostAuthenticationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) ListHostAuthenticationTokens(ctx context.Context, in *ListHostAuthenticationTokensRequest, opts ...grpc.CallOption) (*ListHostAuthenticationTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHostAuthenticationTokensResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_ListHostAuthenticationTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) UpdateHostAuthenticationToken(ctx context.Context, in *UpdateHostAuthenticationTokenRequest, opts ...grpc.CallOption) (*UpdateHostAuthenticationTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHostAuthenticationTokenResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_UpdateHostAuthenticationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) DeleteHostAuthenticationToken(ctx context.Context, in *DeleteHostAuthenticationTokenRequest, opts ...grpc.CallOption) (*DeleteHostAuthenticationTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHostAuthenticationTokenResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_DeleteHostAuthenticationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) GetRunnerConfigurationSchema(ctx context.Context, in *GetRunnerConfigurationSchemaRequest, opts ...grpc.CallOption) (*GetRunnerConfigurationSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRunnerConfigurationSchemaResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_GetRunnerConfigurationSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) CreateSCMIntegration(ctx context.Context, in *CreateSCMIntegrationRequest, opts ...grpc.CallOption) (*CreateSCMIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSCMIntegrationResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_CreateSCMIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) GetSCMIntegration(ctx context.Context, in *GetSCMIntegrationRequest, opts ...grpc.CallOption) (*GetSCMIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSCMIntegrationResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_GetSCMIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) ListSCMIntegrations(ctx context.Context, in *ListSCMIntegrationsRequest, opts ...grpc.CallOption) (*ListSCMIntegrationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSCMIntegrationsResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_ListSCMIntegrations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) UpdateSCMIntegration(ctx context.Context, in *UpdateSCMIntegrationRequest, opts ...grpc.CallOption) (*UpdateSCMIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSCMIntegrationResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_UpdateSCMIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) DeleteSCMIntegration(ctx context.Context, in *DeleteSCMIntegrationRequest, opts ...grpc.CallOption) (*DeleteSCMIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSCMIntegrationResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_DeleteSCMIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) CreateEnvironmentClass(ctx context.Context, in *CreateEnvironmentClassRequest, opts ...grpc.CallOption) (*CreateEnvironmentClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnvironmentClassResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_CreateEnvironmentClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) GetEnvironmentClass(ctx context.Context, in *GetEnvironmentClassRequest, opts ...grpc.CallOption) (*GetEnvironmentClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnvironmentClassResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_GetEnvironmentClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) ListEnvironmentClasses(ctx context.Context, in *ListEnvironmentClassesRequest, opts ...grpc.CallOption) (*ListEnvironmentClassesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnvironmentClassesResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_ListEnvironmentClasses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) UpdateEnvironmentClass(ctx context.Context, in *UpdateEnvironmentClassRequest, opts ...grpc.CallOption) (*UpdateEnvironmentClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEnvironmentClassResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_UpdateEnvironmentClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerConfigurationServiceClient) ValidateRunnerConfiguration(ctx context.Context, in *ValidateRunnerConfigurationRequest, opts ...grpc.CallOption) (*ValidateRunnerConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateRunnerConfigurationResponse)
	err := c.cc.Invoke(ctx, RunnerConfigurationService_ValidateRunnerConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerConfigurationServiceServer is the server API for RunnerConfigurationService service.
// All implementations must embed UnimplementedRunnerConfigurationServiceServer
// for forward compatibility.
type RunnerConfigurationServiceServer interface {
	CreateHostAuthenticationToken(context.Context, *CreateHostAuthenticationTokenRequest) (*CreateHostAuthenticationTokenResponse, error)
	GetHostAuthenticationToken(context.Context, *GetHostAuthenticationTokenRequest) (*GetHostAuthenticationTokenResponse, error)
	ListHostAuthenticationTokens(context.Context, *ListHostAuthenticationTokensRequest) (*ListHostAuthenticationTokensResponse, error)
	UpdateHostAuthenticationToken(context.Context, *UpdateHostAuthenticationTokenRequest) (*UpdateHostAuthenticationTokenResponse, error)
	DeleteHostAuthenticationToken(context.Context, *DeleteHostAuthenticationTokenRequest) (*DeleteHostAuthenticationTokenResponse, error)
	// GetRunnerConfigurationSchema retrieves the latest Runner configuration schema
	GetRunnerConfigurationSchema(context.Context, *GetRunnerConfigurationSchemaRequest) (*GetRunnerConfigurationSchemaResponse, error)
	// CreateSCMIntegration creates a new SCM integration on a runner.
	CreateSCMIntegration(context.Context, *CreateSCMIntegrationRequest) (*CreateSCMIntegrationResponse, error)
	// GetSCMIntegration returns a single SCM integration configured for a runner.
	GetSCMIntegration(context.Context, *GetSCMIntegrationRequest) (*GetSCMIntegrationResponse, error)
	// ListSCMIntegrations returns all SCM integrations configured for a runner.
	ListSCMIntegrations(context.Context, *ListSCMIntegrationsRequest) (*ListSCMIntegrationsResponse, error)
	// UpdateSCMIntegration updates an existing SCM integration on a runner.
	UpdateSCMIntegration(context.Context, *UpdateSCMIntegrationRequest) (*UpdateSCMIntegrationResponse, error)
	// DeleteSCMIntegration deletes an existing SCM integration on a runner.
	DeleteSCMIntegration(context.Context, *DeleteSCMIntegrationRequest) (*DeleteSCMIntegrationResponse, error)
	// CreateEnvironmentClass creates a new environment class on a runner.
	CreateEnvironmentClass(context.Context, *CreateEnvironmentClassRequest) (*CreateEnvironmentClassResponse, error)
	// GetEnvironmentClass returns a single environment class configured for a runner.
	GetEnvironmentClass(context.Context, *GetEnvironmentClassRequest) (*GetEnvironmentClassResponse, error)
	// ListEnvironmentClasses returns all environment classes configured for a runner.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ListEnvironmentClasses(context.Context, *ListEnvironmentClassesRequest) (*ListEnvironmentClassesResponse, error)
	// UpdateEnvironmentClass updates an existing environment class on a runner.
	UpdateEnvironmentClass(context.Context, *UpdateEnvironmentClassRequest) (*UpdateEnvironmentClassResponse, error)
	// ValidateRunnerConfiguration validates a runner configuration (e.g. environment class, SCM integration)
	// with the runner.
	ValidateRunnerConfiguration(context.Context, *ValidateRunnerConfigurationRequest) (*ValidateRunnerConfigurationResponse, error)
	mustEmbedUnimplementedRunnerConfigurationServiceServer()
}

// UnimplementedRunnerConfigurationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRunnerConfigurationServiceServer struct{}

func (UnimplementedRunnerConfigurationServiceServer) CreateHostAuthenticationToken(context.Context, *CreateHostAuthenticationTokenRequest) (*CreateHostAuthenticationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostAuthenticationToken not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) GetHostAuthenticationToken(context.Context, *GetHostAuthenticationTokenRequest) (*GetHostAuthenticationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostAuthenticationToken not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) ListHostAuthenticationTokens(context.Context, *ListHostAuthenticationTokensRequest) (*ListHostAuthenticationTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostAuthenticationTokens not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) UpdateHostAuthenticationToken(context.Context, *UpdateHostAuthenticationTokenRequest) (*UpdateHostAuthenticationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostAuthenticationToken not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) DeleteHostAuthenticationToken(context.Context, *DeleteHostAuthenticationTokenRequest) (*DeleteHostAuthenticationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostAuthenticationToken not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) GetRunnerConfigurationSchema(context.Context, *GetRunnerConfigurationSchemaRequest) (*GetRunnerConfigurationSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunnerConfigurationSchema not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) CreateSCMIntegration(context.Context, *CreateSCMIntegrationRequest) (*CreateSCMIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSCMIntegration not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) GetSCMIntegration(context.Context, *GetSCMIntegrationRequest) (*GetSCMIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSCMIntegration not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) ListSCMIntegrations(context.Context, *ListSCMIntegrationsRequest) (*ListSCMIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSCMIntegrations not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) UpdateSCMIntegration(context.Context, *UpdateSCMIntegrationRequest) (*UpdateSCMIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSCMIntegration not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) DeleteSCMIntegration(context.Context, *DeleteSCMIntegrationRequest) (*DeleteSCMIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSCMIntegration not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) CreateEnvironmentClass(context.Context, *CreateEnvironmentClassRequest) (*CreateEnvironmentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironmentClass not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) GetEnvironmentClass(context.Context, *GetEnvironmentClassRequest) (*GetEnvironmentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironmentClass not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) ListEnvironmentClasses(context.Context, *ListEnvironmentClassesRequest) (*ListEnvironmentClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnvironmentClasses not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) UpdateEnvironmentClass(context.Context, *UpdateEnvironmentClassRequest) (*UpdateEnvironmentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironmentClass not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) ValidateRunnerConfiguration(context.Context, *ValidateRunnerConfigurationRequest) (*ValidateRunnerConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRunnerConfiguration not implemented")
}
func (UnimplementedRunnerConfigurationServiceServer) mustEmbedUnimplementedRunnerConfigurationServiceServer() {
}
func (UnimplementedRunnerConfigurationServiceServer) testEmbeddedByValue() {}

// UnsafeRunnerConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerConfigurationServiceServer will
// result in compilation errors.
type UnsafeRunnerConfigurationServiceServer interface {
	mustEmbedUnimplementedRunnerConfigurationServiceServer()
}

func RegisterRunnerConfigurationServiceServer(s grpc.ServiceRegistrar, srv RunnerConfigurationServiceServer) {
	// If the following call pancis, it indicates UnimplementedRunnerConfigurationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RunnerConfigurationService_ServiceDesc, srv)
}

func _RunnerConfigurationService_CreateHostAuthenticationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostAuthenticationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).CreateHostAuthenticationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_CreateHostAuthenticationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).CreateHostAuthenticationToken(ctx, req.(*CreateHostAuthenticationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_GetHostAuthenticationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostAuthenticationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).GetHostAuthenticationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_GetHostAuthenticationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).GetHostAuthenticationToken(ctx, req.(*GetHostAuthenticationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_ListHostAuthenticationTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostAuthenticationTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).ListHostAuthenticationTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_ListHostAuthenticationTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).ListHostAuthenticationTokens(ctx, req.(*ListHostAuthenticationTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_UpdateHostAuthenticationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostAuthenticationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).UpdateHostAuthenticationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_UpdateHostAuthenticationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).UpdateHostAuthenticationToken(ctx, req.(*UpdateHostAuthenticationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_DeleteHostAuthenticationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostAuthenticationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).DeleteHostAuthenticationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_DeleteHostAuthenticationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).DeleteHostAuthenticationToken(ctx, req.(*DeleteHostAuthenticationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_GetRunnerConfigurationSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerConfigurationSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).GetRunnerConfigurationSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_GetRunnerConfigurationSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).GetRunnerConfigurationSchema(ctx, req.(*GetRunnerConfigurationSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_CreateSCMIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSCMIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).CreateSCMIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_CreateSCMIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).CreateSCMIntegration(ctx, req.(*CreateSCMIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_GetSCMIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSCMIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).GetSCMIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_GetSCMIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).GetSCMIntegration(ctx, req.(*GetSCMIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_ListSCMIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSCMIntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).ListSCMIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_ListSCMIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).ListSCMIntegrations(ctx, req.(*ListSCMIntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_UpdateSCMIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSCMIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).UpdateSCMIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_UpdateSCMIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).UpdateSCMIntegration(ctx, req.(*UpdateSCMIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_DeleteSCMIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSCMIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).DeleteSCMIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_DeleteSCMIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).DeleteSCMIntegration(ctx, req.(*DeleteSCMIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_CreateEnvironmentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).CreateEnvironmentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_CreateEnvironmentClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).CreateEnvironmentClass(ctx, req.(*CreateEnvironmentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_GetEnvironmentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).GetEnvironmentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_GetEnvironmentClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).GetEnvironmentClass(ctx, req.(*GetEnvironmentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_ListEnvironmentClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvironmentClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).ListEnvironmentClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_ListEnvironmentClasses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).ListEnvironmentClasses(ctx, req.(*ListEnvironmentClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_UpdateEnvironmentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).UpdateEnvironmentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_UpdateEnvironmentClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).UpdateEnvironmentClass(ctx, req.(*UpdateEnvironmentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerConfigurationService_ValidateRunnerConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRunnerConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerConfigurationServiceServer).ValidateRunnerConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerConfigurationService_ValidateRunnerConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerConfigurationServiceServer).ValidateRunnerConfiguration(ctx, req.(*ValidateRunnerConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunnerConfigurationService_ServiceDesc is the grpc.ServiceDesc for RunnerConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitpod.v1.RunnerConfigurationService",
	HandlerType: (*RunnerConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHostAuthenticationToken",
			Handler:    _RunnerConfigurationService_CreateHostAuthenticationToken_Handler,
		},
		{
			MethodName: "GetHostAuthenticationToken",
			Handler:    _RunnerConfigurationService_GetHostAuthenticationToken_Handler,
		},
		{
			MethodName: "ListHostAuthenticationTokens",
			Handler:    _RunnerConfigurationService_ListHostAuthenticationTokens_Handler,
		},
		{
			MethodName: "UpdateHostAuthenticationToken",
			Handler:    _RunnerConfigurationService_UpdateHostAuthenticationToken_Handler,
		},
		{
			MethodName: "DeleteHostAuthenticationToken",
			Handler:    _RunnerConfigurationService_DeleteHostAuthenticationToken_Handler,
		},
		{
			MethodName: "GetRunnerConfigurationSchema",
			Handler:    _RunnerConfigurationService_GetRunnerConfigurationSchema_Handler,
		},
		{
			MethodName: "CreateSCMIntegration",
			Handler:    _RunnerConfigurationService_CreateSCMIntegration_Handler,
		},
		{
			MethodName: "GetSCMIntegration",
			Handler:    _RunnerConfigurationService_GetSCMIntegration_Handler,
		},
		{
			MethodName: "ListSCMIntegrations",
			Handler:    _RunnerConfigurationService_ListSCMIntegrations_Handler,
		},
		{
			MethodName: "UpdateSCMIntegration",
			Handler:    _RunnerConfigurationService_UpdateSCMIntegration_Handler,
		},
		{
			MethodName: "DeleteSCMIntegration",
			Handler:    _RunnerConfigurationService_DeleteSCMIntegration_Handler,
		},
		{
			MethodName: "CreateEnvironmentClass",
			Handler:    _RunnerConfigurationService_CreateEnvironmentClass_Handler,
		},
		{
			MethodName: "GetEnvironmentClass",
			Handler:    _RunnerConfigurationService_GetEnvironmentClass_Handler,
		},
		{
			MethodName: "ListEnvironmentClasses",
			Handler:    _RunnerConfigurationService_ListEnvironmentClasses_Handler,
		},
		{
			MethodName: "UpdateEnvironmentClass",
			Handler:    _RunnerConfigurationService_UpdateEnvironmentClass_Handler,
		},
		{
			MethodName: "ValidateRunnerConfiguration",
			Handler:    _RunnerConfigurationService_ValidateRunnerConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitpod/v1/runner_configuration.proto",
}
