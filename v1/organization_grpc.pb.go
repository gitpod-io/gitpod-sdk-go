// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gitpod/v1/organization.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrganizationService_CreateOrganization_FullMethodName           = "/gitpod.v1.OrganizationService/CreateOrganization"
	OrganizationService_JoinOrganization_FullMethodName             = "/gitpod.v1.OrganizationService/JoinOrganization"
	OrganizationService_GetOrganization_FullMethodName              = "/gitpod.v1.OrganizationService/GetOrganization"
	OrganizationService_UpdateOrganization_FullMethodName           = "/gitpod.v1.OrganizationService/UpdateOrganization"
	OrganizationService_ListOrganizations_FullMethodName            = "/gitpod.v1.OrganizationService/ListOrganizations"
	OrganizationService_DeleteOrganization_FullMethodName           = "/gitpod.v1.OrganizationService/DeleteOrganization"
	OrganizationService_ListMembers_FullMethodName                  = "/gitpod.v1.OrganizationService/ListMembers"
	OrganizationService_SetRole_FullMethodName                      = "/gitpod.v1.OrganizationService/SetRole"
	OrganizationService_CreateOrganizationInvite_FullMethodName     = "/gitpod.v1.OrganizationService/CreateOrganizationInvite"
	OrganizationService_GetOrganizationInvite_FullMethodName        = "/gitpod.v1.OrganizationService/GetOrganizationInvite"
	OrganizationService_GetOrganizationInviteSummary_FullMethodName = "/gitpod.v1.OrganizationService/GetOrganizationInviteSummary"
	OrganizationService_LeaveOrganization_FullMethodName            = "/gitpod.v1.OrganizationService/LeaveOrganization"
	OrganizationService_CreateSSOConfiguration_FullMethodName       = "/gitpod.v1.OrganizationService/CreateSSOConfiguration"
	OrganizationService_GetSSOConfiguration_FullMethodName          = "/gitpod.v1.OrganizationService/GetSSOConfiguration"
	OrganizationService_ListSSOConfigurations_FullMethodName        = "/gitpod.v1.OrganizationService/ListSSOConfigurations"
	OrganizationService_DeleteSSOConfiguration_FullMethodName       = "/gitpod.v1.OrganizationService/DeleteSSOConfiguration"
	OrganizationService_UpdateSSOConfiguration_FullMethodName       = "/gitpod.v1.OrganizationService/UpdateSSOConfiguration"
)

// OrganizationServiceClient is the client API for OrganizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationServiceClient interface {
	// CreateOrganization creates a new Organization.
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// JoinOrganization lets accounts join an Organization.
	JoinOrganization(ctx context.Context, in *JoinOrganizationRequest, opts ...grpc.CallOption) (*JoinOrganizationResponse, error)
	// GetOrganization retrieves a single Organization.
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// UpdateOrganization updates the properties of an Organization.
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// ListOrganizations lists all organization the caller has access to.
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// DeleteOrganization deletes the specified organization.
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// ListMembers lists all members of the specified organization.
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
	SetRole(ctx context.Context, in *SetRoleRequest, opts ...grpc.CallOption) (*SetRoleResponse, error)
	// CreateOrganizationInvite creates an invite for the organization.
	// Any existing OrganizationInvites are invalidated and can no longer be used.
	CreateOrganizationInvite(ctx context.Context, in *CreateOrganizationInviteRequest, opts ...grpc.CallOption) (*CreateOrganizationInviteResponse, error)
	// GetOrganizationInvite retrieves invite for the organization.
	// If no invite exists, a new one is created.
	GetOrganizationInvite(ctx context.Context, in *GetOrganizationInviteRequest, opts ...grpc.CallOption) (*GetOrganizationInviteResponse, error)
	// GetOrganizationInviteSummary retrieves a summary of the organization based on an Invite ID.
	// Used to discover which organization an invite is for.
	GetOrganizationInviteSummary(ctx context.Context, in *GetOrganizationInviteSummaryRequest, opts ...grpc.CallOption) (*GetOrganizationInviteSummaryResponse, error)
	// LeaveOrganization lets the passed user leave an Organization.
	LeaveOrganization(ctx context.Context, in *LeaveOrganizationRequest, opts ...grpc.CallOption) (*LeaveOrganizationResponse, error)
	// CreateSSOConfiguration creates a new SSO configuration for the organization.
	CreateSSOConfiguration(ctx context.Context, in *CreateSSOConfigurationRequest, opts ...grpc.CallOption) (*CreateSSOConfigurationResponse, error)
	// GetSSOConfiguration returns an SSO configuration.
	GetSSOConfiguration(ctx context.Context, in *GetSSOConfigurationRequest, opts ...grpc.CallOption) (*GetSSOConfigurationResponse, error)
	// ListSSOConfigurations lists all SSO configurations matching provided filters.
	ListSSOConfigurations(ctx context.Context, in *ListSSOConfigurationsRequest, opts ...grpc.CallOption) (*ListSSOConfigurationsResponse, error)
	// DeleteSSOConfiguration deletes an SSO configuration.
	DeleteSSOConfiguration(ctx context.Context, in *DeleteSSOConfigurationRequest, opts ...grpc.CallOption) (*DeleteSSOConfigurationResponse, error)
	// UpdateSSOConfiguration updates the SSO configuration for the organization.
	UpdateSSOConfiguration(ctx context.Context, in *UpdateSSOConfigurationRequest, opts ...grpc.CallOption) (*UpdateSSOConfigurationResponse, error)
}

type organizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationServiceClient(cc grpc.ClientConnInterface) OrganizationServiceClient {
	return &organizationServiceClient{cc}
}

func (c *organizationServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) JoinOrganization(ctx context.Context, in *JoinOrganizationRequest, opts ...grpc.CallOption) (*JoinOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_JoinOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMembersResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) SetRole(ctx context.Context, in *SetRoleRequest, opts ...grpc.CallOption) (*SetRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRoleResponse)
	err := c.cc.Invoke(ctx, OrganizationService_SetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateOrganizationInvite(ctx context.Context, in *CreateOrganizationInviteRequest, opts ...grpc.CallOption) (*CreateOrganizationInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationInviteResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CreateOrganizationInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetOrganizationInvite(ctx context.Context, in *GetOrganizationInviteRequest, opts ...grpc.CallOption) (*GetOrganizationInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationInviteResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetOrganizationInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetOrganizationInviteSummary(ctx context.Context, in *GetOrganizationInviteSummaryRequest, opts ...grpc.CallOption) (*GetOrganizationInviteSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationInviteSummaryResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetOrganizationInviteSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) LeaveOrganization(ctx context.Context, in *LeaveOrganizationRequest, opts ...grpc.CallOption) (*LeaveOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_LeaveOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateSSOConfiguration(ctx context.Context, in *CreateSSOConfigurationRequest, opts ...grpc.CallOption) (*CreateSSOConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSSOConfigurationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_CreateSSOConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetSSOConfiguration(ctx context.Context, in *GetSSOConfigurationRequest, opts ...grpc.CallOption) (*GetSSOConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSSOConfigurationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetSSOConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListSSOConfigurations(ctx context.Context, in *ListSSOConfigurationsRequest, opts ...grpc.CallOption) (*ListSSOConfigurationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSSOConfigurationsResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListSSOConfigurations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeleteSSOConfiguration(ctx context.Context, in *DeleteSSOConfigurationRequest, opts ...grpc.CallOption) (*DeleteSSOConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSSOConfigurationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_DeleteSSOConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateSSOConfiguration(ctx context.Context, in *UpdateSSOConfigurationRequest, opts ...grpc.CallOption) (*UpdateSSOConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSSOConfigurationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateSSOConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServiceServer is the server API for OrganizationService service.
// All implementations must embed UnimplementedOrganizationServiceServer
// for forward compatibility.
type OrganizationServiceServer interface {
	// CreateOrganization creates a new Organization.
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// JoinOrganization lets accounts join an Organization.
	JoinOrganization(context.Context, *JoinOrganizationRequest) (*JoinOrganizationResponse, error)
	// GetOrganization retrieves a single Organization.
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	// UpdateOrganization updates the properties of an Organization.
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// ListOrganizations lists all organization the caller has access to.
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	// DeleteOrganization deletes the specified organization.
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// ListMembers lists all members of the specified organization.
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	SetRole(context.Context, *SetRoleRequest) (*SetRoleResponse, error)
	// CreateOrganizationInvite creates an invite for the organization.
	// Any existing OrganizationInvites are invalidated and can no longer be used.
	CreateOrganizationInvite(context.Context, *CreateOrganizationInviteRequest) (*CreateOrganizationInviteResponse, error)
	// GetOrganizationInvite retrieves invite for the organization.
	// If no invite exists, a new one is created.
	GetOrganizationInvite(context.Context, *GetOrganizationInviteRequest) (*GetOrganizationInviteResponse, error)
	// GetOrganizationInviteSummary retrieves a summary of the organization based on an Invite ID.
	// Used to discover which organization an invite is for.
	GetOrganizationInviteSummary(context.Context, *GetOrganizationInviteSummaryRequest) (*GetOrganizationInviteSummaryResponse, error)
	// LeaveOrganization lets the passed user leave an Organization.
	LeaveOrganization(context.Context, *LeaveOrganizationRequest) (*LeaveOrganizationResponse, error)
	// CreateSSOConfiguration creates a new SSO configuration for the organization.
	CreateSSOConfiguration(context.Context, *CreateSSOConfigurationRequest) (*CreateSSOConfigurationResponse, error)
	// GetSSOConfiguration returns an SSO configuration.
	GetSSOConfiguration(context.Context, *GetSSOConfigurationRequest) (*GetSSOConfigurationResponse, error)
	// ListSSOConfigurations lists all SSO configurations matching provided filters.
	ListSSOConfigurations(context.Context, *ListSSOConfigurationsRequest) (*ListSSOConfigurationsResponse, error)
	// DeleteSSOConfiguration deletes an SSO configuration.
	DeleteSSOConfiguration(context.Context, *DeleteSSOConfigurationRequest) (*DeleteSSOConfigurationResponse, error)
	// UpdateSSOConfiguration updates the SSO configuration for the organization.
	UpdateSSOConfiguration(context.Context, *UpdateSSOConfigurationRequest) (*UpdateSSOConfigurationResponse, error)
	mustEmbedUnimplementedOrganizationServiceServer()
}

// UnimplementedOrganizationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrganizationServiceServer struct{}

func (UnimplementedOrganizationServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) JoinOrganization(context.Context, *JoinOrganizationRequest) (*JoinOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedOrganizationServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedOrganizationServiceServer) SetRole(context.Context, *SetRoleRequest) (*SetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRole not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateOrganizationInvite(context.Context, *CreateOrganizationInviteRequest) (*CreateOrganizationInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationInvite not implemented")
}
func (UnimplementedOrganizationServiceServer) GetOrganizationInvite(context.Context, *GetOrganizationInviteRequest) (*GetOrganizationInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationInvite not implemented")
}
func (UnimplementedOrganizationServiceServer) GetOrganizationInviteSummary(context.Context, *GetOrganizationInviteSummaryRequest) (*GetOrganizationInviteSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationInviteSummary not implemented")
}
func (UnimplementedOrganizationServiceServer) LeaveOrganization(context.Context, *LeaveOrganizationRequest) (*LeaveOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateSSOConfiguration(context.Context, *CreateSSOConfigurationRequest) (*CreateSSOConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSSOConfiguration not implemented")
}
func (UnimplementedOrganizationServiceServer) GetSSOConfiguration(context.Context, *GetSSOConfigurationRequest) (*GetSSOConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSOConfiguration not implemented")
}
func (UnimplementedOrganizationServiceServer) ListSSOConfigurations(context.Context, *ListSSOConfigurationsRequest) (*ListSSOConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSSOConfigurations not implemented")
}
func (UnimplementedOrganizationServiceServer) DeleteSSOConfiguration(context.Context, *DeleteSSOConfigurationRequest) (*DeleteSSOConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSSOConfiguration not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateSSOConfiguration(context.Context, *UpdateSSOConfigurationRequest) (*UpdateSSOConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSSOConfiguration not implemented")
}
func (UnimplementedOrganizationServiceServer) mustEmbedUnimplementedOrganizationServiceServer() {}
func (UnimplementedOrganizationServiceServer) testEmbeddedByValue()                             {}

// UnsafeOrganizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServiceServer will
// result in compilation errors.
type UnsafeOrganizationServiceServer interface {
	mustEmbedUnimplementedOrganizationServiceServer()
}

func RegisterOrganizationServiceServer(s grpc.ServiceRegistrar, srv OrganizationServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrganizationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrganizationService_ServiceDesc, srv)
}

func _OrganizationService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_JoinOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).JoinOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_JoinOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).JoinOrganization(ctx, req.(*JoinOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_SetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).SetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_SetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).SetRole(ctx, req.(*SetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateOrganizationInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateOrganizationInvite(ctx, req.(*CreateOrganizationInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetOrganizationInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetOrganizationInvite(ctx, req.(*GetOrganizationInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetOrganizationInviteSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationInviteSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetOrganizationInviteSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetOrganizationInviteSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetOrganizationInviteSummary(ctx, req.(*GetOrganizationInviteSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_LeaveOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).LeaveOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_LeaveOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).LeaveOrganization(ctx, req.(*LeaveOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateSSOConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSSOConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateSSOConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateSSOConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateSSOConfiguration(ctx, req.(*CreateSSOConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetSSOConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSSOConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetSSOConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetSSOConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetSSOConfiguration(ctx, req.(*GetSSOConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListSSOConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSSOConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListSSOConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListSSOConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListSSOConfigurations(ctx, req.(*ListSSOConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeleteSSOConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSSOConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeleteSSOConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeleteSSOConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeleteSSOConfiguration(ctx, req.(*DeleteSSOConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateSSOConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSSOConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateSSOConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateSSOConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateSSOConfiguration(ctx, req.(*UpdateSSOConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationService_ServiceDesc is the grpc.ServiceDesc for OrganizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitpod.v1.OrganizationService",
	HandlerType: (*OrganizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganization",
			Handler:    _OrganizationService_CreateOrganization_Handler,
		},
		{
			MethodName: "JoinOrganization",
			Handler:    _OrganizationService_JoinOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _OrganizationService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _OrganizationService_UpdateOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _OrganizationService_ListOrganizations_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _OrganizationService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _OrganizationService_ListMembers_Handler,
		},
		{
			MethodName: "SetRole",
			Handler:    _OrganizationService_SetRole_Handler,
		},
		{
			MethodName: "CreateOrganizationInvite",
			Handler:    _OrganizationService_CreateOrganizationInvite_Handler,
		},
		{
			MethodName: "GetOrganizationInvite",
			Handler:    _OrganizationService_GetOrganizationInvite_Handler,
		},
		{
			MethodName: "GetOrganizationInviteSummary",
			Handler:    _OrganizationService_GetOrganizationInviteSummary_Handler,
		},
		{
			MethodName: "LeaveOrganization",
			Handler:    _OrganizationService_LeaveOrganization_Handler,
		},
		{
			MethodName: "CreateSSOConfiguration",
			Handler:    _OrganizationService_CreateSSOConfiguration_Handler,
		},
		{
			MethodName: "GetSSOConfiguration",
			Handler:    _OrganizationService_GetSSOConfiguration_Handler,
		},
		{
			MethodName: "ListSSOConfigurations",
			Handler:    _OrganizationService_ListSSOConfigurations_Handler,
		},
		{
			MethodName: "DeleteSSOConfiguration",
			Handler:    _OrganizationService_DeleteSSOConfiguration_Handler,
		},
		{
			MethodName: "UpdateSSOConfiguration",
			Handler:    _OrganizationService_UpdateSSOConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitpod/v1/organization.proto",
}
