// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: gitpod/v1/environment_automation.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/gitpod-io/flex-sdk-go/tools/logfields"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServicePhase int32

const (
	ServicePhase_SERVICE_PHASE_UNSPECIFIED ServicePhase = 0
	ServicePhase_SERVICE_PHASE_STARTING    ServicePhase = 1
	ServicePhase_SERVICE_PHASE_RUNNING     ServicePhase = 2
	ServicePhase_SERVICE_PHASE_STOPPING    ServicePhase = 3
	ServicePhase_SERVICE_PHASE_STOPPED     ServicePhase = 4
	ServicePhase_SERVICE_PHASE_FAILED      ServicePhase = 5
	ServicePhase_SERVICE_PHASE_DELETED     ServicePhase = 6
)

// Enum value maps for ServicePhase.
var (
	ServicePhase_name = map[int32]string{
		0: "SERVICE_PHASE_UNSPECIFIED",
		1: "SERVICE_PHASE_STARTING",
		2: "SERVICE_PHASE_RUNNING",
		3: "SERVICE_PHASE_STOPPING",
		4: "SERVICE_PHASE_STOPPED",
		5: "SERVICE_PHASE_FAILED",
		6: "SERVICE_PHASE_DELETED",
	}
	ServicePhase_value = map[string]int32{
		"SERVICE_PHASE_UNSPECIFIED": 0,
		"SERVICE_PHASE_STARTING":    1,
		"SERVICE_PHASE_RUNNING":     2,
		"SERVICE_PHASE_STOPPING":    3,
		"SERVICE_PHASE_STOPPED":     4,
		"SERVICE_PHASE_FAILED":      5,
		"SERVICE_PHASE_DELETED":     6,
	}
)

func (x ServicePhase) Enum() *ServicePhase {
	p := new(ServicePhase)
	*p = x
	return p
}

func (x ServicePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_environment_automation_proto_enumTypes[0].Descriptor()
}

func (ServicePhase) Type() protoreflect.EnumType {
	return &file_gitpod_v1_environment_automation_proto_enumTypes[0]
}

func (x ServicePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicePhase.Descriptor instead.
func (ServicePhase) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{0}
}

type TaskExecutionPhase int32

const (
	TaskExecutionPhase_TASK_EXECUTION_PHASE_UNSPECIFIED TaskExecutionPhase = 0
	TaskExecutionPhase_TASK_EXECUTION_PHASE_PENDING     TaskExecutionPhase = 1
	TaskExecutionPhase_TASK_EXECUTION_PHASE_RUNNING     TaskExecutionPhase = 2
	TaskExecutionPhase_TASK_EXECUTION_PHASE_SUCCEEDED   TaskExecutionPhase = 3
	TaskExecutionPhase_TASK_EXECUTION_PHASE_FAILED      TaskExecutionPhase = 4
	TaskExecutionPhase_TASK_EXECUTION_PHASE_STOPPED     TaskExecutionPhase = 5
)

// Enum value maps for TaskExecutionPhase.
var (
	TaskExecutionPhase_name = map[int32]string{
		0: "TASK_EXECUTION_PHASE_UNSPECIFIED",
		1: "TASK_EXECUTION_PHASE_PENDING",
		2: "TASK_EXECUTION_PHASE_RUNNING",
		3: "TASK_EXECUTION_PHASE_SUCCEEDED",
		4: "TASK_EXECUTION_PHASE_FAILED",
		5: "TASK_EXECUTION_PHASE_STOPPED",
	}
	TaskExecutionPhase_value = map[string]int32{
		"TASK_EXECUTION_PHASE_UNSPECIFIED": 0,
		"TASK_EXECUTION_PHASE_PENDING":     1,
		"TASK_EXECUTION_PHASE_RUNNING":     2,
		"TASK_EXECUTION_PHASE_SUCCEEDED":   3,
		"TASK_EXECUTION_PHASE_FAILED":      4,
		"TASK_EXECUTION_PHASE_STOPPED":     5,
	}
)

func (x TaskExecutionPhase) Enum() *TaskExecutionPhase {
	p := new(TaskExecutionPhase)
	*p = x
	return p
}

func (x TaskExecutionPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskExecutionPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_environment_automation_proto_enumTypes[1].Descriptor()
}

func (TaskExecutionPhase) Type() protoreflect.EnumType {
	return &file_gitpod_v1_environment_automation_proto_enumTypes[1]
}

func (x TaskExecutionPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskExecutionPhase.Descriptor instead.
func (TaskExecutionPhase) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{1}
}

type ServiceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reference is a user-facing identifier for the service which must be unique on the environment.
	// It is used to express dependencies between services, and to identify the service in user interactions (e.g. the CLI).
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// name is a user-facing name for the service. Unlike the reference, this field is not unique, and not referenced by the system.
	// This is a short descriptive name for the service.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description is a user-facing description for the service. It can be used to provide context and documentation for the service.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// created_at is the time the service was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// creator describes the principal who created the service.
	Creator *Subject `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	// triggered_by is a list of trigger that start the service.
	TriggeredBy []*AutomationTrigger `protobuf:"bytes,6,rep,name=triggered_by,json=triggeredBy,proto3" json:"triggered_by,omitempty"`
}

func (x *ServiceMetadata) Reset() {
	*x = ServiceMetadata{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMetadata) ProtoMessage() {}

func (x *ServiceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMetadata.ProtoReflect.Descriptor instead.
func (*ServiceMetadata) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceMetadata) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ServiceMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ServiceMetadata) GetCreator() *Subject {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *ServiceMetadata) GetTriggeredBy() []*AutomationTrigger {
	if x != nil {
		return x.TriggeredBy
	}
	return nil
}

type ServiceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version of the spec. The value of this field has no semantic
	// meaning (e.g. don't interpret it as as a timestamp),
	// but it can be used to impose a partial order. If a.spec_version <
	// b.spec_version then a was the spec before b.
	SpecVersion uint64 `protobuf:"varint,1,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	// desired_phase is the phase the service should be in. Used to start or stop the service.
	DesiredPhase ServicePhase `protobuf:"varint,2,opt,name=desired_phase,json=desiredPhase,proto3,enum=gitpod.v1.ServicePhase" json:"desired_phase,omitempty"`
	// commands contains the commands to start, stop and check the readiness of the service
	Commands *ServiceSpec_Commands `protobuf:"bytes,3,opt,name=commands,proto3" json:"commands,omitempty"`
	// session should be changed to trigger a restart of the service. If a service exits it will
	// not be restarted until the session is changed.
	Session string `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	// runs_on specifies the environment the service should run on.
	RunsOn *RunsOn `protobuf:"bytes,5,opt,name=runs_on,json=runsOn,proto3" json:"runs_on,omitempty"`
}

func (x *ServiceSpec) Reset() {
	*x = ServiceSpec{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSpec) ProtoMessage() {}

func (x *ServiceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSpec.ProtoReflect.Descriptor instead.
func (*ServiceSpec) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceSpec) GetSpecVersion() uint64 {
	if x != nil {
		return x.SpecVersion
	}
	return 0
}

func (x *ServiceSpec) GetDesiredPhase() ServicePhase {
	if x != nil {
		return x.DesiredPhase
	}
	return ServicePhase_SERVICE_PHASE_UNSPECIFIED
}

func (x *ServiceSpec) GetCommands() *ServiceSpec_Commands {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *ServiceSpec) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *ServiceSpec) GetRunsOn() *RunsOn {
	if x != nil {
		return x.RunsOn
	}
	return nil
}

type ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version of the status update. Service instances themselves are
	// unversioned, but their status has different versions. The value of this
	// field has no semantic meaning (e.g. don't interpret it as as a timestamp),
	// but it can be used to impose a partial order. If a.status_version <
	// b.status_version then a was the status before b.
	StatusVersion uint64 `protobuf:"varint,1,opt,name=status_version,json=statusVersion,proto3" json:"status_version,omitempty"`
	// phase is the current phase of the service.
	Phase ServicePhase `protobuf:"varint,2,opt,name=phase,proto3,enum=gitpod.v1.ServicePhase" json:"phase,omitempty"`
	// failure_message summarises why the service failed to operate. If this is non-empty
	// the service has failed to operate and will likely transition to a failed state.
	FailureMessage string `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	// log_url contains the URL at which the service logs can be accessed.
	LogUrl string `protobuf:"bytes,4,opt,name=log_url,json=logUrl,proto3" json:"log_url,omitempty"`
	// session is the current session of the service.
	Session string `protobuf:"bytes,5,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceStatus) GetStatusVersion() uint64 {
	if x != nil {
		return x.StatusVersion
	}
	return 0
}

func (x *ServiceStatus) GetPhase() ServicePhase {
	if x != nil {
		return x.Phase
	}
	return ServicePhase_SERVICE_PHASE_UNSPECIFIED
}

func (x *ServiceStatus) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *ServiceStatus) GetLogUrl() string {
	if x != nil {
		return x.LogUrl
	}
	return ""
}

func (x *ServiceStatus) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvironmentId string           `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Metadata      *ServiceMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *ServiceSpec     `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *ServiceStatus   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{3}
}

func (x *Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Service) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *Service) GetMetadata() *ServiceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Service) GetSpec() *ServiceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Service) GetStatus() *ServiceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentId string           `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Metadata      *ServiceMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *ServiceSpec     `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *CreateServiceRequest) Reset() {
	*x = CreateServiceRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceRequest) ProtoMessage() {}

func (x *CreateServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{4}
}

func (x *CreateServiceRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *CreateServiceRequest) GetMetadata() *ServiceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateServiceRequest) GetSpec() *ServiceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type CreateServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service *Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *CreateServiceResponse) Reset() {
	*x = CreateServiceResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceResponse) ProtoMessage() {}

func (x *CreateServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceResponse.ProtoReflect.Descriptor instead.
func (*CreateServiceResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{5}
}

func (x *CreateServiceResponse) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

type GetServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetServiceRequest) Reset() {
	*x = GetServiceRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceRequest) ProtoMessage() {}

func (x *GetServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceRequest.ProtoReflect.Descriptor instead.
func (*GetServiceRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{6}
}

func (x *GetServiceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service *Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetServiceResponse) Reset() {
	*x = GetServiceResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceResponse) ProtoMessage() {}

func (x *GetServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceResponse.ProtoReflect.Descriptor instead.
func (*GetServiceResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{7}
}

func (x *GetServiceResponse) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

type ListServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing services
	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// filter contains the filter options for listing services
	Filter *ListServicesRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListServicesRequest) Reset() {
	*x = ListServicesRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesRequest) ProtoMessage() {}

func (x *ListServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesRequest.ProtoReflect.Descriptor instead.
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{8}
}

func (x *ListServicesRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListServicesRequest) GetFilter() *ListServicesRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Services   []*Service          `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *ListServicesResponse) Reset() {
	*x = ListServicesResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesResponse) ProtoMessage() {}

func (x *ListServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesResponse.ProtoReflect.Descriptor instead.
func (*ListServicesResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{9}
}

func (x *ListServicesResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListServicesResponse) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

type UpdateServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *UpdateServiceRequest_ServiceMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Changing the spec of a service is a complex operation. The spec of a service
	// can only be updated if the service is in a stopped state. If the service is
	// running, it must be stopped first.
	Spec *UpdateServiceRequest_ServiceSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// Service status updates are only expected from the executing environment. As a client
	// of this API you are not expected to provide this field. Updating this field requires
	// the `environmentservice:update_status` permission.
	Status *UpdateServiceRequest_ServiceStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateServiceRequest) Reset() {
	*x = UpdateServiceRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceRequest) ProtoMessage() {}

func (x *UpdateServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateServiceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateServiceRequest) GetMetadata() *UpdateServiceRequest_ServiceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateServiceRequest) GetSpec() *UpdateServiceRequest_ServiceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *UpdateServiceRequest) GetStatus() *UpdateServiceRequest_ServiceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateServiceResponse) Reset() {
	*x = UpdateServiceResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceResponse) ProtoMessage() {}

func (x *UpdateServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceResponse.ProtoReflect.Descriptor instead.
func (*UpdateServiceResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{11}
}

type DeleteServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Force bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteServiceRequest) Reset() {
	*x = DeleteServiceRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceRequest) ProtoMessage() {}

func (x *DeleteServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteServiceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteServiceRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteServiceResponse) Reset() {
	*x = DeleteServiceResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceResponse) ProtoMessage() {}

func (x *DeleteServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceResponse.ProtoReflect.Descriptor instead.
func (*DeleteServiceResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{13}
}

type StartServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartServiceRequest) Reset() {
	*x = StartServiceRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartServiceRequest) ProtoMessage() {}

func (x *StartServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartServiceRequest.ProtoReflect.Descriptor instead.
func (*StartServiceRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{14}
}

func (x *StartServiceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StartServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartServiceResponse) Reset() {
	*x = StartServiceResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartServiceResponse) ProtoMessage() {}

func (x *StartServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartServiceResponse.ProtoReflect.Descriptor instead.
func (*StartServiceResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{15}
}

type StopServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopServiceRequest) Reset() {
	*x = StopServiceRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopServiceRequest) ProtoMessage() {}

func (x *StopServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopServiceRequest.ProtoReflect.Descriptor instead.
func (*StopServiceRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{16}
}

func (x *StopServiceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StopServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopServiceResponse) Reset() {
	*x = StopServiceResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopServiceResponse) ProtoMessage() {}

func (x *StopServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopServiceResponse.ProtoReflect.Descriptor instead.
func (*StopServiceResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{17}
}

type UpsertAutomationsFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentId   string           `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	AutomationsFile *AutomationsFile `protobuf:"bytes,2,opt,name=automations_file,json=automationsFile,proto3" json:"automations_file,omitempty"`
}

func (x *UpsertAutomationsFileRequest) Reset() {
	*x = UpsertAutomationsFileRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertAutomationsFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAutomationsFileRequest) ProtoMessage() {}

func (x *UpsertAutomationsFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAutomationsFileRequest.ProtoReflect.Descriptor instead.
func (*UpsertAutomationsFileRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{18}
}

func (x *UpsertAutomationsFileRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *UpsertAutomationsFileRequest) GetAutomationsFile() *AutomationsFile {
	if x != nil {
		return x.AutomationsFile
	}
	return nil
}

type UpsertAutomationsFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedServiceIds []string `protobuf:"bytes,1,rep,name=updated_service_ids,json=updatedServiceIds,proto3" json:"updated_service_ids,omitempty"`
	UpdatedTaskIds    []string `protobuf:"bytes,2,rep,name=updated_task_ids,json=updatedTaskIds,proto3" json:"updated_task_ids,omitempty"`
}

func (x *UpsertAutomationsFileResponse) Reset() {
	*x = UpsertAutomationsFileResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertAutomationsFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAutomationsFileResponse) ProtoMessage() {}

func (x *UpsertAutomationsFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAutomationsFileResponse.ProtoReflect.Descriptor instead.
func (*UpsertAutomationsFileResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{19}
}

func (x *UpsertAutomationsFileResponse) GetUpdatedServiceIds() []string {
	if x != nil {
		return x.UpdatedServiceIds
	}
	return nil
}

func (x *UpsertAutomationsFileResponse) GetUpdatedTaskIds() []string {
	if x != nil {
		return x.UpdatedTaskIds
	}
	return nil
}

// WARN: Do not remove any field here, as it will break reading automation yaml files. We error if there are any
// unknown fields in the yaml (to ensure the yaml is correct), but would break if we removed any fields.
// This includes marking a field as "reserved" in the proto file, this will also break reading the yaml.
type AutomationsFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services map[string]*AutomationsFile_Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tasks    map[string]*AutomationsFile_Task    `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AutomationsFile) Reset() {
	*x = AutomationsFile{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutomationsFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationsFile) ProtoMessage() {}

func (x *AutomationsFile) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationsFile.ProtoReflect.Descriptor instead.
func (*AutomationsFile) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{20}
}

func (x *AutomationsFile) GetServices() map[string]*AutomationsFile_Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *AutomationsFile) GetTasks() map[string]*AutomationsFile_Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type CreateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentId string        `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Metadata      *TaskMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *TaskSpec     `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	DependsOn     []string      `protobuf:"bytes,4,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
}

func (x *CreateTaskRequest) Reset() {
	*x = CreateTaskRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskRequest) ProtoMessage() {}

func (x *CreateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{21}
}

func (x *CreateTaskRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *CreateTaskRequest) GetMetadata() *TaskMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateTaskRequest) GetSpec() *TaskSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CreateTaskRequest) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

type CreateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *CreateTaskResponse) Reset() {
	*x = CreateTaskResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResponse) ProtoMessage() {}

func (x *CreateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateTaskResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{22}
}

func (x *CreateTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type GetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{23}
}

func (x *GetTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{24}
}

func (x *GetTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type ListTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing tasks
	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// filter contains the filter options for listing tasks
	Filter *ListTasksRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{25}
}

func (x *ListTasksRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListTasksRequest) GetFilter() *ListTasksRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Tasks      []*Task             `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *ListTasksResponse) Reset() {
	*x = ListTasksResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponse) ProtoMessage() {}

func (x *ListTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponse.ProtoReflect.Descriptor instead.
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{26}
}

func (x *ListTasksResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListTasksResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type UpdateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *UpdateTaskRequest_TaskMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *UpdateTaskRequest_TaskSpec     `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// dependencies specifies the IDs of the automations this task depends on.
	DependsOn []string `protobuf:"bytes,4,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
}

func (x *UpdateTaskRequest) Reset() {
	*x = UpdateTaskRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest) ProtoMessage() {}

func (x *UpdateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTaskRequest) GetMetadata() *UpdateTaskRequest_TaskMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateTaskRequest) GetSpec() *UpdateTaskRequest_TaskSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *UpdateTaskRequest) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

type UpdateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTaskResponse) Reset() {
	*x = UpdateTaskResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskResponse) ProtoMessage() {}

func (x *UpdateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaskResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{28}
}

type DeleteTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTaskRequest) Reset() {
	*x = DeleteTaskRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskRequest) ProtoMessage() {}

func (x *DeleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTaskResponse) Reset() {
	*x = DeleteTaskResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskResponse) ProtoMessage() {}

func (x *DeleteTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteTaskResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{30}
}

type StartTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartTaskRequest) Reset() {
	*x = StartTaskRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskRequest) ProtoMessage() {}

func (x *StartTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskRequest.ProtoReflect.Descriptor instead.
func (*StartTaskRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{31}
}

func (x *StartTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StartTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskExecution *TaskExecution `protobuf:"bytes,1,opt,name=task_execution,json=taskExecution,proto3" json:"task_execution,omitempty"`
}

func (x *StartTaskResponse) Reset() {
	*x = StartTaskResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskResponse) ProtoMessage() {}

func (x *StartTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskResponse.ProtoReflect.Descriptor instead.
func (*StartTaskResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{32}
}

func (x *StartTaskResponse) GetTaskExecution() *TaskExecution {
	if x != nil {
		return x.TaskExecution
	}
	return nil
}

type ListTaskExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing task runs
	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// filter contains the filter options for listing task runs
	Filter *ListTaskExecutionsRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListTaskExecutionsRequest) Reset() {
	*x = ListTaskExecutionsRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTaskExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskExecutionsRequest) ProtoMessage() {}

func (x *ListTaskExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListTaskExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{33}
}

func (x *ListTaskExecutionsRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListTaskExecutionsRequest) GetFilter() *ListTaskExecutionsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListTaskExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination     *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	TaskExecutions []*TaskExecution    `protobuf:"bytes,2,rep,name=task_executions,json=taskExecutions,proto3" json:"task_executions,omitempty"`
}

func (x *ListTaskExecutionsResponse) Reset() {
	*x = ListTaskExecutionsResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTaskExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskExecutionsResponse) ProtoMessage() {}

func (x *ListTaskExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ListTaskExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{34}
}

func (x *ListTaskExecutionsResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListTaskExecutionsResponse) GetTaskExecutions() []*TaskExecution {
	if x != nil {
		return x.TaskExecutions
	}
	return nil
}

type GetTaskExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTaskExecutionRequest) Reset() {
	*x = GetTaskExecutionRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskExecutionRequest) ProtoMessage() {}

func (x *GetTaskExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskExecutionRequest.ProtoReflect.Descriptor instead.
func (*GetTaskExecutionRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{35}
}

func (x *GetTaskExecutionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTaskExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskExecution *TaskExecution `protobuf:"bytes,1,opt,name=task_execution,json=taskExecution,proto3" json:"task_execution,omitempty"`
}

func (x *GetTaskExecutionResponse) Reset() {
	*x = GetTaskExecutionResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskExecutionResponse) ProtoMessage() {}

func (x *GetTaskExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskExecutionResponse.ProtoReflect.Descriptor instead.
func (*GetTaskExecutionResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{36}
}

func (x *GetTaskExecutionResponse) GetTaskExecution() *TaskExecution {
	if x != nil {
		return x.TaskExecution
	}
	return nil
}

type StopTaskExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopTaskExecutionRequest) Reset() {
	*x = StopTaskExecutionRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopTaskExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTaskExecutionRequest) ProtoMessage() {}

func (x *StopTaskExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTaskExecutionRequest.ProtoReflect.Descriptor instead.
func (*StopTaskExecutionRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{37}
}

func (x *StopTaskExecutionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StopTaskExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopTaskExecutionResponse) Reset() {
	*x = StopTaskExecutionResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopTaskExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTaskExecutionResponse) ProtoMessage() {}

func (x *StopTaskExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTaskExecutionResponse.ProtoReflect.Descriptor instead.
func (*StopTaskExecutionResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{38}
}

type UpdateTaskExecutionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Steps []*TaskExecutionStatus_Step `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
	// failure_message marks the task execution as failed and provides a message explaining the failure.
	// If an individual step has failed, callers are NOT expected to set this message; only if the task execution as a whole has failed/cannot be started.
	FailureMessage *string `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3,oneof" json:"failure_message,omitempty"`
	// log_url is the URL to the logs of the task's steps. If this is empty, the task either has no logs or has not yet started.
	LogUrl *string `protobuf:"bytes,4,opt,name=log_url,json=logUrl,proto3,oneof" json:"log_url,omitempty"`
}

func (x *UpdateTaskExecutionStatusRequest) Reset() {
	*x = UpdateTaskExecutionStatusRequest{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskExecutionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskExecutionStatusRequest) ProtoMessage() {}

func (x *UpdateTaskExecutionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskExecutionStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskExecutionStatusRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateTaskExecutionStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTaskExecutionStatusRequest) GetSteps() []*TaskExecutionStatus_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *UpdateTaskExecutionStatusRequest) GetFailureMessage() string {
	if x != nil && x.FailureMessage != nil {
		return *x.FailureMessage
	}
	return ""
}

func (x *UpdateTaskExecutionStatusRequest) GetLogUrl() string {
	if x != nil && x.LogUrl != nil {
		return *x.LogUrl
	}
	return ""
}

type UpdateTaskExecutionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTaskExecutionStatusResponse) Reset() {
	*x = UpdateTaskExecutionStatusResponse{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskExecutionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskExecutionStatusResponse) ProtoMessage() {}

func (x *UpdateTaskExecutionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskExecutionStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaskExecutionStatusResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{40}
}

type TaskMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reference is a user-facing identifier for the task which must be unique on the environment.
	// It is used to express dependencies between tasks, and to identify the task in user interactions (e.g. the CLI).
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// name is a user-facing name for the task. Unlike the reference, this field is not unique, and not referenced by the system.
	// This is a short descriptive name for the task.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description is a user-facing description for the task. It can be used to provide context and documentation for the task.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// created_at is the time the task was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// creator describes the principal who created the task.
	Creator *Subject `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	// triggered_by is a list of trigger that start the task.
	TriggeredBy []*AutomationTrigger `protobuf:"bytes,6,rep,name=triggered_by,json=triggeredBy,proto3" json:"triggered_by,omitempty"`
}

func (x *TaskMetadata) Reset() {
	*x = TaskMetadata{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMetadata) ProtoMessage() {}

func (x *TaskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMetadata.ProtoReflect.Descriptor instead.
func (*TaskMetadata) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{41}
}

func (x *TaskMetadata) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *TaskMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaskMetadata) GetCreator() *Subject {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *TaskMetadata) GetTriggeredBy() []*AutomationTrigger {
	if x != nil {
		return x.TriggeredBy
	}
	return nil
}

type TaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// command contains the command the task should execute
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// runs_on specifies the environment the task should run on.
	RunsOn *RunsOn `protobuf:"bytes,2,opt,name=runs_on,json=runsOn,proto3" json:"runs_on,omitempty"`
}

func (x *TaskSpec) Reset() {
	*x = TaskSpec{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSpec) ProtoMessage() {}

func (x *TaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSpec.ProtoReflect.Descriptor instead.
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{42}
}

func (x *TaskSpec) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *TaskSpec) GetRunsOn() *RunsOn {
	if x != nil {
		return x.RunsOn
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvironmentId string        `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Metadata      *TaskMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *TaskSpec     `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// dependencies specifies the IDs of the automations this task depends on.
	DependsOn []string `protobuf:"bytes,5,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{43}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *Task) GetMetadata() *TaskMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Task) GetSpec() *TaskSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Task) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

type RunsOn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//
	//	*RunsOn_Docker_
	Target isRunsOn_Target `protobuf_oneof:"target"`
}

func (x *RunsOn) Reset() {
	*x = RunsOn{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunsOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunsOn) ProtoMessage() {}

func (x *RunsOn) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunsOn.ProtoReflect.Descriptor instead.
func (*RunsOn) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{44}
}

func (m *RunsOn) GetTarget() isRunsOn_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *RunsOn) GetDocker() *RunsOn_Docker {
	if x, ok := x.GetTarget().(*RunsOn_Docker_); ok {
		return x.Docker
	}
	return nil
}

type isRunsOn_Target interface {
	isRunsOn_Target()
}

type RunsOn_Docker_ struct {
	Docker *RunsOn_Docker `protobuf:"bytes,10,opt,name=docker,proto3,oneof"`
}

func (*RunsOn_Docker_) isRunsOn_Target() {}

type TaskExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *TaskExecutionMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *TaskExecutionSpec     `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *TaskExecutionStatus   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TaskExecution) Reset() {
	*x = TaskExecution{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecution) ProtoMessage() {}

func (x *TaskExecution) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecution.ProtoReflect.Descriptor instead.
func (*TaskExecution) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{45}
}

func (x *TaskExecution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskExecution) GetMetadata() *TaskExecutionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaskExecution) GetSpec() *TaskExecutionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *TaskExecution) GetStatus() *TaskExecutionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type TaskExecutionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// task_id is the ID of the main task being executed.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// environment_id is the ID of the environment in which the task run is executed.
	EnvironmentId string `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	// created_at is the time the task was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// creator describes the principal who created/started the task run.
	Creator *Subject `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	// started_by describes the trigger that started the task execution.
	StartedBy string `protobuf:"bytes,6,opt,name=started_by,json=startedBy,proto3" json:"started_by,omitempty"`
	// started_at is the time the task execution actually started to run.
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// completed_at is the time the task execution was done.
	CompletedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
}

func (x *TaskExecutionMetadata) Reset() {
	*x = TaskExecutionMetadata{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecutionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecutionMetadata) ProtoMessage() {}

func (x *TaskExecutionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecutionMetadata.ProtoReflect.Descriptor instead.
func (*TaskExecutionMetadata) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{46}
}

func (x *TaskExecutionMetadata) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskExecutionMetadata) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *TaskExecutionMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaskExecutionMetadata) GetCreator() *Subject {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *TaskExecutionMetadata) GetStartedBy() string {
	if x != nil {
		return x.StartedBy
	}
	return ""
}

func (x *TaskExecutionMetadata) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *TaskExecutionMetadata) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

type TaskExecutionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// plan is a list of groups of steps. The steps in a group are executed concurrently, while the groups are executed sequentially.
	// The order of the groups is the order in which they are executed.
	Plan []*TaskExecutionSpec_Group `protobuf:"bytes,1,rep,name=plan,proto3" json:"plan,omitempty"`
	// desired_phase is the phase the task execution should be in. Used to stop a running task execution early.
	DesiredPhase TaskExecutionPhase `protobuf:"varint,2,opt,name=desired_phase,json=desiredPhase,proto3,enum=gitpod.v1.TaskExecutionPhase" json:"desired_phase,omitempty"`
}

func (x *TaskExecutionSpec) Reset() {
	*x = TaskExecutionSpec{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecutionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecutionSpec) ProtoMessage() {}

func (x *TaskExecutionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecutionSpec.ProtoReflect.Descriptor instead.
func (*TaskExecutionSpec) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{47}
}

func (x *TaskExecutionSpec) GetPlan() []*TaskExecutionSpec_Group {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *TaskExecutionSpec) GetDesiredPhase() TaskExecutionPhase {
	if x != nil {
		return x.DesiredPhase
	}
	return TaskExecutionPhase_TASK_EXECUTION_PHASE_UNSPECIFIED
}

type TaskExecutionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version of the status update. Task executions themselves are
	// unversioned, but their status has different versions. The value of this
	// field has no semantic meaning (e.g. don't interpret it as as a timestamp),
	// but it can be used to impose a partial order. If a.status_version <
	// b.status_version then a was the status before b.
	StatusVersion uint64 `protobuf:"varint,1,opt,name=status_version,json=statusVersion,proto3" json:"status_version,omitempty"`
	// the phase of a task execution represents the aggregated phase of all steps.
	Phase TaskExecutionPhase `protobuf:"varint,2,opt,name=phase,proto3,enum=gitpod.v1.TaskExecutionPhase" json:"phase,omitempty"`
	// failure_message summarises why the task execution failed to operate. If this is non-empty
	// the task execution has failed to operate and will likely transition to a failed state.
	FailureMessage string `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	// steps provides the status for each individual step of the task execution. If a step is missing it
	// has not yet started.
	Steps []*TaskExecutionStatus_Step `protobuf:"bytes,4,rep,name=steps,proto3" json:"steps,omitempty"`
	// log_url is the URL to the logs of the task's steps. If this is empty, the task either has no logs
	// or has not yet started.
	LogUrl string `protobuf:"bytes,5,opt,name=log_url,json=logUrl,proto3" json:"log_url,omitempty"`
}

func (x *TaskExecutionStatus) Reset() {
	*x = TaskExecutionStatus{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecutionStatus) ProtoMessage() {}

func (x *TaskExecutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecutionStatus.ProtoReflect.Descriptor instead.
func (*TaskExecutionStatus) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{48}
}

func (x *TaskExecutionStatus) GetStatusVersion() uint64 {
	if x != nil {
		return x.StatusVersion
	}
	return 0
}

func (x *TaskExecutionStatus) GetPhase() TaskExecutionPhase {
	if x != nil {
		return x.Phase
	}
	return TaskExecutionPhase_TASK_EXECUTION_PHASE_UNSPECIFIED
}

func (x *TaskExecutionStatus) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *TaskExecutionStatus) GetSteps() []*TaskExecutionStatus_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *TaskExecutionStatus) GetLogUrl() string {
	if x != nil {
		return x.LogUrl
	}
	return ""
}

// An AutomationTrigger represents a trigger for an automation action.
// The `post_environment_start` field indicates that the automation should be triggered after the environment has started.
// The `post_devcontainer_start` field indicates that the automation should be triggered after the dev container has started.
type AutomationTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Trigger:
	//
	//	*AutomationTrigger_Manual
	//	*AutomationTrigger_PostEnvironmentStart
	//	*AutomationTrigger_PostDevcontainerStart
	Trigger isAutomationTrigger_Trigger `protobuf_oneof:"trigger"`
}

func (x *AutomationTrigger) Reset() {
	*x = AutomationTrigger{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutomationTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationTrigger) ProtoMessage() {}

func (x *AutomationTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationTrigger.ProtoReflect.Descriptor instead.
func (*AutomationTrigger) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{49}
}

func (m *AutomationTrigger) GetTrigger() isAutomationTrigger_Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (x *AutomationTrigger) GetManual() bool {
	if x, ok := x.GetTrigger().(*AutomationTrigger_Manual); ok {
		return x.Manual
	}
	return false
}

func (x *AutomationTrigger) GetPostEnvironmentStart() bool {
	if x, ok := x.GetTrigger().(*AutomationTrigger_PostEnvironmentStart); ok {
		return x.PostEnvironmentStart
	}
	return false
}

func (x *AutomationTrigger) GetPostDevcontainerStart() bool {
	if x, ok := x.GetTrigger().(*AutomationTrigger_PostDevcontainerStart); ok {
		return x.PostDevcontainerStart
	}
	return false
}

type isAutomationTrigger_Trigger interface {
	isAutomationTrigger_Trigger()
}

type AutomationTrigger_Manual struct {
	Manual bool `protobuf:"varint,1,opt,name=manual,proto3,oneof"`
}

type AutomationTrigger_PostEnvironmentStart struct {
	PostEnvironmentStart bool `protobuf:"varint,10,opt,name=post_environment_start,json=postEnvironmentStart,proto3,oneof"`
}

type AutomationTrigger_PostDevcontainerStart struct {
	PostDevcontainerStart bool `protobuf:"varint,20,opt,name=post_devcontainer_start,json=postDevcontainerStart,proto3,oneof"`
}

func (*AutomationTrigger_Manual) isAutomationTrigger_Trigger() {}

func (*AutomationTrigger_PostEnvironmentStart) isAutomationTrigger_Trigger() {}

func (*AutomationTrigger_PostDevcontainerStart) isAutomationTrigger_Trigger() {}

type ServiceSpec_Commands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start is the command to start and run the service.
	// If start exits, the service will transition to the following phase:
	// - Stopped: if the exit code is 0
	// - Failed: if the exit code is not 0
	// If the stop command is not set, the start command will receive a SIGTERM signal when the service is
	// requested to stop. If it does not exit within 2 minutes, it will receive a SIGKILL signal.
	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// ready is an optional command that is run repeatedly until it exits with a zero exit code.
	// If set, the service will first go into a Starting phase, and then into a Running phase once the ready
	// command exits with a zero exit code.
	Ready string `protobuf:"bytes,2,opt,name=ready,proto3" json:"ready,omitempty"`
	// stop is an optional command that runs when the service is requested to stop.
	// If set, instead of sending a SIGTERM signal to the start command, the stop command will be run.
	// Once the stop command exits, the start command will receive a SIGKILL signal.
	// If the stop command exits with a non-zero exit code, the service will transition to the Failed phase.
	// If the stop command does not exit within 2 minutes, a SIGKILL signal will be sent to both the start and
	// stop commands.
	Stop string `protobuf:"bytes,3,opt,name=stop,proto3" json:"stop,omitempty"`
}

func (x *ServiceSpec_Commands) Reset() {
	*x = ServiceSpec_Commands{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceSpec_Commands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSpec_Commands) ProtoMessage() {}

func (x *ServiceSpec_Commands) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSpec_Commands.ProtoReflect.Descriptor instead.
func (*ServiceSpec_Commands) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ServiceSpec_Commands) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *ServiceSpec_Commands) GetReady() string {
	if x != nil {
		return x.Ready
	}
	return ""
}

func (x *ServiceSpec_Commands) GetStop() string {
	if x != nil {
		return x.Stop
	}
	return ""
}

type ListServicesRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// environment_ids filters the response to only services of these environments
	EnvironmentIds []string `protobuf:"bytes,1,rep,name=environment_ids,json=environmentIds,proto3" json:"environment_ids,omitempty"`
	// references filters the response to only services with these references
	References []string `protobuf:"bytes,2,rep,name=references,proto3" json:"references,omitempty"`
	// service_ids filters the response to only services with these IDs
	ServiceIds []string `protobuf:"bytes,3,rep,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`
}

func (x *ListServicesRequest_Filter) Reset() {
	*x = ListServicesRequest_Filter{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServicesRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesRequest_Filter) ProtoMessage() {}

func (x *ListServicesRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListServicesRequest_Filter) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListServicesRequest_Filter) GetEnvironmentIds() []string {
	if x != nil {
		return x.EnvironmentIds
	}
	return nil
}

func (x *ListServicesRequest_Filter) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ListServicesRequest_Filter) GetServiceIds() []string {
	if x != nil {
		return x.ServiceIds
	}
	return nil
}

type UpdateServiceRequest_AutomationTriggerUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigger []*AutomationTrigger `protobuf:"bytes,1,rep,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *UpdateServiceRequest_AutomationTriggerUpdate) Reset() {
	*x = UpdateServiceRequest_AutomationTriggerUpdate{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceRequest_AutomationTriggerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceRequest_AutomationTriggerUpdate) ProtoMessage() {}

func (x *UpdateServiceRequest_AutomationTriggerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceRequest_AutomationTriggerUpdate.ProtoReflect.Descriptor instead.
func (*UpdateServiceRequest_AutomationTriggerUpdate) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{10, 0}
}

func (x *UpdateServiceRequest_AutomationTriggerUpdate) GetTrigger() []*AutomationTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type UpdateServiceRequest_ServiceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string                                       `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string                                       `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	TriggeredBy *UpdateServiceRequest_AutomationTriggerUpdate `protobuf:"bytes,3,opt,name=triggered_by,json=triggeredBy,proto3,oneof" json:"triggered_by,omitempty"`
}

func (x *UpdateServiceRequest_ServiceMetadata) Reset() {
	*x = UpdateServiceRequest_ServiceMetadata{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceRequest_ServiceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceRequest_ServiceMetadata) ProtoMessage() {}

func (x *UpdateServiceRequest_ServiceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceRequest_ServiceMetadata.ProtoReflect.Descriptor instead.
func (*UpdateServiceRequest_ServiceMetadata) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{10, 1}
}

func (x *UpdateServiceRequest_ServiceMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateServiceRequest_ServiceMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateServiceRequest_ServiceMetadata) GetTriggeredBy() *UpdateServiceRequest_AutomationTriggerUpdate {
	if x != nil {
		return x.TriggeredBy
	}
	return nil
}

type UpdateServiceRequest_ServiceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands *UpdateServiceRequest_ServiceSpec_Commands `protobuf:"bytes,1,opt,name=commands,proto3,oneof" json:"commands,omitempty"`
	RunsOn   *RunsOn                                    `protobuf:"bytes,2,opt,name=runs_on,json=runsOn,proto3,oneof" json:"runs_on,omitempty"`
}

func (x *UpdateServiceRequest_ServiceSpec) Reset() {
	*x = UpdateServiceRequest_ServiceSpec{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceRequest_ServiceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceRequest_ServiceSpec) ProtoMessage() {}

func (x *UpdateServiceRequest_ServiceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceRequest_ServiceSpec.ProtoReflect.Descriptor instead.
func (*UpdateServiceRequest_ServiceSpec) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{10, 2}
}

func (x *UpdateServiceRequest_ServiceSpec) GetCommands() *UpdateServiceRequest_ServiceSpec_Commands {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *UpdateServiceRequest_ServiceSpec) GetRunsOn() *RunsOn {
	if x != nil {
		return x.RunsOn
	}
	return nil
}

type UpdateServiceRequest_ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase          *ServicePhase `protobuf:"varint,1,opt,name=phase,proto3,enum=gitpod.v1.ServicePhase,oneof" json:"phase,omitempty"`
	FailureMessage *string       `protobuf:"bytes,2,opt,name=failure_message,json=failureMessage,proto3,oneof" json:"failure_message,omitempty"`
	LogUrl         *string       `protobuf:"bytes,3,opt,name=log_url,json=logUrl,proto3,oneof" json:"log_url,omitempty"`
	Session        *string       `protobuf:"bytes,4,opt,name=session,proto3,oneof" json:"session,omitempty"`
}

func (x *UpdateServiceRequest_ServiceStatus) Reset() {
	*x = UpdateServiceRequest_ServiceStatus{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceRequest_ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceRequest_ServiceStatus) ProtoMessage() {}

func (x *UpdateServiceRequest_ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceRequest_ServiceStatus.ProtoReflect.Descriptor instead.
func (*UpdateServiceRequest_ServiceStatus) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{10, 3}
}

func (x *UpdateServiceRequest_ServiceStatus) GetPhase() ServicePhase {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return ServicePhase_SERVICE_PHASE_UNSPECIFIED
}

func (x *UpdateServiceRequest_ServiceStatus) GetFailureMessage() string {
	if x != nil && x.FailureMessage != nil {
		return *x.FailureMessage
	}
	return ""
}

func (x *UpdateServiceRequest_ServiceStatus) GetLogUrl() string {
	if x != nil && x.LogUrl != nil {
		return *x.LogUrl
	}
	return ""
}

func (x *UpdateServiceRequest_ServiceStatus) GetSession() string {
	if x != nil && x.Session != nil {
		return *x.Session
	}
	return ""
}

type UpdateServiceRequest_ServiceSpec_Commands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	Ready *string `protobuf:"bytes,2,opt,name=ready,proto3,oneof" json:"ready,omitempty"`
	Stop  *string `protobuf:"bytes,3,opt,name=stop,proto3,oneof" json:"stop,omitempty"`
}

func (x *UpdateServiceRequest_ServiceSpec_Commands) Reset() {
	*x = UpdateServiceRequest_ServiceSpec_Commands{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceRequest_ServiceSpec_Commands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceRequest_ServiceSpec_Commands) ProtoMessage() {}

func (x *UpdateServiceRequest_ServiceSpec_Commands) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceRequest_ServiceSpec_Commands.ProtoReflect.Descriptor instead.
func (*UpdateServiceRequest_ServiceSpec_Commands) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{10, 2, 0}
}

func (x *UpdateServiceRequest_ServiceSpec_Commands) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *UpdateServiceRequest_ServiceSpec_Commands) GetReady() string {
	if x != nil && x.Ready != nil {
		return *x.Ready
	}
	return ""
}

func (x *UpdateServiceRequest_ServiceSpec_Commands) GetStop() string {
	if x != nil && x.Stop != nil {
		return *x.Stop
	}
	return ""
}

type AutomationsFile_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Commands    *ServiceSpec_Commands `protobuf:"bytes,3,opt,name=commands,proto3" json:"commands,omitempty"`
	TriggeredBy []string              `protobuf:"bytes,4,rep,name=triggered_by,json=triggeredBy,proto3" json:"triggered_by,omitempty"`
	RunsOn      *RunsOn               `protobuf:"bytes,10,opt,name=runs_on,json=runsOn,proto3" json:"runs_on,omitempty"`
}

func (x *AutomationsFile_Service) Reset() {
	*x = AutomationsFile_Service{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutomationsFile_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationsFile_Service) ProtoMessage() {}

func (x *AutomationsFile_Service) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationsFile_Service.ProtoReflect.Descriptor instead.
func (*AutomationsFile_Service) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{20, 0}
}

func (x *AutomationsFile_Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AutomationsFile_Service) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AutomationsFile_Service) GetCommands() *ServiceSpec_Commands {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *AutomationsFile_Service) GetTriggeredBy() []string {
	if x != nil {
		return x.TriggeredBy
	}
	return nil
}

func (x *AutomationsFile_Service) GetRunsOn() *RunsOn {
	if x != nil {
		return x.RunsOn
	}
	return nil
}

type AutomationsFile_Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Command     string   `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	DependsOn   []string `protobuf:"bytes,4,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
	TriggeredBy []string `protobuf:"bytes,5,rep,name=triggered_by,json=triggeredBy,proto3" json:"triggered_by,omitempty"`
	RunsOn      *RunsOn  `protobuf:"bytes,10,opt,name=runs_on,json=runsOn,proto3" json:"runs_on,omitempty"`
}

func (x *AutomationsFile_Task) Reset() {
	*x = AutomationsFile_Task{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutomationsFile_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationsFile_Task) ProtoMessage() {}

func (x *AutomationsFile_Task) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationsFile_Task.ProtoReflect.Descriptor instead.
func (*AutomationsFile_Task) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{20, 1}
}

func (x *AutomationsFile_Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AutomationsFile_Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AutomationsFile_Task) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *AutomationsFile_Task) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *AutomationsFile_Task) GetTriggeredBy() []string {
	if x != nil {
		return x.TriggeredBy
	}
	return nil
}

func (x *AutomationsFile_Task) GetRunsOn() *RunsOn {
	if x != nil {
		return x.RunsOn
	}
	return nil
}

type ListTasksRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// environment_ids filters the response to only tasks of these environments
	EnvironmentIds []string `protobuf:"bytes,1,rep,name=environment_ids,json=environmentIds,proto3" json:"environment_ids,omitempty"`
	// references filters the response to only services with these references
	References []string `protobuf:"bytes,2,rep,name=references,proto3" json:"references,omitempty"`
	// task_ids filters the response to only tasks with these IDs
	TaskIds []string `protobuf:"bytes,3,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
}

func (x *ListTasksRequest_Filter) Reset() {
	*x = ListTasksRequest_Filter{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest_Filter) ProtoMessage() {}

func (x *ListTasksRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListTasksRequest_Filter) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{25, 0}
}

func (x *ListTasksRequest_Filter) GetEnvironmentIds() []string {
	if x != nil {
		return x.EnvironmentIds
	}
	return nil
}

func (x *ListTasksRequest_Filter) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ListTasksRequest_Filter) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type UpdateTaskRequest_AutomationTriggerUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigger []*AutomationTrigger `protobuf:"bytes,1,rep,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *UpdateTaskRequest_AutomationTriggerUpdate) Reset() {
	*x = UpdateTaskRequest_AutomationTriggerUpdate{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskRequest_AutomationTriggerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest_AutomationTriggerUpdate) ProtoMessage() {}

func (x *UpdateTaskRequest_AutomationTriggerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest_AutomationTriggerUpdate.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest_AutomationTriggerUpdate) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{27, 0}
}

func (x *UpdateTaskRequest_AutomationTriggerUpdate) GetTrigger() []*AutomationTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type UpdateTaskRequest_TaskMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string                                    `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string                                    `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	TriggeredBy *UpdateTaskRequest_AutomationTriggerUpdate `protobuf:"bytes,3,opt,name=triggered_by,json=triggeredBy,proto3,oneof" json:"triggered_by,omitempty"`
}

func (x *UpdateTaskRequest_TaskMetadata) Reset() {
	*x = UpdateTaskRequest_TaskMetadata{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskRequest_TaskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest_TaskMetadata) ProtoMessage() {}

func (x *UpdateTaskRequest_TaskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest_TaskMetadata.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest_TaskMetadata) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{27, 1}
}

func (x *UpdateTaskRequest_TaskMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateTaskRequest_TaskMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateTaskRequest_TaskMetadata) GetTriggeredBy() *UpdateTaskRequest_AutomationTriggerUpdate {
	if x != nil {
		return x.TriggeredBy
	}
	return nil
}

type UpdateTaskRequest_TaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command *string `protobuf:"bytes,1,opt,name=command,proto3,oneof" json:"command,omitempty"`
	RunsOn  *RunsOn `protobuf:"bytes,2,opt,name=runs_on,json=runsOn,proto3,oneof" json:"runs_on,omitempty"`
}

func (x *UpdateTaskRequest_TaskSpec) Reset() {
	*x = UpdateTaskRequest_TaskSpec{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskRequest_TaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest_TaskSpec) ProtoMessage() {}

func (x *UpdateTaskRequest_TaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest_TaskSpec.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest_TaskSpec) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{27, 2}
}

func (x *UpdateTaskRequest_TaskSpec) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

func (x *UpdateTaskRequest_TaskSpec) GetRunsOn() *RunsOn {
	if x != nil {
		return x.RunsOn
	}
	return nil
}

type ListTaskExecutionsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// task_ids filters the response to only task runs of these tasks
	TaskIds []string `protobuf:"bytes,1,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	// task_references filters the response to only task runs with this reference
	TaskReferences []string `protobuf:"bytes,2,rep,name=task_references,json=taskReferences,proto3" json:"task_references,omitempty"`
	// environment_ids filters the response to only task runs of these environments
	EnvironmentIds []string `protobuf:"bytes,3,rep,name=environment_ids,json=environmentIds,proto3" json:"environment_ids,omitempty"`
	// phases filters the response to only task runs in these phases
	Phases []TaskExecutionPhase `protobuf:"varint,4,rep,packed,name=phases,proto3,enum=gitpod.v1.TaskExecutionPhase" json:"phases,omitempty"`
}

func (x *ListTaskExecutionsRequest_Filter) Reset() {
	*x = ListTaskExecutionsRequest_Filter{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTaskExecutionsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskExecutionsRequest_Filter) ProtoMessage() {}

func (x *ListTaskExecutionsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskExecutionsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListTaskExecutionsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{33, 0}
}

func (x *ListTaskExecutionsRequest_Filter) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *ListTaskExecutionsRequest_Filter) GetTaskReferences() []string {
	if x != nil {
		return x.TaskReferences
	}
	return nil
}

func (x *ListTaskExecutionsRequest_Filter) GetEnvironmentIds() []string {
	if x != nil {
		return x.EnvironmentIds
	}
	return nil
}

func (x *ListTaskExecutionsRequest_Filter) GetPhases() []TaskExecutionPhase {
	if x != nil {
		return x.Phases
	}
	return nil
}

type RunsOn_Docker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image       string   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Environment []string `protobuf:"bytes,2,rep,name=environment,proto3" json:"environment,omitempty"`
}

func (x *RunsOn_Docker) Reset() {
	*x = RunsOn_Docker{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunsOn_Docker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunsOn_Docker) ProtoMessage() {}

func (x *RunsOn_Docker) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunsOn_Docker.ProtoReflect.Descriptor instead.
func (*RunsOn_Docker) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{44, 0}
}

func (x *RunsOn_Docker) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *RunsOn_Docker) GetEnvironment() []string {
	if x != nil {
		return x.Environment
	}
	return nil
}

type TaskExecutionSpec_Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Spec *TaskSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *TaskExecutionSpec_Task) Reset() {
	*x = TaskExecutionSpec_Task{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecutionSpec_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecutionSpec_Task) ProtoMessage() {}

func (x *TaskExecutionSpec_Task) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecutionSpec_Task.ProtoReflect.Descriptor instead.
func (*TaskExecutionSpec_Task) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{47, 0}
}

func (x *TaskExecutionSpec_Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskExecutionSpec_Task) GetSpec() *TaskSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type TaskExecutionSpec_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the ID of the execution step
	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DependsOn []string `protobuf:"bytes,2,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
	Label     string   `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	// Types that are assignable to Step:
	//
	//	*TaskExecutionSpec_Step_Task
	//	*TaskExecutionSpec_Step_ServiceId
	Step isTaskExecutionSpec_Step_Step `protobuf_oneof:"step"`
}

func (x *TaskExecutionSpec_Step) Reset() {
	*x = TaskExecutionSpec_Step{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecutionSpec_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecutionSpec_Step) ProtoMessage() {}

func (x *TaskExecutionSpec_Step) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecutionSpec_Step.ProtoReflect.Descriptor instead.
func (*TaskExecutionSpec_Step) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{47, 1}
}

func (x *TaskExecutionSpec_Step) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskExecutionSpec_Step) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *TaskExecutionSpec_Step) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (m *TaskExecutionSpec_Step) GetStep() isTaskExecutionSpec_Step_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (x *TaskExecutionSpec_Step) GetTask() *TaskExecutionSpec_Task {
	if x, ok := x.GetStep().(*TaskExecutionSpec_Step_Task); ok {
		return x.Task
	}
	return nil
}

func (x *TaskExecutionSpec_Step) GetServiceId() string {
	if x, ok := x.GetStep().(*TaskExecutionSpec_Step_ServiceId); ok {
		return x.ServiceId
	}
	return ""
}

type isTaskExecutionSpec_Step_Step interface {
	isTaskExecutionSpec_Step_Step()
}

type TaskExecutionSpec_Step_Task struct {
	Task *TaskExecutionSpec_Task `protobuf:"bytes,10,opt,name=task,proto3,oneof"`
}

type TaskExecutionSpec_Step_ServiceId struct {
	ServiceId string `protobuf:"bytes,11,opt,name=service_id,json=serviceId,proto3,oneof"`
}

func (*TaskExecutionSpec_Step_Task) isTaskExecutionSpec_Step_Step() {}

func (*TaskExecutionSpec_Step_ServiceId) isTaskExecutionSpec_Step_Step() {}

type TaskExecutionSpec_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steps []*TaskExecutionSpec_Step `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *TaskExecutionSpec_Group) Reset() {
	*x = TaskExecutionSpec_Group{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecutionSpec_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecutionSpec_Group) ProtoMessage() {}

func (x *TaskExecutionSpec_Group) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecutionSpec_Group.ProtoReflect.Descriptor instead.
func (*TaskExecutionSpec_Group) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{47, 2}
}

func (x *TaskExecutionSpec_Group) GetSteps() []*TaskExecutionSpec_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

type TaskExecutionStatus_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the ID of the execution step
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// phase is the current phase of the execution step
	Phase TaskExecutionPhase `protobuf:"varint,2,opt,name=phase,proto3,enum=gitpod.v1.TaskExecutionPhase" json:"phase,omitempty"`
	// failure_message summarises why the step failed to operate. If this is non-empty
	// the step has failed to operate and will likely transition to a failed state.
	FailureMessage string `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
}

func (x *TaskExecutionStatus_Step) Reset() {
	*x = TaskExecutionStatus_Step{}
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecutionStatus_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecutionStatus_Step) ProtoMessage() {}

func (x *TaskExecutionStatus_Step) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_automation_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecutionStatus_Step.ProtoReflect.Descriptor instead.
func (*TaskExecutionStatus_Step) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_automation_proto_rawDescGZIP(), []int{48, 0}
}

func (x *TaskExecutionStatus_Step) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskExecutionStatus_Step) GetPhase() TaskExecutionPhase {
	if x != nil {
		return x.Phase
	}
	return TaskExecutionPhase_TASK_EXECUTION_PHASE_UNSPECIFIED
}

func (x *TaskExecutionStatus_Step) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

var File_gitpod_v1_environment_automation_proto protoreflect.FileDescriptor

var file_gitpod_v1_environment_automation_proto_rawDesc = []byte{
	0x0a, 0x26, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0xba, 0x48, 0x1a, 0x72, 0x18, 0x32, 0x16, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x32, 0x38, 0x7d, 0x24, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64,
	0x42, 0x79, 0x22, 0xd0, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6e, 0x73, 0x4f, 0x6e, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x73, 0x4f, 0x6e,
	0x1a, 0x53, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x74, 0x6f, 0x70, 0x22, 0xc1, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x55, 0x72, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x02, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0c, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0xa2, 0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x45, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab,
	0x1e, 0x0c, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x42, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8a, 0x03, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xf5, 0x01, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x2d, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0xa2, 0xab, 0x1e, 0x18, 0x0a, 0x16, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x0e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x47,
	0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x27, 0xba, 0x48, 0x0d, 0x92, 0x01, 0x0a, 0x08, 0x00, 0x10, 0x19, 0x22, 0x04,
	0x72, 0x02, 0x10, 0x01, 0xa2, 0xab, 0x1e, 0x13, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x29, 0xba, 0x48,
	0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2,
	0xab, 0x1e, 0x14, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xea, 0x08, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0c, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x45, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0x51, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x1a, 0xe5, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x1a, 0xa6,
	0x02, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x55,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x73, 0x4f, 0x6e, 0x48, 0x01, 0x52, 0x06, 0x72, 0x75, 0x6e,
	0x73, 0x4f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x76, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x72, 0x75, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x1a, 0xee, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x56, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2,
	0xab, 0x1e, 0x0c, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3f, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2,
	0xab, 0x1e, 0x0c, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x53,
	0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0c, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x53,
	0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0f,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x22,
	0x79, 0x0a, 0x1d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0xc8, 0x06, 0x0a, 0x0f, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x68,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x22, 0xba, 0x48, 0x1f, 0x9a,
	0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x32, 0x16, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x32, 0x38, 0x7d, 0x24, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x22,
	0xba, 0x48, 0x1f, 0x9a, 0x01, 0x1c, 0x22, 0x1a, 0x72, 0x18, 0x32, 0x16, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x32, 0x38,
	0x7d, 0x24, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0xd4, 0x01, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6e, 0x73, 0x4f, 0x6e, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x73, 0x4f, 0x6e,
	0x1a, 0xd6, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2a, 0x0a,
	0x07, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x73, 0x4f,
	0x6e, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x73, 0x4f, 0x6e, 0x1a, 0x5f, 0x0a, 0x0d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x0a, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e,
	0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69,
	0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2c,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x22, 0x39, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x37, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2,
	0xab, 0x1e, 0x09, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x36, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xfb, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xec, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x56, 0x0a, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2d, 0xba, 0x48, 0x0e,
	0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab,
	0x1e, 0x18, 0x0a, 0x16, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x0e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x27,
	0xba, 0x48, 0x0d, 0x92, 0x01, 0x0a, 0x08, 0x00, 0x10, 0x19, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01,
	0xa2, 0xab, 0x1e, 0x13, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x26, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10,
	0x19, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x11, 0x0a, 0x0f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0x79, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x22, 0x93, 0x05, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e,
	0x09, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x2c, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x1a, 0x51,
	0x0a, 0x17, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x1a, 0xdf, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x1a, 0x72, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x73,
	0x4f, 0x6e, 0x48, 0x01, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x73, 0x4f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x72, 0x75, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x09, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x09, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x11, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xeb, 0x03, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0xca, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x26,
	0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0xa2, 0xab, 0x1e, 0x11, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x12,
	0x4f, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x26, 0xba, 0x48, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x00, 0x10, 0x19, 0xa2, 0xab, 0x1e, 0x18, 0x0a, 0x16, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x56, 0x0a, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2d, 0xba, 0x48, 0x0e, 0x92, 0x01,
	0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x18,
	0x0a, 0x16, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x54, 0x0a, 0x06, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x1d, 0xba, 0x48, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x00, 0x10, 0x19, 0xa2, 0xab, 0x1e, 0x0f, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x52, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x22, 0x9e,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x4a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0xa2, 0xab, 0x1e, 0x13, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x13, 0x0a, 0x11,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e,
	0x13, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x22,
	0x23, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xba, 0x48, 0x1a, 0x72, 0x18, 0x32,
	0x16, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x7b,
	0x31, 0x2c, 0x31, 0x32, 0x38, 0x7d, 0x24, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x22, 0x50, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x73, 0x4f, 0x6e, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x73, 0x4f, 0x6e, 0x22, 0xfe, 0x01,
	0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x09,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2,
	0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x2c, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x22, 0x91,
	0x01, 0x0a, 0x06, 0x52, 0x75, 0x6e, 0x73, 0x4f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x73, 0x4f, 0x6e, 0x2e, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x1a, 0x49, 0x0a,
	0x06, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x13, 0x0a, 0x11,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8e, 0x03,
	0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0xa2, 0xab, 0x1e, 0x09, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x69, 0x64, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xea,
	0x03, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x4c, 0x0a, 0x0d,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x1a, 0x49, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0xc1, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x18,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x37, 0x0a,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x1a, 0x40, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x13,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x55, 0x72, 0x6c, 0x1a, 0x88, 0x01, 0x0a,
	0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x38, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x15, 0x70, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x2a, 0xd0, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xe5, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x20, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x20, 0x0a,
	0x1c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x32,
	0xc2, 0x0c, 0x0a, 0x1c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x54, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x54, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x54, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x53,
	0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x4b, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1b, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x4b, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x60, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x60, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitpod_v1_environment_automation_proto_rawDescOnce sync.Once
	file_gitpod_v1_environment_automation_proto_rawDescData = file_gitpod_v1_environment_automation_proto_rawDesc
)

func file_gitpod_v1_environment_automation_proto_rawDescGZIP() []byte {
	file_gitpod_v1_environment_automation_proto_rawDescOnce.Do(func() {
		file_gitpod_v1_environment_automation_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitpod_v1_environment_automation_proto_rawDescData)
	})
	return file_gitpod_v1_environment_automation_proto_rawDescData
}

var file_gitpod_v1_environment_automation_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gitpod_v1_environment_automation_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_gitpod_v1_environment_automation_proto_goTypes = []any{
	(ServicePhase)(0),                                    // 0: gitpod.v1.ServicePhase
	(TaskExecutionPhase)(0),                              // 1: gitpod.v1.TaskExecutionPhase
	(*ServiceMetadata)(nil),                              // 2: gitpod.v1.ServiceMetadata
	(*ServiceSpec)(nil),                                  // 3: gitpod.v1.ServiceSpec
	(*ServiceStatus)(nil),                                // 4: gitpod.v1.ServiceStatus
	(*Service)(nil),                                      // 5: gitpod.v1.Service
	(*CreateServiceRequest)(nil),                         // 6: gitpod.v1.CreateServiceRequest
	(*CreateServiceResponse)(nil),                        // 7: gitpod.v1.CreateServiceResponse
	(*GetServiceRequest)(nil),                            // 8: gitpod.v1.GetServiceRequest
	(*GetServiceResponse)(nil),                           // 9: gitpod.v1.GetServiceResponse
	(*ListServicesRequest)(nil),                          // 10: gitpod.v1.ListServicesRequest
	(*ListServicesResponse)(nil),                         // 11: gitpod.v1.ListServicesResponse
	(*UpdateServiceRequest)(nil),                         // 12: gitpod.v1.UpdateServiceRequest
	(*UpdateServiceResponse)(nil),                        // 13: gitpod.v1.UpdateServiceResponse
	(*DeleteServiceRequest)(nil),                         // 14: gitpod.v1.DeleteServiceRequest
	(*DeleteServiceResponse)(nil),                        // 15: gitpod.v1.DeleteServiceResponse
	(*StartServiceRequest)(nil),                          // 16: gitpod.v1.StartServiceRequest
	(*StartServiceResponse)(nil),                         // 17: gitpod.v1.StartServiceResponse
	(*StopServiceRequest)(nil),                           // 18: gitpod.v1.StopServiceRequest
	(*StopServiceResponse)(nil),                          // 19: gitpod.v1.StopServiceResponse
	(*UpsertAutomationsFileRequest)(nil),                 // 20: gitpod.v1.UpsertAutomationsFileRequest
	(*UpsertAutomationsFileResponse)(nil),                // 21: gitpod.v1.UpsertAutomationsFileResponse
	(*AutomationsFile)(nil),                              // 22: gitpod.v1.AutomationsFile
	(*CreateTaskRequest)(nil),                            // 23: gitpod.v1.CreateTaskRequest
	(*CreateTaskResponse)(nil),                           // 24: gitpod.v1.CreateTaskResponse
	(*GetTaskRequest)(nil),                               // 25: gitpod.v1.GetTaskRequest
	(*GetTaskResponse)(nil),                              // 26: gitpod.v1.GetTaskResponse
	(*ListTasksRequest)(nil),                             // 27: gitpod.v1.ListTasksRequest
	(*ListTasksResponse)(nil),                            // 28: gitpod.v1.ListTasksResponse
	(*UpdateTaskRequest)(nil),                            // 29: gitpod.v1.UpdateTaskRequest
	(*UpdateTaskResponse)(nil),                           // 30: gitpod.v1.UpdateTaskResponse
	(*DeleteTaskRequest)(nil),                            // 31: gitpod.v1.DeleteTaskRequest
	(*DeleteTaskResponse)(nil),                           // 32: gitpod.v1.DeleteTaskResponse
	(*StartTaskRequest)(nil),                             // 33: gitpod.v1.StartTaskRequest
	(*StartTaskResponse)(nil),                            // 34: gitpod.v1.StartTaskResponse
	(*ListTaskExecutionsRequest)(nil),                    // 35: gitpod.v1.ListTaskExecutionsRequest
	(*ListTaskExecutionsResponse)(nil),                   // 36: gitpod.v1.ListTaskExecutionsResponse
	(*GetTaskExecutionRequest)(nil),                      // 37: gitpod.v1.GetTaskExecutionRequest
	(*GetTaskExecutionResponse)(nil),                     // 38: gitpod.v1.GetTaskExecutionResponse
	(*StopTaskExecutionRequest)(nil),                     // 39: gitpod.v1.StopTaskExecutionRequest
	(*StopTaskExecutionResponse)(nil),                    // 40: gitpod.v1.StopTaskExecutionResponse
	(*UpdateTaskExecutionStatusRequest)(nil),             // 41: gitpod.v1.UpdateTaskExecutionStatusRequest
	(*UpdateTaskExecutionStatusResponse)(nil),            // 42: gitpod.v1.UpdateTaskExecutionStatusResponse
	(*TaskMetadata)(nil),                                 // 43: gitpod.v1.TaskMetadata
	(*TaskSpec)(nil),                                     // 44: gitpod.v1.TaskSpec
	(*Task)(nil),                                         // 45: gitpod.v1.Task
	(*RunsOn)(nil),                                       // 46: gitpod.v1.RunsOn
	(*TaskExecution)(nil),                                // 47: gitpod.v1.TaskExecution
	(*TaskExecutionMetadata)(nil),                        // 48: gitpod.v1.TaskExecutionMetadata
	(*TaskExecutionSpec)(nil),                            // 49: gitpod.v1.TaskExecutionSpec
	(*TaskExecutionStatus)(nil),                          // 50: gitpod.v1.TaskExecutionStatus
	(*AutomationTrigger)(nil),                            // 51: gitpod.v1.AutomationTrigger
	(*ServiceSpec_Commands)(nil),                         // 52: gitpod.v1.ServiceSpec.Commands
	(*ListServicesRequest_Filter)(nil),                   // 53: gitpod.v1.ListServicesRequest.Filter
	(*UpdateServiceRequest_AutomationTriggerUpdate)(nil), // 54: gitpod.v1.UpdateServiceRequest.AutomationTriggerUpdate
	(*UpdateServiceRequest_ServiceMetadata)(nil),         // 55: gitpod.v1.UpdateServiceRequest.ServiceMetadata
	(*UpdateServiceRequest_ServiceSpec)(nil),             // 56: gitpod.v1.UpdateServiceRequest.ServiceSpec
	(*UpdateServiceRequest_ServiceStatus)(nil),           // 57: gitpod.v1.UpdateServiceRequest.ServiceStatus
	(*UpdateServiceRequest_ServiceSpec_Commands)(nil),    // 58: gitpod.v1.UpdateServiceRequest.ServiceSpec.Commands
	(*AutomationsFile_Service)(nil),                      // 59: gitpod.v1.AutomationsFile.Service
	(*AutomationsFile_Task)(nil),                         // 60: gitpod.v1.AutomationsFile.Task
	nil,                                                  // 61: gitpod.v1.AutomationsFile.ServicesEntry
	nil,                                                  // 62: gitpod.v1.AutomationsFile.TasksEntry
	(*ListTasksRequest_Filter)(nil),                      // 63: gitpod.v1.ListTasksRequest.Filter
	(*UpdateTaskRequest_AutomationTriggerUpdate)(nil),    // 64: gitpod.v1.UpdateTaskRequest.AutomationTriggerUpdate
	(*UpdateTaskRequest_TaskMetadata)(nil),               // 65: gitpod.v1.UpdateTaskRequest.TaskMetadata
	(*UpdateTaskRequest_TaskSpec)(nil),                   // 66: gitpod.v1.UpdateTaskRequest.TaskSpec
	(*ListTaskExecutionsRequest_Filter)(nil),             // 67: gitpod.v1.ListTaskExecutionsRequest.Filter
	(*RunsOn_Docker)(nil),                                // 68: gitpod.v1.RunsOn.Docker
	(*TaskExecutionSpec_Task)(nil),                       // 69: gitpod.v1.TaskExecutionSpec.Task
	(*TaskExecutionSpec_Step)(nil),                       // 70: gitpod.v1.TaskExecutionSpec.Step
	(*TaskExecutionSpec_Group)(nil),                      // 71: gitpod.v1.TaskExecutionSpec.Group
	(*TaskExecutionStatus_Step)(nil),                     // 72: gitpod.v1.TaskExecutionStatus.Step
	(*timestamppb.Timestamp)(nil),                        // 73: google.protobuf.Timestamp
	(*Subject)(nil),                                      // 74: gitpod.v1.Subject
	(*PaginationRequest)(nil),                            // 75: gitpod.v1.PaginationRequest
	(*PaginationResponse)(nil),                           // 76: gitpod.v1.PaginationResponse
}
var file_gitpod_v1_environment_automation_proto_depIdxs = []int32{
	73, // 0: gitpod.v1.ServiceMetadata.created_at:type_name -> google.protobuf.Timestamp
	74, // 1: gitpod.v1.ServiceMetadata.creator:type_name -> gitpod.v1.Subject
	51, // 2: gitpod.v1.ServiceMetadata.triggered_by:type_name -> gitpod.v1.AutomationTrigger
	0,  // 3: gitpod.v1.ServiceSpec.desired_phase:type_name -> gitpod.v1.ServicePhase
	52, // 4: gitpod.v1.ServiceSpec.commands:type_name -> gitpod.v1.ServiceSpec.Commands
	46, // 5: gitpod.v1.ServiceSpec.runs_on:type_name -> gitpod.v1.RunsOn
	0,  // 6: gitpod.v1.ServiceStatus.phase:type_name -> gitpod.v1.ServicePhase
	2,  // 7: gitpod.v1.Service.metadata:type_name -> gitpod.v1.ServiceMetadata
	3,  // 8: gitpod.v1.Service.spec:type_name -> gitpod.v1.ServiceSpec
	4,  // 9: gitpod.v1.Service.status:type_name -> gitpod.v1.ServiceStatus
	2,  // 10: gitpod.v1.CreateServiceRequest.metadata:type_name -> gitpod.v1.ServiceMetadata
	3,  // 11: gitpod.v1.CreateServiceRequest.spec:type_name -> gitpod.v1.ServiceSpec
	5,  // 12: gitpod.v1.CreateServiceResponse.service:type_name -> gitpod.v1.Service
	5,  // 13: gitpod.v1.GetServiceResponse.service:type_name -> gitpod.v1.Service
	75, // 14: gitpod.v1.ListServicesRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	53, // 15: gitpod.v1.ListServicesRequest.filter:type_name -> gitpod.v1.ListServicesRequest.Filter
	76, // 16: gitpod.v1.ListServicesResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	5,  // 17: gitpod.v1.ListServicesResponse.services:type_name -> gitpod.v1.Service
	55, // 18: gitpod.v1.UpdateServiceRequest.metadata:type_name -> gitpod.v1.UpdateServiceRequest.ServiceMetadata
	56, // 19: gitpod.v1.UpdateServiceRequest.spec:type_name -> gitpod.v1.UpdateServiceRequest.ServiceSpec
	57, // 20: gitpod.v1.UpdateServiceRequest.status:type_name -> gitpod.v1.UpdateServiceRequest.ServiceStatus
	22, // 21: gitpod.v1.UpsertAutomationsFileRequest.automations_file:type_name -> gitpod.v1.AutomationsFile
	61, // 22: gitpod.v1.AutomationsFile.services:type_name -> gitpod.v1.AutomationsFile.ServicesEntry
	62, // 23: gitpod.v1.AutomationsFile.tasks:type_name -> gitpod.v1.AutomationsFile.TasksEntry
	43, // 24: gitpod.v1.CreateTaskRequest.metadata:type_name -> gitpod.v1.TaskMetadata
	44, // 25: gitpod.v1.CreateTaskRequest.spec:type_name -> gitpod.v1.TaskSpec
	45, // 26: gitpod.v1.CreateTaskResponse.task:type_name -> gitpod.v1.Task
	45, // 27: gitpod.v1.GetTaskResponse.task:type_name -> gitpod.v1.Task
	75, // 28: gitpod.v1.ListTasksRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	63, // 29: gitpod.v1.ListTasksRequest.filter:type_name -> gitpod.v1.ListTasksRequest.Filter
	76, // 30: gitpod.v1.ListTasksResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	45, // 31: gitpod.v1.ListTasksResponse.tasks:type_name -> gitpod.v1.Task
	65, // 32: gitpod.v1.UpdateTaskRequest.metadata:type_name -> gitpod.v1.UpdateTaskRequest.TaskMetadata
	66, // 33: gitpod.v1.UpdateTaskRequest.spec:type_name -> gitpod.v1.UpdateTaskRequest.TaskSpec
	47, // 34: gitpod.v1.StartTaskResponse.task_execution:type_name -> gitpod.v1.TaskExecution
	75, // 35: gitpod.v1.ListTaskExecutionsRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	67, // 36: gitpod.v1.ListTaskExecutionsRequest.filter:type_name -> gitpod.v1.ListTaskExecutionsRequest.Filter
	76, // 37: gitpod.v1.ListTaskExecutionsResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	47, // 38: gitpod.v1.ListTaskExecutionsResponse.task_executions:type_name -> gitpod.v1.TaskExecution
	47, // 39: gitpod.v1.GetTaskExecutionResponse.task_execution:type_name -> gitpod.v1.TaskExecution
	72, // 40: gitpod.v1.UpdateTaskExecutionStatusRequest.steps:type_name -> gitpod.v1.TaskExecutionStatus.Step
	73, // 41: gitpod.v1.TaskMetadata.created_at:type_name -> google.protobuf.Timestamp
	74, // 42: gitpod.v1.TaskMetadata.creator:type_name -> gitpod.v1.Subject
	51, // 43: gitpod.v1.TaskMetadata.triggered_by:type_name -> gitpod.v1.AutomationTrigger
	46, // 44: gitpod.v1.TaskSpec.runs_on:type_name -> gitpod.v1.RunsOn
	43, // 45: gitpod.v1.Task.metadata:type_name -> gitpod.v1.TaskMetadata
	44, // 46: gitpod.v1.Task.spec:type_name -> gitpod.v1.TaskSpec
	68, // 47: gitpod.v1.RunsOn.docker:type_name -> gitpod.v1.RunsOn.Docker
	48, // 48: gitpod.v1.TaskExecution.metadata:type_name -> gitpod.v1.TaskExecutionMetadata
	49, // 49: gitpod.v1.TaskExecution.spec:type_name -> gitpod.v1.TaskExecutionSpec
	50, // 50: gitpod.v1.TaskExecution.status:type_name -> gitpod.v1.TaskExecutionStatus
	73, // 51: gitpod.v1.TaskExecutionMetadata.created_at:type_name -> google.protobuf.Timestamp
	74, // 52: gitpod.v1.TaskExecutionMetadata.creator:type_name -> gitpod.v1.Subject
	73, // 53: gitpod.v1.TaskExecutionMetadata.started_at:type_name -> google.protobuf.Timestamp
	73, // 54: gitpod.v1.TaskExecutionMetadata.completed_at:type_name -> google.protobuf.Timestamp
	71, // 55: gitpod.v1.TaskExecutionSpec.plan:type_name -> gitpod.v1.TaskExecutionSpec.Group
	1,  // 56: gitpod.v1.TaskExecutionSpec.desired_phase:type_name -> gitpod.v1.TaskExecutionPhase
	1,  // 57: gitpod.v1.TaskExecutionStatus.phase:type_name -> gitpod.v1.TaskExecutionPhase
	72, // 58: gitpod.v1.TaskExecutionStatus.steps:type_name -> gitpod.v1.TaskExecutionStatus.Step
	51, // 59: gitpod.v1.UpdateServiceRequest.AutomationTriggerUpdate.trigger:type_name -> gitpod.v1.AutomationTrigger
	54, // 60: gitpod.v1.UpdateServiceRequest.ServiceMetadata.triggered_by:type_name -> gitpod.v1.UpdateServiceRequest.AutomationTriggerUpdate
	58, // 61: gitpod.v1.UpdateServiceRequest.ServiceSpec.commands:type_name -> gitpod.v1.UpdateServiceRequest.ServiceSpec.Commands
	46, // 62: gitpod.v1.UpdateServiceRequest.ServiceSpec.runs_on:type_name -> gitpod.v1.RunsOn
	0,  // 63: gitpod.v1.UpdateServiceRequest.ServiceStatus.phase:type_name -> gitpod.v1.ServicePhase
	52, // 64: gitpod.v1.AutomationsFile.Service.commands:type_name -> gitpod.v1.ServiceSpec.Commands
	46, // 65: gitpod.v1.AutomationsFile.Service.runs_on:type_name -> gitpod.v1.RunsOn
	46, // 66: gitpod.v1.AutomationsFile.Task.runs_on:type_name -> gitpod.v1.RunsOn
	59, // 67: gitpod.v1.AutomationsFile.ServicesEntry.value:type_name -> gitpod.v1.AutomationsFile.Service
	60, // 68: gitpod.v1.AutomationsFile.TasksEntry.value:type_name -> gitpod.v1.AutomationsFile.Task
	51, // 69: gitpod.v1.UpdateTaskRequest.AutomationTriggerUpdate.trigger:type_name -> gitpod.v1.AutomationTrigger
	64, // 70: gitpod.v1.UpdateTaskRequest.TaskMetadata.triggered_by:type_name -> gitpod.v1.UpdateTaskRequest.AutomationTriggerUpdate
	46, // 71: gitpod.v1.UpdateTaskRequest.TaskSpec.runs_on:type_name -> gitpod.v1.RunsOn
	1,  // 72: gitpod.v1.ListTaskExecutionsRequest.Filter.phases:type_name -> gitpod.v1.TaskExecutionPhase
	44, // 73: gitpod.v1.TaskExecutionSpec.Task.spec:type_name -> gitpod.v1.TaskSpec
	69, // 74: gitpod.v1.TaskExecutionSpec.Step.task:type_name -> gitpod.v1.TaskExecutionSpec.Task
	70, // 75: gitpod.v1.TaskExecutionSpec.Group.steps:type_name -> gitpod.v1.TaskExecutionSpec.Step
	1,  // 76: gitpod.v1.TaskExecutionStatus.Step.phase:type_name -> gitpod.v1.TaskExecutionPhase
	6,  // 77: gitpod.v1.EnvironmentAutomationService.CreateService:input_type -> gitpod.v1.CreateServiceRequest
	8,  // 78: gitpod.v1.EnvironmentAutomationService.GetService:input_type -> gitpod.v1.GetServiceRequest
	10, // 79: gitpod.v1.EnvironmentAutomationService.ListServices:input_type -> gitpod.v1.ListServicesRequest
	12, // 80: gitpod.v1.EnvironmentAutomationService.UpdateService:input_type -> gitpod.v1.UpdateServiceRequest
	14, // 81: gitpod.v1.EnvironmentAutomationService.DeleteService:input_type -> gitpod.v1.DeleteServiceRequest
	16, // 82: gitpod.v1.EnvironmentAutomationService.StartService:input_type -> gitpod.v1.StartServiceRequest
	18, // 83: gitpod.v1.EnvironmentAutomationService.StopService:input_type -> gitpod.v1.StopServiceRequest
	20, // 84: gitpod.v1.EnvironmentAutomationService.UpsertAutomationsFile:input_type -> gitpod.v1.UpsertAutomationsFileRequest
	23, // 85: gitpod.v1.EnvironmentAutomationService.CreateTask:input_type -> gitpod.v1.CreateTaskRequest
	25, // 86: gitpod.v1.EnvironmentAutomationService.GetTask:input_type -> gitpod.v1.GetTaskRequest
	27, // 87: gitpod.v1.EnvironmentAutomationService.ListTasks:input_type -> gitpod.v1.ListTasksRequest
	29, // 88: gitpod.v1.EnvironmentAutomationService.UpdateTask:input_type -> gitpod.v1.UpdateTaskRequest
	31, // 89: gitpod.v1.EnvironmentAutomationService.DeleteTask:input_type -> gitpod.v1.DeleteTaskRequest
	33, // 90: gitpod.v1.EnvironmentAutomationService.StartTask:input_type -> gitpod.v1.StartTaskRequest
	35, // 91: gitpod.v1.EnvironmentAutomationService.ListTaskExecutions:input_type -> gitpod.v1.ListTaskExecutionsRequest
	37, // 92: gitpod.v1.EnvironmentAutomationService.GetTaskExecution:input_type -> gitpod.v1.GetTaskExecutionRequest
	39, // 93: gitpod.v1.EnvironmentAutomationService.StopTaskExecution:input_type -> gitpod.v1.StopTaskExecutionRequest
	41, // 94: gitpod.v1.EnvironmentAutomationService.UpdateTaskExecutionStatus:input_type -> gitpod.v1.UpdateTaskExecutionStatusRequest
	7,  // 95: gitpod.v1.EnvironmentAutomationService.CreateService:output_type -> gitpod.v1.CreateServiceResponse
	9,  // 96: gitpod.v1.EnvironmentAutomationService.GetService:output_type -> gitpod.v1.GetServiceResponse
	11, // 97: gitpod.v1.EnvironmentAutomationService.ListServices:output_type -> gitpod.v1.ListServicesResponse
	13, // 98: gitpod.v1.EnvironmentAutomationService.UpdateService:output_type -> gitpod.v1.UpdateServiceResponse
	15, // 99: gitpod.v1.EnvironmentAutomationService.DeleteService:output_type -> gitpod.v1.DeleteServiceResponse
	17, // 100: gitpod.v1.EnvironmentAutomationService.StartService:output_type -> gitpod.v1.StartServiceResponse
	19, // 101: gitpod.v1.EnvironmentAutomationService.StopService:output_type -> gitpod.v1.StopServiceResponse
	21, // 102: gitpod.v1.EnvironmentAutomationService.UpsertAutomationsFile:output_type -> gitpod.v1.UpsertAutomationsFileResponse
	24, // 103: gitpod.v1.EnvironmentAutomationService.CreateTask:output_type -> gitpod.v1.CreateTaskResponse
	26, // 104: gitpod.v1.EnvironmentAutomationService.GetTask:output_type -> gitpod.v1.GetTaskResponse
	28, // 105: gitpod.v1.EnvironmentAutomationService.ListTasks:output_type -> gitpod.v1.ListTasksResponse
	30, // 106: gitpod.v1.EnvironmentAutomationService.UpdateTask:output_type -> gitpod.v1.UpdateTaskResponse
	32, // 107: gitpod.v1.EnvironmentAutomationService.DeleteTask:output_type -> gitpod.v1.DeleteTaskResponse
	34, // 108: gitpod.v1.EnvironmentAutomationService.StartTask:output_type -> gitpod.v1.StartTaskResponse
	36, // 109: gitpod.v1.EnvironmentAutomationService.ListTaskExecutions:output_type -> gitpod.v1.ListTaskExecutionsResponse
	38, // 110: gitpod.v1.EnvironmentAutomationService.GetTaskExecution:output_type -> gitpod.v1.GetTaskExecutionResponse
	40, // 111: gitpod.v1.EnvironmentAutomationService.StopTaskExecution:output_type -> gitpod.v1.StopTaskExecutionResponse
	42, // 112: gitpod.v1.EnvironmentAutomationService.UpdateTaskExecutionStatus:output_type -> gitpod.v1.UpdateTaskExecutionStatusResponse
	95, // [95:113] is the sub-list for method output_type
	77, // [77:95] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_gitpod_v1_environment_automation_proto_init() }
func file_gitpod_v1_environment_automation_proto_init() {
	if File_gitpod_v1_environment_automation_proto != nil {
		return
	}
	file_gitpod_v1_identity_proto_init()
	file_gitpod_v1_pagination_proto_init()
	file_gitpod_v1_environment_automation_proto_msgTypes[39].OneofWrappers = []any{}
	file_gitpod_v1_environment_automation_proto_msgTypes[44].OneofWrappers = []any{
		(*RunsOn_Docker_)(nil),
	}
	file_gitpod_v1_environment_automation_proto_msgTypes[49].OneofWrappers = []any{
		(*AutomationTrigger_Manual)(nil),
		(*AutomationTrigger_PostEnvironmentStart)(nil),
		(*AutomationTrigger_PostDevcontainerStart)(nil),
	}
	file_gitpod_v1_environment_automation_proto_msgTypes[53].OneofWrappers = []any{}
	file_gitpod_v1_environment_automation_proto_msgTypes[54].OneofWrappers = []any{}
	file_gitpod_v1_environment_automation_proto_msgTypes[55].OneofWrappers = []any{}
	file_gitpod_v1_environment_automation_proto_msgTypes[56].OneofWrappers = []any{}
	file_gitpod_v1_environment_automation_proto_msgTypes[63].OneofWrappers = []any{}
	file_gitpod_v1_environment_automation_proto_msgTypes[64].OneofWrappers = []any{}
	file_gitpod_v1_environment_automation_proto_msgTypes[68].OneofWrappers = []any{
		(*TaskExecutionSpec_Step_Task)(nil),
		(*TaskExecutionSpec_Step_ServiceId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitpod_v1_environment_automation_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitpod_v1_environment_automation_proto_goTypes,
		DependencyIndexes: file_gitpod_v1_environment_automation_proto_depIdxs,
		EnumInfos:         file_gitpod_v1_environment_automation_proto_enumTypes,
		MessageInfos:      file_gitpod_v1_environment_automation_proto_msgTypes,
	}.Build()
	File_gitpod_v1_environment_automation_proto = out.File
	file_gitpod_v1_environment_automation_proto_rawDesc = nil
	file_gitpod_v1_environment_automation_proto_goTypes = nil
	file_gitpod_v1_environment_automation_proto_depIdxs = nil
}
