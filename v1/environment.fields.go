// Code generated by gitpod-log-fields. DO NOT EDIT.

package v1

import (
	logfields "github.com/gitpod-io/flex-go/tools/logfields"
)

func (x *MarkEnvironmentActiveRequest) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(&logfields.Entry{Name: "environment.id", Value: x.EnvironmentId})
	fields.Add(logfields.Extract(x.GetActivitySignal())...)
	return fields
}

func (x *EnvironmentActivitySignal) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(logfields.Extract(x.GetTimestamp())...)
	return fields
}

func (x *MarkEnvironmentActiveResponse) LogFields() logfields.Collection {
	return nil
}

func (x *GetEnvironmentRequest) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(&logfields.Entry{Name: "environment.id", Value: x.EnvironmentId})
	return fields
}

func (x *GetEnvironmentResponse) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(logfields.Extract(x.GetEnvironment())...)
	return fields
}

func (x *ListEnvironmentsRequest) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(logfields.Extract(x.GetPagination())...)
	fields.Add(&logfields.Entry{Name: "organization.id", Value: x.OrganizationId})
	fields.Add(logfields.Extract(x.GetFilter())...)
	return fields
}

func (x *ListEnvironmentsResponse) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(logfields.Extract(x.GetPagination())...)
	return fields
}

func (x *CreateEnvironmentRequest) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(logfields.Extract(x.GetSpec())...)
	return fields
}

func (x *CreateEnvironmentResponse) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(logfields.Extract(x.GetEnvironment())...)
	return fields
}

func (x *CreateEnvironmentFromProjectRequest) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(&logfields.Entry{Name: "project.id", Value: x.ProjectId})
	fields.Add(logfields.Extract(x.GetSpec())...)
	return fields
}

func (x *CreateEnvironmentFromProjectResponse) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(logfields.Extract(x.GetEnvironment())...)
	return fields
}

func (x *CreateEnvironmentPreconditionFailureDetails) LogFields() logfields.Collection {
	return nil
}

func (x *Environment) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(&logfields.Entry{Name: "environment.id", Value: x.Id})
	fields.Add(logfields.Extract(x.GetMetadata())...)
	fields.Add(logfields.Extract(x.GetSpec())...)
	fields.Add(logfields.Extract(x.GetStatus())...)
	return fields
}

func (x *EnvironmentMetadata) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(&logfields.Entry{Name: "organization.id", Value: x.OrganizationId})
	fields.Add(logfields.Extract(x.GetCreator())...)
	fields.Add(logfields.Extract(x.GetCreatedAt())...)
	fields.Add(&logfields.Entry{Name: "runner.id", Value: x.RunnerId})
	fields.Add(logfields.Extract(x.GetLastStartedAt())...)
	return fields
}

func (x *EnvironmentSpec) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(logfields.Extract(x.GetMachine())...)
	fields.Add(logfields.Extract(x.GetContent())...)
	fields.Add(logfields.Extract(x.GetTimeout())...)
	fields.Add(logfields.Extract(x.GetDevcontainer())...)
	fields.Add(logfields.Extract(x.GetAutomationsFile())...)
	return fields
}

func (x *EnvironmentStatus) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(logfields.Extract(x.GetRunnerAck())...)
	fields.Add(logfields.Extract(x.GetEnvironmentUrls())...)
	fields.Add(logfields.Extract(x.GetMachine())...)
	fields.Add(logfields.Extract(x.GetContent())...)
	fields.Add(logfields.Extract(x.GetDevcontainer())...)
	fields.Add(logfields.Extract(x.GetAutomationsFile())...)
	fields.Add(logfields.Extract(x.GetActivitySignal())...)
	return fields
}

func (x *EnvironmentGitStatus) LogFields() logfields.Collection {
	return nil
}

func (x *FileChange) LogFields() logfields.Collection {
	return nil
}

func (x *EnvironmentInitializer) LogFields() logfields.Collection {
	return nil
}

func (x *ContextURLInitializer) LogFields() logfields.Collection {
	return nil
}

func (x *GitInitializer) LogFields() logfields.Collection {
	return nil
}

func (x *StartEnvironmentRequest) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(&logfields.Entry{Name: "environment.id", Value: x.EnvironmentId})
	return fields
}

func (x *StartEnvironmentResponse) LogFields() logfields.Collection {
	return nil
}

func (x *StopEnvironmentRequest) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(&logfields.Entry{Name: "environment.id", Value: x.EnvironmentId})
	return fields
}

func (x *StopEnvironmentResponse) LogFields() logfields.Collection {
	return nil
}

func (x *UpdateEnvironmentRequest) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(&logfields.Entry{Name: "environment.id", Value: x.EnvironmentId})
	fields.Add(logfields.Extract(x.GetMetadata())...)
	fields.Add(logfields.Extract(x.GetSpec())...)
	return fields
}

func (x *UpdateEnvironmentResponse) LogFields() logfields.Collection {
	return nil
}

func (x *DeleteEnvironmentRequest) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(&logfields.Entry{Name: "environment.id", Value: x.EnvironmentId})
	return fields
}

func (x *DeleteEnvironmentResponse) LogFields() logfields.Collection {
	return nil
}

func (x *CreateEnvironmentLogsTokenRequest) LogFields() logfields.Collection {
	if x == nil {
		return nil
	}

	var fields logfields.Collection
	fields.Add(&logfields.Entry{Name: "environment.id", Value: x.EnvironmentId})
	return fields
}

func (x *CreateEnvironmentLogsTokenResponse) LogFields() logfields.Collection {
	return nil
}
