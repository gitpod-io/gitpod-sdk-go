// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gitpod/v1/runner.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RunnerService_CreateRunner_FullMethodName               = "/gitpod.v1.RunnerService/CreateRunner"
	RunnerService_GetRunner_FullMethodName                  = "/gitpod.v1.RunnerService/GetRunner"
	RunnerService_ListRunners_FullMethodName                = "/gitpod.v1.RunnerService/ListRunners"
	RunnerService_UpdateRunner_FullMethodName               = "/gitpod.v1.RunnerService/UpdateRunner"
	RunnerService_DeleteRunner_FullMethodName               = "/gitpod.v1.RunnerService/DeleteRunner"
	RunnerService_CreateRunnerToken_FullMethodName          = "/gitpod.v1.RunnerService/CreateRunnerToken"
	RunnerService_ParseContextURL_FullMethodName            = "/gitpod.v1.RunnerService/ParseContextURL"
	RunnerService_CheckAuthenticationForHost_FullMethodName = "/gitpod.v1.RunnerService/CheckAuthenticationForHost"
	RunnerService_ListRunnerPolicies_FullMethodName         = "/gitpod.v1.RunnerService/ListRunnerPolicies"
	RunnerService_CreateRunnerPolicy_FullMethodName         = "/gitpod.v1.RunnerService/CreateRunnerPolicy"
	RunnerService_UpdateRunnerPolicy_FullMethodName         = "/gitpod.v1.RunnerService/UpdateRunnerPolicy"
	RunnerService_DeleteRunnerPolicy_FullMethodName         = "/gitpod.v1.RunnerService/DeleteRunnerPolicy"
)

// RunnerServiceClient is the client API for RunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerServiceClient interface {
	// CreateRunner creates a new runner with the server. Registrations are very
	// short-lived and must be renewed every 30 seconds. Runners can be registered
	// for an entire organisation or a single user.
	CreateRunner(ctx context.Context, in *CreateRunnerRequest, opts ...grpc.CallOption) (*CreateRunnerResponse, error)
	// GetRunner returns a single runner.
	GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*GetRunnerResponse, error)
	// ListRunners returns all runners registered in the scope.
	ListRunners(ctx context.Context, in *ListRunnersRequest, opts ...grpc.CallOption) (*ListRunnersResponse, error)
	// UpdateRunner updates an environment runner.
	UpdateRunner(ctx context.Context, in *UpdateRunnerRequest, opts ...grpc.CallOption) (*UpdateRunnerResponse, error)
	// DeleteRunner deletes an environment runner.
	DeleteRunner(ctx context.Context, in *DeleteRunnerRequest, opts ...grpc.CallOption) (*DeleteRunnerResponse, error)
	// CreateRunnerToken returns a token that can be used to authenticate as the
	// runner. Use this call to renew an outdated token - this does not expire any
	// previouly issued tokens.
	CreateRunnerToken(ctx context.Context, in *CreateRunnerTokenRequest, opts ...grpc.CallOption) (*CreateRunnerTokenResponse, error)
	// ParseContextURL asks a runner to parse a context URL, and return the parsed result.
	//
	// This call returns
	//   - FAILED_PRECONDITION if the user requires authentication on the runner to access the context URL
	//   - PERMISSION_DENIED if the user is not allowed to access the context URL using the credentials they have
	//   - INVALID_ARGUMENT if the context URL is invalid
	//   - NOT_FOUND if the repository or branch indicated by the context URL does not exist
	ParseContextURL(ctx context.Context, in *ParseContextURLRequest, opts ...grpc.CallOption) (*ParseContextURLResponse, error)
	// CheckAuthenticationForHost asks a runner if the user is authenticated against a particular host, e.g. an SCM system.
	// If not, this function will return a URL that the user should visit to authenticate, or indicate that Personal Access Tokens are supported.
	CheckAuthenticationForHost(ctx context.Context, in *CheckAuthenticationForHostRequest, opts ...grpc.CallOption) (*CheckAuthenticationForHostResponse, error)
	// ListRunnerPolicies lists runner policies.
	ListRunnerPolicies(ctx context.Context, in *ListRunnerPoliciesRequest, opts ...grpc.CallOption) (*ListRunnerPoliciesResponse, error)
	// CreateRunnerPolicy creates a new runner policy.
	CreateRunnerPolicy(ctx context.Context, in *CreateRunnerPolicyRequest, opts ...grpc.CallOption) (*CreateRunnerPolicyResponse, error)
	// UpdateRunnerPolicy an existing runner policy.
	UpdateRunnerPolicy(ctx context.Context, in *UpdateRunnerPolicyRequest, opts ...grpc.CallOption) (*UpdateRunnerPolicyResponse, error)
	// DeleteRunnerPolicy deletes a runner policy.
	DeleteRunnerPolicy(ctx context.Context, in *DeleteRunnerPolicyRequest, opts ...grpc.CallOption) (*DeleteRunnerPolicyResponse, error)
}

type runnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerServiceClient(cc grpc.ClientConnInterface) RunnerServiceClient {
	return &runnerServiceClient{cc}
}

func (c *runnerServiceClient) CreateRunner(ctx context.Context, in *CreateRunnerRequest, opts ...grpc.CallOption) (*CreateRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRunnerResponse)
	err := c.cc.Invoke(ctx, RunnerService_CreateRunner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*GetRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRunnerResponse)
	err := c.cc.Invoke(ctx, RunnerService_GetRunner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) ListRunners(ctx context.Context, in *ListRunnersRequest, opts ...grpc.CallOption) (*ListRunnersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRunnersResponse)
	err := c.cc.Invoke(ctx, RunnerService_ListRunners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) UpdateRunner(ctx context.Context, in *UpdateRunnerRequest, opts ...grpc.CallOption) (*UpdateRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRunnerResponse)
	err := c.cc.Invoke(ctx, RunnerService_UpdateRunner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) DeleteRunner(ctx context.Context, in *DeleteRunnerRequest, opts ...grpc.CallOption) (*DeleteRunnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRunnerResponse)
	err := c.cc.Invoke(ctx, RunnerService_DeleteRunner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) CreateRunnerToken(ctx context.Context, in *CreateRunnerTokenRequest, opts ...grpc.CallOption) (*CreateRunnerTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRunnerTokenResponse)
	err := c.cc.Invoke(ctx, RunnerService_CreateRunnerToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) ParseContextURL(ctx context.Context, in *ParseContextURLRequest, opts ...grpc.CallOption) (*ParseContextURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseContextURLResponse)
	err := c.cc.Invoke(ctx, RunnerService_ParseContextURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) CheckAuthenticationForHost(ctx context.Context, in *CheckAuthenticationForHostRequest, opts ...grpc.CallOption) (*CheckAuthenticationForHostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAuthenticationForHostResponse)
	err := c.cc.Invoke(ctx, RunnerService_CheckAuthenticationForHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) ListRunnerPolicies(ctx context.Context, in *ListRunnerPoliciesRequest, opts ...grpc.CallOption) (*ListRunnerPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRunnerPoliciesResponse)
	err := c.cc.Invoke(ctx, RunnerService_ListRunnerPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) CreateRunnerPolicy(ctx context.Context, in *CreateRunnerPolicyRequest, opts ...grpc.CallOption) (*CreateRunnerPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRunnerPolicyResponse)
	err := c.cc.Invoke(ctx, RunnerService_CreateRunnerPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) UpdateRunnerPolicy(ctx context.Context, in *UpdateRunnerPolicyRequest, opts ...grpc.CallOption) (*UpdateRunnerPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRunnerPolicyResponse)
	err := c.cc.Invoke(ctx, RunnerService_UpdateRunnerPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) DeleteRunnerPolicy(ctx context.Context, in *DeleteRunnerPolicyRequest, opts ...grpc.CallOption) (*DeleteRunnerPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRunnerPolicyResponse)
	err := c.cc.Invoke(ctx, RunnerService_DeleteRunnerPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServiceServer is the server API for RunnerService service.
// All implementations must embed UnimplementedRunnerServiceServer
// for forward compatibility.
type RunnerServiceServer interface {
	// CreateRunner creates a new runner with the server. Registrations are very
	// short-lived and must be renewed every 30 seconds. Runners can be registered
	// for an entire organisation or a single user.
	CreateRunner(context.Context, *CreateRunnerRequest) (*CreateRunnerResponse, error)
	// GetRunner returns a single runner.
	GetRunner(context.Context, *GetRunnerRequest) (*GetRunnerResponse, error)
	// ListRunners returns all runners registered in the scope.
	ListRunners(context.Context, *ListRunnersRequest) (*ListRunnersResponse, error)
	// UpdateRunner updates an environment runner.
	UpdateRunner(context.Context, *UpdateRunnerRequest) (*UpdateRunnerResponse, error)
	// DeleteRunner deletes an environment runner.
	DeleteRunner(context.Context, *DeleteRunnerRequest) (*DeleteRunnerResponse, error)
	// CreateRunnerToken returns a token that can be used to authenticate as the
	// runner. Use this call to renew an outdated token - this does not expire any
	// previouly issued tokens.
	CreateRunnerToken(context.Context, *CreateRunnerTokenRequest) (*CreateRunnerTokenResponse, error)
	// ParseContextURL asks a runner to parse a context URL, and return the parsed result.
	//
	// This call returns
	//   - FAILED_PRECONDITION if the user requires authentication on the runner to access the context URL
	//   - PERMISSION_DENIED if the user is not allowed to access the context URL using the credentials they have
	//   - INVALID_ARGUMENT if the context URL is invalid
	//   - NOT_FOUND if the repository or branch indicated by the context URL does not exist
	ParseContextURL(context.Context, *ParseContextURLRequest) (*ParseContextURLResponse, error)
	// CheckAuthenticationForHost asks a runner if the user is authenticated against a particular host, e.g. an SCM system.
	// If not, this function will return a URL that the user should visit to authenticate, or indicate that Personal Access Tokens are supported.
	CheckAuthenticationForHost(context.Context, *CheckAuthenticationForHostRequest) (*CheckAuthenticationForHostResponse, error)
	// ListRunnerPolicies lists runner policies.
	ListRunnerPolicies(context.Context, *ListRunnerPoliciesRequest) (*ListRunnerPoliciesResponse, error)
	// CreateRunnerPolicy creates a new runner policy.
	CreateRunnerPolicy(context.Context, *CreateRunnerPolicyRequest) (*CreateRunnerPolicyResponse, error)
	// UpdateRunnerPolicy an existing runner policy.
	UpdateRunnerPolicy(context.Context, *UpdateRunnerPolicyRequest) (*UpdateRunnerPolicyResponse, error)
	// DeleteRunnerPolicy deletes a runner policy.
	DeleteRunnerPolicy(context.Context, *DeleteRunnerPolicyRequest) (*DeleteRunnerPolicyResponse, error)
	mustEmbedUnimplementedRunnerServiceServer()
}

// UnimplementedRunnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRunnerServiceServer struct{}

func (UnimplementedRunnerServiceServer) CreateRunner(context.Context, *CreateRunnerRequest) (*CreateRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunner not implemented")
}
func (UnimplementedRunnerServiceServer) GetRunner(context.Context, *GetRunnerRequest) (*GetRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (UnimplementedRunnerServiceServer) ListRunners(context.Context, *ListRunnersRequest) (*ListRunnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunners not implemented")
}
func (UnimplementedRunnerServiceServer) UpdateRunner(context.Context, *UpdateRunnerRequest) (*UpdateRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunner not implemented")
}
func (UnimplementedRunnerServiceServer) DeleteRunner(context.Context, *DeleteRunnerRequest) (*DeleteRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRunner not implemented")
}
func (UnimplementedRunnerServiceServer) CreateRunnerToken(context.Context, *CreateRunnerTokenRequest) (*CreateRunnerTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunnerToken not implemented")
}
func (UnimplementedRunnerServiceServer) ParseContextURL(context.Context, *ParseContextURLRequest) (*ParseContextURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseContextURL not implemented")
}
func (UnimplementedRunnerServiceServer) CheckAuthenticationForHost(context.Context, *CheckAuthenticationForHostRequest) (*CheckAuthenticationForHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthenticationForHost not implemented")
}
func (UnimplementedRunnerServiceServer) ListRunnerPolicies(context.Context, *ListRunnerPoliciesRequest) (*ListRunnerPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunnerPolicies not implemented")
}
func (UnimplementedRunnerServiceServer) CreateRunnerPolicy(context.Context, *CreateRunnerPolicyRequest) (*CreateRunnerPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunnerPolicy not implemented")
}
func (UnimplementedRunnerServiceServer) UpdateRunnerPolicy(context.Context, *UpdateRunnerPolicyRequest) (*UpdateRunnerPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunnerPolicy not implemented")
}
func (UnimplementedRunnerServiceServer) DeleteRunnerPolicy(context.Context, *DeleteRunnerPolicyRequest) (*DeleteRunnerPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRunnerPolicy not implemented")
}
func (UnimplementedRunnerServiceServer) mustEmbedUnimplementedRunnerServiceServer() {}
func (UnimplementedRunnerServiceServer) testEmbeddedByValue()                       {}

// UnsafeRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerServiceServer will
// result in compilation errors.
type UnsafeRunnerServiceServer interface {
	mustEmbedUnimplementedRunnerServiceServer()
}

func RegisterRunnerServiceServer(s grpc.ServiceRegistrar, srv RunnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedRunnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RunnerService_ServiceDesc, srv)
}

func _RunnerService_CreateRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).CreateRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_CreateRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).CreateRunner(ctx, req.(*CreateRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_GetRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).GetRunner(ctx, req.(*GetRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_ListRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).ListRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_ListRunners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).ListRunners(ctx, req.(*ListRunnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_UpdateRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).UpdateRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_UpdateRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).UpdateRunner(ctx, req.(*UpdateRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_DeleteRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).DeleteRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_DeleteRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).DeleteRunner(ctx, req.(*DeleteRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_CreateRunnerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunnerTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).CreateRunnerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_CreateRunnerToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).CreateRunnerToken(ctx, req.(*CreateRunnerTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_ParseContextURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseContextURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).ParseContextURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_ParseContextURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).ParseContextURL(ctx, req.(*ParseContextURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_CheckAuthenticationForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthenticationForHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).CheckAuthenticationForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_CheckAuthenticationForHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).CheckAuthenticationForHost(ctx, req.(*CheckAuthenticationForHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_ListRunnerPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnerPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).ListRunnerPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_ListRunnerPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).ListRunnerPolicies(ctx, req.(*ListRunnerPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_CreateRunnerPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunnerPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).CreateRunnerPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_CreateRunnerPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).CreateRunnerPolicy(ctx, req.(*CreateRunnerPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_UpdateRunnerPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunnerPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).UpdateRunnerPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_UpdateRunnerPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).UpdateRunnerPolicy(ctx, req.(*UpdateRunnerPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_DeleteRunnerPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRunnerPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).DeleteRunnerPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_DeleteRunnerPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).DeleteRunnerPolicy(ctx, req.(*DeleteRunnerPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunnerService_ServiceDesc is the grpc.ServiceDesc for RunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitpod.v1.RunnerService",
	HandlerType: (*RunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRunner",
			Handler:    _RunnerService_CreateRunner_Handler,
		},
		{
			MethodName: "GetRunner",
			Handler:    _RunnerService_GetRunner_Handler,
		},
		{
			MethodName: "ListRunners",
			Handler:    _RunnerService_ListRunners_Handler,
		},
		{
			MethodName: "UpdateRunner",
			Handler:    _RunnerService_UpdateRunner_Handler,
		},
		{
			MethodName: "DeleteRunner",
			Handler:    _RunnerService_DeleteRunner_Handler,
		},
		{
			MethodName: "CreateRunnerToken",
			Handler:    _RunnerService_CreateRunnerToken_Handler,
		},
		{
			MethodName: "ParseContextURL",
			Handler:    _RunnerService_ParseContextURL_Handler,
		},
		{
			MethodName: "CheckAuthenticationForHost",
			Handler:    _RunnerService_CheckAuthenticationForHost_Handler,
		},
		{
			MethodName: "ListRunnerPolicies",
			Handler:    _RunnerService_ListRunnerPolicies_Handler,
		},
		{
			MethodName: "CreateRunnerPolicy",
			Handler:    _RunnerService_CreateRunnerPolicy_Handler,
		},
		{
			MethodName: "UpdateRunnerPolicy",
			Handler:    _RunnerService_UpdateRunnerPolicy_Handler,
		},
		{
			MethodName: "DeleteRunnerPolicy",
			Handler:    _RunnerService_DeleteRunnerPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitpod/v1/runner.proto",
}
