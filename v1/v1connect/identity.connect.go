// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/identity.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-sdk-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IdentityServiceName is the fully-qualified name of the IdentityService service.
	IdentityServiceName = "gitpod.v1.IdentityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IdentityServiceGetIDTokenProcedure is the fully-qualified name of the IdentityService's
	// GetIDToken RPC.
	IdentityServiceGetIDTokenProcedure = "/gitpod.v1.IdentityService/GetIDToken"
	// IdentityServiceGetAuthenticatedIdentityProcedure is the fully-qualified name of the
	// IdentityService's GetAuthenticatedIdentity RPC.
	IdentityServiceGetAuthenticatedIdentityProcedure = "/gitpod.v1.IdentityService/GetAuthenticatedIdentity"
	// IdentityServiceExchangeTokenProcedure is the fully-qualified name of the IdentityService's
	// ExchangeToken RPC.
	IdentityServiceExchangeTokenProcedure = "/gitpod.v1.IdentityService/ExchangeToken"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	identityServiceServiceDescriptor                        = v1.File_gitpod_v1_identity_proto.Services().ByName("IdentityService")
	identityServiceGetIDTokenMethodDescriptor               = identityServiceServiceDescriptor.Methods().ByName("GetIDToken")
	identityServiceGetAuthenticatedIdentityMethodDescriptor = identityServiceServiceDescriptor.Methods().ByName("GetAuthenticatedIdentity")
	identityServiceExchangeTokenMethodDescriptor            = identityServiceServiceDescriptor.Methods().ByName("ExchangeToken")
)

// IdentityServiceClient is a client for the gitpod.v1.IdentityService service.
type IdentityServiceClient interface {
	// GetIDToken returns a token that can be used to authenticate the user against the other services.
	GetIDToken(context.Context, *connect.Request[v1.GetIDTokenRequest]) (*connect.Response[v1.GetIDTokenResponse], error)
	// GetAuthenticatedIdentity allows to retrieve the current identity.
	GetAuthenticatedIdentity(context.Context, *connect.Request[v1.GetAuthenticatedIdentityRequest]) (*connect.Response[v1.GetAuthenticatedIdentityResponse], error)
	// ExchangeToken trades an exchange token for a new access token.
	ExchangeToken(context.Context, *connect.Request[v1.ExchangeTokenRequest]) (*connect.Response[v1.ExchangeTokenResponse], error)
}

// NewIdentityServiceClient constructs a client for the gitpod.v1.IdentityService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIdentityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IdentityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &identityServiceClient{
		getIDToken: connect.NewClient[v1.GetIDTokenRequest, v1.GetIDTokenResponse](
			httpClient,
			baseURL+IdentityServiceGetIDTokenProcedure,
			connect.WithSchema(identityServiceGetIDTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAuthenticatedIdentity: connect.NewClient[v1.GetAuthenticatedIdentityRequest, v1.GetAuthenticatedIdentityResponse](
			httpClient,
			baseURL+IdentityServiceGetAuthenticatedIdentityProcedure,
			connect.WithSchema(identityServiceGetAuthenticatedIdentityMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		exchangeToken: connect.NewClient[v1.ExchangeTokenRequest, v1.ExchangeTokenResponse](
			httpClient,
			baseURL+IdentityServiceExchangeTokenProcedure,
			connect.WithSchema(identityServiceExchangeTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// identityServiceClient implements IdentityServiceClient.
type identityServiceClient struct {
	getIDToken               *connect.Client[v1.GetIDTokenRequest, v1.GetIDTokenResponse]
	getAuthenticatedIdentity *connect.Client[v1.GetAuthenticatedIdentityRequest, v1.GetAuthenticatedIdentityResponse]
	exchangeToken            *connect.Client[v1.ExchangeTokenRequest, v1.ExchangeTokenResponse]
}

// GetIDToken calls gitpod.v1.IdentityService.GetIDToken.
func (c *identityServiceClient) GetIDToken(ctx context.Context, req *connect.Request[v1.GetIDTokenRequest]) (*connect.Response[v1.GetIDTokenResponse], error) {
	return c.getIDToken.CallUnary(ctx, req)
}

// GetAuthenticatedIdentity calls gitpod.v1.IdentityService.GetAuthenticatedIdentity.
func (c *identityServiceClient) GetAuthenticatedIdentity(ctx context.Context, req *connect.Request[v1.GetAuthenticatedIdentityRequest]) (*connect.Response[v1.GetAuthenticatedIdentityResponse], error) {
	return c.getAuthenticatedIdentity.CallUnary(ctx, req)
}

// ExchangeToken calls gitpod.v1.IdentityService.ExchangeToken.
func (c *identityServiceClient) ExchangeToken(ctx context.Context, req *connect.Request[v1.ExchangeTokenRequest]) (*connect.Response[v1.ExchangeTokenResponse], error) {
	return c.exchangeToken.CallUnary(ctx, req)
}

// IdentityServiceHandler is an implementation of the gitpod.v1.IdentityService service.
type IdentityServiceHandler interface {
	// GetIDToken returns a token that can be used to authenticate the user against the other services.
	GetIDToken(context.Context, *connect.Request[v1.GetIDTokenRequest]) (*connect.Response[v1.GetIDTokenResponse], error)
	// GetAuthenticatedIdentity allows to retrieve the current identity.
	GetAuthenticatedIdentity(context.Context, *connect.Request[v1.GetAuthenticatedIdentityRequest]) (*connect.Response[v1.GetAuthenticatedIdentityResponse], error)
	// ExchangeToken trades an exchange token for a new access token.
	ExchangeToken(context.Context, *connect.Request[v1.ExchangeTokenRequest]) (*connect.Response[v1.ExchangeTokenResponse], error)
}

// NewIdentityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIdentityServiceHandler(svc IdentityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	identityServiceGetIDTokenHandler := connect.NewUnaryHandler(
		IdentityServiceGetIDTokenProcedure,
		svc.GetIDToken,
		connect.WithSchema(identityServiceGetIDTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceGetAuthenticatedIdentityHandler := connect.NewUnaryHandler(
		IdentityServiceGetAuthenticatedIdentityProcedure,
		svc.GetAuthenticatedIdentity,
		connect.WithSchema(identityServiceGetAuthenticatedIdentityMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceExchangeTokenHandler := connect.NewUnaryHandler(
		IdentityServiceExchangeTokenProcedure,
		svc.ExchangeToken,
		connect.WithSchema(identityServiceExchangeTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.IdentityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IdentityServiceGetIDTokenProcedure:
			identityServiceGetIDTokenHandler.ServeHTTP(w, r)
		case IdentityServiceGetAuthenticatedIdentityProcedure:
			identityServiceGetAuthenticatedIdentityHandler.ServeHTTP(w, r)
		case IdentityServiceExchangeTokenProcedure:
			identityServiceExchangeTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIdentityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIdentityServiceHandler struct{}

func (UnimplementedIdentityServiceHandler) GetIDToken(context.Context, *connect.Request[v1.GetIDTokenRequest]) (*connect.Response[v1.GetIDTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.IdentityService.GetIDToken is not implemented"))
}

func (UnimplementedIdentityServiceHandler) GetAuthenticatedIdentity(context.Context, *connect.Request[v1.GetAuthenticatedIdentityRequest]) (*connect.Response[v1.GetAuthenticatedIdentityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.IdentityService.GetAuthenticatedIdentity is not implemented"))
}

func (UnimplementedIdentityServiceHandler) ExchangeToken(context.Context, *connect.Request[v1.ExchangeTokenRequest]) (*connect.Response[v1.ExchangeTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.IdentityService.ExchangeToken is not implemented"))
}
