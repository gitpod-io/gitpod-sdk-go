// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/secret.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-api-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SecretServiceName is the fully-qualified name of the SecretService service.
	SecretServiceName = "gitpod.v1.SecretService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SecretServiceCreateSecretProcedure is the fully-qualified name of the SecretService's
	// CreateSecret RPC.
	SecretServiceCreateSecretProcedure = "/gitpod.v1.SecretService/CreateSecret"
	// SecretServiceUpdateSecretValueProcedure is the fully-qualified name of the SecretService's
	// UpdateSecretValue RPC.
	SecretServiceUpdateSecretValueProcedure = "/gitpod.v1.SecretService/UpdateSecretValue"
	// SecretServiceListSecretsProcedure is the fully-qualified name of the SecretService's ListSecrets
	// RPC.
	SecretServiceListSecretsProcedure = "/gitpod.v1.SecretService/ListSecrets"
	// SecretServiceDeleteSecretProcedure is the fully-qualified name of the SecretService's
	// DeleteSecret RPC.
	SecretServiceDeleteSecretProcedure = "/gitpod.v1.SecretService/DeleteSecret"
	// SecretServiceGetSecretValueProcedure is the fully-qualified name of the SecretService's
	// GetSecretValue RPC.
	SecretServiceGetSecretValueProcedure = "/gitpod.v1.SecretService/GetSecretValue"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	secretServiceServiceDescriptor                 = v1.File_gitpod_v1_secret_proto.Services().ByName("SecretService")
	secretServiceCreateSecretMethodDescriptor      = secretServiceServiceDescriptor.Methods().ByName("CreateSecret")
	secretServiceUpdateSecretValueMethodDescriptor = secretServiceServiceDescriptor.Methods().ByName("UpdateSecretValue")
	secretServiceListSecretsMethodDescriptor       = secretServiceServiceDescriptor.Methods().ByName("ListSecrets")
	secretServiceDeleteSecretMethodDescriptor      = secretServiceServiceDescriptor.Methods().ByName("DeleteSecret")
	secretServiceGetSecretValueMethodDescriptor    = secretServiceServiceDescriptor.Methods().ByName("GetSecretValue")
)

// SecretServiceClient is a client for the gitpod.v1.SecretService service.
type SecretServiceClient interface {
	// CreateSecret creates a new secret.
	CreateSecret(context.Context, *connect.Request[v1.CreateSecretRequest]) (*connect.Response[v1.CreateSecretResponse], error)
	// UpdateSecretValue updates the value of a secret.
	UpdateSecretValue(context.Context, *connect.Request[v1.UpdateSecretValueRequest]) (*connect.Response[v1.UpdateSecretValueResponse], error)
	// ListSecrets lists secrets.
	ListSecrets(context.Context, *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error)
	// DeleteSecret deletes a secret.
	DeleteSecret(context.Context, *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error)
	// GetSecretValue retrieves the value of a secret
	// Only Environments can perform this operation, and only for secrets specified on the EnvironmentSpec.
	GetSecretValue(context.Context, *connect.Request[v1.GetSecretValueRequest]) (*connect.Response[v1.GetSecretValueResponse], error)
}

// NewSecretServiceClient constructs a client for the gitpod.v1.SecretService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSecretServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SecretServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &secretServiceClient{
		createSecret: connect.NewClient[v1.CreateSecretRequest, v1.CreateSecretResponse](
			httpClient,
			baseURL+SecretServiceCreateSecretProcedure,
			connect.WithSchema(secretServiceCreateSecretMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateSecretValue: connect.NewClient[v1.UpdateSecretValueRequest, v1.UpdateSecretValueResponse](
			httpClient,
			baseURL+SecretServiceUpdateSecretValueProcedure,
			connect.WithSchema(secretServiceUpdateSecretValueMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSecrets: connect.NewClient[v1.ListSecretsRequest, v1.ListSecretsResponse](
			httpClient,
			baseURL+SecretServiceListSecretsProcedure,
			connect.WithSchema(secretServiceListSecretsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteSecret: connect.NewClient[v1.DeleteSecretRequest, v1.DeleteSecretResponse](
			httpClient,
			baseURL+SecretServiceDeleteSecretProcedure,
			connect.WithSchema(secretServiceDeleteSecretMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSecretValue: connect.NewClient[v1.GetSecretValueRequest, v1.GetSecretValueResponse](
			httpClient,
			baseURL+SecretServiceGetSecretValueProcedure,
			connect.WithSchema(secretServiceGetSecretValueMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// secretServiceClient implements SecretServiceClient.
type secretServiceClient struct {
	createSecret      *connect.Client[v1.CreateSecretRequest, v1.CreateSecretResponse]
	updateSecretValue *connect.Client[v1.UpdateSecretValueRequest, v1.UpdateSecretValueResponse]
	listSecrets       *connect.Client[v1.ListSecretsRequest, v1.ListSecretsResponse]
	deleteSecret      *connect.Client[v1.DeleteSecretRequest, v1.DeleteSecretResponse]
	getSecretValue    *connect.Client[v1.GetSecretValueRequest, v1.GetSecretValueResponse]
}

// CreateSecret calls gitpod.v1.SecretService.CreateSecret.
func (c *secretServiceClient) CreateSecret(ctx context.Context, req *connect.Request[v1.CreateSecretRequest]) (*connect.Response[v1.CreateSecretResponse], error) {
	return c.createSecret.CallUnary(ctx, req)
}

// UpdateSecretValue calls gitpod.v1.SecretService.UpdateSecretValue.
func (c *secretServiceClient) UpdateSecretValue(ctx context.Context, req *connect.Request[v1.UpdateSecretValueRequest]) (*connect.Response[v1.UpdateSecretValueResponse], error) {
	return c.updateSecretValue.CallUnary(ctx, req)
}

// ListSecrets calls gitpod.v1.SecretService.ListSecrets.
func (c *secretServiceClient) ListSecrets(ctx context.Context, req *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error) {
	return c.listSecrets.CallUnary(ctx, req)
}

// DeleteSecret calls gitpod.v1.SecretService.DeleteSecret.
func (c *secretServiceClient) DeleteSecret(ctx context.Context, req *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error) {
	return c.deleteSecret.CallUnary(ctx, req)
}

// GetSecretValue calls gitpod.v1.SecretService.GetSecretValue.
func (c *secretServiceClient) GetSecretValue(ctx context.Context, req *connect.Request[v1.GetSecretValueRequest]) (*connect.Response[v1.GetSecretValueResponse], error) {
	return c.getSecretValue.CallUnary(ctx, req)
}

// SecretServiceHandler is an implementation of the gitpod.v1.SecretService service.
type SecretServiceHandler interface {
	// CreateSecret creates a new secret.
	CreateSecret(context.Context, *connect.Request[v1.CreateSecretRequest]) (*connect.Response[v1.CreateSecretResponse], error)
	// UpdateSecretValue updates the value of a secret.
	UpdateSecretValue(context.Context, *connect.Request[v1.UpdateSecretValueRequest]) (*connect.Response[v1.UpdateSecretValueResponse], error)
	// ListSecrets lists secrets.
	ListSecrets(context.Context, *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error)
	// DeleteSecret deletes a secret.
	DeleteSecret(context.Context, *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error)
	// GetSecretValue retrieves the value of a secret
	// Only Environments can perform this operation, and only for secrets specified on the EnvironmentSpec.
	GetSecretValue(context.Context, *connect.Request[v1.GetSecretValueRequest]) (*connect.Response[v1.GetSecretValueResponse], error)
}

// NewSecretServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSecretServiceHandler(svc SecretServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	secretServiceCreateSecretHandler := connect.NewUnaryHandler(
		SecretServiceCreateSecretProcedure,
		svc.CreateSecret,
		connect.WithSchema(secretServiceCreateSecretMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	secretServiceUpdateSecretValueHandler := connect.NewUnaryHandler(
		SecretServiceUpdateSecretValueProcedure,
		svc.UpdateSecretValue,
		connect.WithSchema(secretServiceUpdateSecretValueMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	secretServiceListSecretsHandler := connect.NewUnaryHandler(
		SecretServiceListSecretsProcedure,
		svc.ListSecrets,
		connect.WithSchema(secretServiceListSecretsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	secretServiceDeleteSecretHandler := connect.NewUnaryHandler(
		SecretServiceDeleteSecretProcedure,
		svc.DeleteSecret,
		connect.WithSchema(secretServiceDeleteSecretMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	secretServiceGetSecretValueHandler := connect.NewUnaryHandler(
		SecretServiceGetSecretValueProcedure,
		svc.GetSecretValue,
		connect.WithSchema(secretServiceGetSecretValueMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.SecretService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SecretServiceCreateSecretProcedure:
			secretServiceCreateSecretHandler.ServeHTTP(w, r)
		case SecretServiceUpdateSecretValueProcedure:
			secretServiceUpdateSecretValueHandler.ServeHTTP(w, r)
		case SecretServiceListSecretsProcedure:
			secretServiceListSecretsHandler.ServeHTTP(w, r)
		case SecretServiceDeleteSecretProcedure:
			secretServiceDeleteSecretHandler.ServeHTTP(w, r)
		case SecretServiceGetSecretValueProcedure:
			secretServiceGetSecretValueHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSecretServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSecretServiceHandler struct{}

func (UnimplementedSecretServiceHandler) CreateSecret(context.Context, *connect.Request[v1.CreateSecretRequest]) (*connect.Response[v1.CreateSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.SecretService.CreateSecret is not implemented"))
}

func (UnimplementedSecretServiceHandler) UpdateSecretValue(context.Context, *connect.Request[v1.UpdateSecretValueRequest]) (*connect.Response[v1.UpdateSecretValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.SecretService.UpdateSecretValue is not implemented"))
}

func (UnimplementedSecretServiceHandler) ListSecrets(context.Context, *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.SecretService.ListSecrets is not implemented"))
}

func (UnimplementedSecretServiceHandler) DeleteSecret(context.Context, *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.SecretService.DeleteSecret is not implemented"))
}

func (UnimplementedSecretServiceHandler) GetSecretValue(context.Context, *connect.Request[v1.GetSecretValueRequest]) (*connect.Response[v1.GetSecretValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.SecretService.GetSecretValue is not implemented"))
}
