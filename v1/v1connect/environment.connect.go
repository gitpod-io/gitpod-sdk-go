// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/environment.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnvironmentServiceName is the fully-qualified name of the EnvironmentService service.
	EnvironmentServiceName = "gitpod.v1.EnvironmentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnvironmentServiceGetEnvironmentProcedure is the fully-qualified name of the EnvironmentService's
	// GetEnvironment RPC.
	EnvironmentServiceGetEnvironmentProcedure = "/gitpod.v1.EnvironmentService/GetEnvironment"
	// EnvironmentServiceListEnvironmentsProcedure is the fully-qualified name of the
	// EnvironmentService's ListEnvironments RPC.
	EnvironmentServiceListEnvironmentsProcedure = "/gitpod.v1.EnvironmentService/ListEnvironments"
	// EnvironmentServiceListEnvironmentClassesProcedure is the fully-qualified name of the
	// EnvironmentService's ListEnvironmentClasses RPC.
	EnvironmentServiceListEnvironmentClassesProcedure = "/gitpod.v1.EnvironmentService/ListEnvironmentClasses"
	// EnvironmentServiceCreateEnvironmentProcedure is the fully-qualified name of the
	// EnvironmentService's CreateEnvironment RPC.
	EnvironmentServiceCreateEnvironmentProcedure = "/gitpod.v1.EnvironmentService/CreateEnvironment"
	// EnvironmentServiceCreateEnvironmentFromProjectProcedure is the fully-qualified name of the
	// EnvironmentService's CreateEnvironmentFromProject RPC.
	EnvironmentServiceCreateEnvironmentFromProjectProcedure = "/gitpod.v1.EnvironmentService/CreateEnvironmentFromProject"
	// EnvironmentServiceStartEnvironmentProcedure is the fully-qualified name of the
	// EnvironmentService's StartEnvironment RPC.
	EnvironmentServiceStartEnvironmentProcedure = "/gitpod.v1.EnvironmentService/StartEnvironment"
	// EnvironmentServiceStopEnvironmentProcedure is the fully-qualified name of the
	// EnvironmentService's StopEnvironment RPC.
	EnvironmentServiceStopEnvironmentProcedure = "/gitpod.v1.EnvironmentService/StopEnvironment"
	// EnvironmentServiceUpdateEnvironmentProcedure is the fully-qualified name of the
	// EnvironmentService's UpdateEnvironment RPC.
	EnvironmentServiceUpdateEnvironmentProcedure = "/gitpod.v1.EnvironmentService/UpdateEnvironment"
	// EnvironmentServiceDeleteEnvironmentProcedure is the fully-qualified name of the
	// EnvironmentService's DeleteEnvironment RPC.
	EnvironmentServiceDeleteEnvironmentProcedure = "/gitpod.v1.EnvironmentService/DeleteEnvironment"
	// EnvironmentServiceCreateEnvironmentLogsTokenProcedure is the fully-qualified name of the
	// EnvironmentService's CreateEnvironmentLogsToken RPC.
	EnvironmentServiceCreateEnvironmentLogsTokenProcedure = "/gitpod.v1.EnvironmentService/CreateEnvironmentLogsToken"
	// EnvironmentServiceMarkEnvironmentActiveProcedure is the fully-qualified name of the
	// EnvironmentService's MarkEnvironmentActive RPC.
	EnvironmentServiceMarkEnvironmentActiveProcedure = "/gitpod.v1.EnvironmentService/MarkEnvironmentActive"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	environmentServiceServiceDescriptor                            = v1.File_gitpod_v1_environment_proto.Services().ByName("EnvironmentService")
	environmentServiceGetEnvironmentMethodDescriptor               = environmentServiceServiceDescriptor.Methods().ByName("GetEnvironment")
	environmentServiceListEnvironmentsMethodDescriptor             = environmentServiceServiceDescriptor.Methods().ByName("ListEnvironments")
	environmentServiceListEnvironmentClassesMethodDescriptor       = environmentServiceServiceDescriptor.Methods().ByName("ListEnvironmentClasses")
	environmentServiceCreateEnvironmentMethodDescriptor            = environmentServiceServiceDescriptor.Methods().ByName("CreateEnvironment")
	environmentServiceCreateEnvironmentFromProjectMethodDescriptor = environmentServiceServiceDescriptor.Methods().ByName("CreateEnvironmentFromProject")
	environmentServiceStartEnvironmentMethodDescriptor             = environmentServiceServiceDescriptor.Methods().ByName("StartEnvironment")
	environmentServiceStopEnvironmentMethodDescriptor              = environmentServiceServiceDescriptor.Methods().ByName("StopEnvironment")
	environmentServiceUpdateEnvironmentMethodDescriptor            = environmentServiceServiceDescriptor.Methods().ByName("UpdateEnvironment")
	environmentServiceDeleteEnvironmentMethodDescriptor            = environmentServiceServiceDescriptor.Methods().ByName("DeleteEnvironment")
	environmentServiceCreateEnvironmentLogsTokenMethodDescriptor   = environmentServiceServiceDescriptor.Methods().ByName("CreateEnvironmentLogsToken")
	environmentServiceMarkEnvironmentActiveMethodDescriptor        = environmentServiceServiceDescriptor.Methods().ByName("MarkEnvironmentActive")
)

// EnvironmentServiceClient is a client for the gitpod.v1.EnvironmentService service.
type EnvironmentServiceClient interface {
	// GetEnvironment returns a single environment.
	//
	// +return NOT_FOUND User does not have access to an environment with the given
	// ID +return NOT_FOUND Environment does not exist
	GetEnvironment(context.Context, *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.GetEnvironmentResponse], error)
	// ListEnvironments returns a list of environments that match the query.
	ListEnvironments(context.Context, *connect.Request[v1.ListEnvironmentsRequest]) (*connect.Response[v1.ListEnvironmentsResponse], error)
	// ListEnvironmentClasses returns the list of environment classes with runner details a user is able to use based on the
	// query
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ListEnvironmentClasses(context.Context, *connect.Request[v1.ListEnvironmentClassesRequest]) (*connect.Response[v1.ListEnvironmentClassesResponse], error)
	// CreateEnvironment creates a new environment and starts it.
	CreateEnvironment(context.Context, *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error)
	// CreateAbdStartEnvironmentFromProject creates a new environment from a project and starts it.
	CreateEnvironmentFromProject(context.Context, *connect.Request[v1.CreateEnvironmentFromProjectRequest]) (*connect.Response[v1.CreateEnvironmentFromProjectResponse], error)
	// StartEnvironment starts an environment. This function is idempotent, i.e. if
	// the environment is already running no error is returned.
	StartEnvironment(context.Context, *connect.Request[v1.StartEnvironmentRequest]) (*connect.Response[v1.StartEnvironmentResponse], error)
	// StopEnvironment stops a running environment.
	StopEnvironment(context.Context, *connect.Request[v1.StopEnvironmentRequest]) (*connect.Response[v1.StopEnvironmentResponse], error)
	// UpdateEnvironment updates the environment partially.
	UpdateEnvironment(context.Context, *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error)
	// DeleteEnvironment deletes an environment.
	// When the environment is running, it will be stopped as well.
	// Deleted environments cannot be started again.
	DeleteEnvironment(context.Context, *connect.Request[v1.DeleteEnvironmentRequest]) (*connect.Response[v1.DeleteEnvironmentResponse], error)
	// CreateEnvironmentLogsToken creates a token that can be used to access the logs of an environment.
	CreateEnvironmentLogsToken(context.Context, *connect.Request[v1.CreateEnvironmentLogsTokenRequest]) (*connect.Response[v1.CreateEnvironmentLogsTokenResponse], error)
	// MarkEnvironmentActive allows tools to signal activity for an environment.
	MarkEnvironmentActive(context.Context, *connect.Request[v1.MarkEnvironmentActiveRequest]) (*connect.Response[v1.MarkEnvironmentActiveResponse], error)
}

// NewEnvironmentServiceClient constructs a client for the gitpod.v1.EnvironmentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnvironmentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnvironmentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &environmentServiceClient{
		getEnvironment: connect.NewClient[v1.GetEnvironmentRequest, v1.GetEnvironmentResponse](
			httpClient,
			baseURL+EnvironmentServiceGetEnvironmentProcedure,
			connect.WithSchema(environmentServiceGetEnvironmentMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listEnvironments: connect.NewClient[v1.ListEnvironmentsRequest, v1.ListEnvironmentsResponse](
			httpClient,
			baseURL+EnvironmentServiceListEnvironmentsProcedure,
			connect.WithSchema(environmentServiceListEnvironmentsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listEnvironmentClasses: connect.NewClient[v1.ListEnvironmentClassesRequest, v1.ListEnvironmentClassesResponse](
			httpClient,
			baseURL+EnvironmentServiceListEnvironmentClassesProcedure,
			connect.WithSchema(environmentServiceListEnvironmentClassesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createEnvironment: connect.NewClient[v1.CreateEnvironmentRequest, v1.CreateEnvironmentResponse](
			httpClient,
			baseURL+EnvironmentServiceCreateEnvironmentProcedure,
			connect.WithSchema(environmentServiceCreateEnvironmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createEnvironmentFromProject: connect.NewClient[v1.CreateEnvironmentFromProjectRequest, v1.CreateEnvironmentFromProjectResponse](
			httpClient,
			baseURL+EnvironmentServiceCreateEnvironmentFromProjectProcedure,
			connect.WithSchema(environmentServiceCreateEnvironmentFromProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startEnvironment: connect.NewClient[v1.StartEnvironmentRequest, v1.StartEnvironmentResponse](
			httpClient,
			baseURL+EnvironmentServiceStartEnvironmentProcedure,
			connect.WithSchema(environmentServiceStartEnvironmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopEnvironment: connect.NewClient[v1.StopEnvironmentRequest, v1.StopEnvironmentResponse](
			httpClient,
			baseURL+EnvironmentServiceStopEnvironmentProcedure,
			connect.WithSchema(environmentServiceStopEnvironmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateEnvironment: connect.NewClient[v1.UpdateEnvironmentRequest, v1.UpdateEnvironmentResponse](
			httpClient,
			baseURL+EnvironmentServiceUpdateEnvironmentProcedure,
			connect.WithSchema(environmentServiceUpdateEnvironmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteEnvironment: connect.NewClient[v1.DeleteEnvironmentRequest, v1.DeleteEnvironmentResponse](
			httpClient,
			baseURL+EnvironmentServiceDeleteEnvironmentProcedure,
			connect.WithSchema(environmentServiceDeleteEnvironmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createEnvironmentLogsToken: connect.NewClient[v1.CreateEnvironmentLogsTokenRequest, v1.CreateEnvironmentLogsTokenResponse](
			httpClient,
			baseURL+EnvironmentServiceCreateEnvironmentLogsTokenProcedure,
			connect.WithSchema(environmentServiceCreateEnvironmentLogsTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		markEnvironmentActive: connect.NewClient[v1.MarkEnvironmentActiveRequest, v1.MarkEnvironmentActiveResponse](
			httpClient,
			baseURL+EnvironmentServiceMarkEnvironmentActiveProcedure,
			connect.WithSchema(environmentServiceMarkEnvironmentActiveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// environmentServiceClient implements EnvironmentServiceClient.
type environmentServiceClient struct {
	getEnvironment               *connect.Client[v1.GetEnvironmentRequest, v1.GetEnvironmentResponse]
	listEnvironments             *connect.Client[v1.ListEnvironmentsRequest, v1.ListEnvironmentsResponse]
	listEnvironmentClasses       *connect.Client[v1.ListEnvironmentClassesRequest, v1.ListEnvironmentClassesResponse]
	createEnvironment            *connect.Client[v1.CreateEnvironmentRequest, v1.CreateEnvironmentResponse]
	createEnvironmentFromProject *connect.Client[v1.CreateEnvironmentFromProjectRequest, v1.CreateEnvironmentFromProjectResponse]
	startEnvironment             *connect.Client[v1.StartEnvironmentRequest, v1.StartEnvironmentResponse]
	stopEnvironment              *connect.Client[v1.StopEnvironmentRequest, v1.StopEnvironmentResponse]
	updateEnvironment            *connect.Client[v1.UpdateEnvironmentRequest, v1.UpdateEnvironmentResponse]
	deleteEnvironment            *connect.Client[v1.DeleteEnvironmentRequest, v1.DeleteEnvironmentResponse]
	createEnvironmentLogsToken   *connect.Client[v1.CreateEnvironmentLogsTokenRequest, v1.CreateEnvironmentLogsTokenResponse]
	markEnvironmentActive        *connect.Client[v1.MarkEnvironmentActiveRequest, v1.MarkEnvironmentActiveResponse]
}

// GetEnvironment calls gitpod.v1.EnvironmentService.GetEnvironment.
func (c *environmentServiceClient) GetEnvironment(ctx context.Context, req *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.GetEnvironmentResponse], error) {
	return c.getEnvironment.CallUnary(ctx, req)
}

// ListEnvironments calls gitpod.v1.EnvironmentService.ListEnvironments.
func (c *environmentServiceClient) ListEnvironments(ctx context.Context, req *connect.Request[v1.ListEnvironmentsRequest]) (*connect.Response[v1.ListEnvironmentsResponse], error) {
	return c.listEnvironments.CallUnary(ctx, req)
}

// ListEnvironmentClasses calls gitpod.v1.EnvironmentService.ListEnvironmentClasses.
func (c *environmentServiceClient) ListEnvironmentClasses(ctx context.Context, req *connect.Request[v1.ListEnvironmentClassesRequest]) (*connect.Response[v1.ListEnvironmentClassesResponse], error) {
	return c.listEnvironmentClasses.CallUnary(ctx, req)
}

// CreateEnvironment calls gitpod.v1.EnvironmentService.CreateEnvironment.
func (c *environmentServiceClient) CreateEnvironment(ctx context.Context, req *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error) {
	return c.createEnvironment.CallUnary(ctx, req)
}

// CreateEnvironmentFromProject calls gitpod.v1.EnvironmentService.CreateEnvironmentFromProject.
func (c *environmentServiceClient) CreateEnvironmentFromProject(ctx context.Context, req *connect.Request[v1.CreateEnvironmentFromProjectRequest]) (*connect.Response[v1.CreateEnvironmentFromProjectResponse], error) {
	return c.createEnvironmentFromProject.CallUnary(ctx, req)
}

// StartEnvironment calls gitpod.v1.EnvironmentService.StartEnvironment.
func (c *environmentServiceClient) StartEnvironment(ctx context.Context, req *connect.Request[v1.StartEnvironmentRequest]) (*connect.Response[v1.StartEnvironmentResponse], error) {
	return c.startEnvironment.CallUnary(ctx, req)
}

// StopEnvironment calls gitpod.v1.EnvironmentService.StopEnvironment.
func (c *environmentServiceClient) StopEnvironment(ctx context.Context, req *connect.Request[v1.StopEnvironmentRequest]) (*connect.Response[v1.StopEnvironmentResponse], error) {
	return c.stopEnvironment.CallUnary(ctx, req)
}

// UpdateEnvironment calls gitpod.v1.EnvironmentService.UpdateEnvironment.
func (c *environmentServiceClient) UpdateEnvironment(ctx context.Context, req *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error) {
	return c.updateEnvironment.CallUnary(ctx, req)
}

// DeleteEnvironment calls gitpod.v1.EnvironmentService.DeleteEnvironment.
func (c *environmentServiceClient) DeleteEnvironment(ctx context.Context, req *connect.Request[v1.DeleteEnvironmentRequest]) (*connect.Response[v1.DeleteEnvironmentResponse], error) {
	return c.deleteEnvironment.CallUnary(ctx, req)
}

// CreateEnvironmentLogsToken calls gitpod.v1.EnvironmentService.CreateEnvironmentLogsToken.
func (c *environmentServiceClient) CreateEnvironmentLogsToken(ctx context.Context, req *connect.Request[v1.CreateEnvironmentLogsTokenRequest]) (*connect.Response[v1.CreateEnvironmentLogsTokenResponse], error) {
	return c.createEnvironmentLogsToken.CallUnary(ctx, req)
}

// MarkEnvironmentActive calls gitpod.v1.EnvironmentService.MarkEnvironmentActive.
func (c *environmentServiceClient) MarkEnvironmentActive(ctx context.Context, req *connect.Request[v1.MarkEnvironmentActiveRequest]) (*connect.Response[v1.MarkEnvironmentActiveResponse], error) {
	return c.markEnvironmentActive.CallUnary(ctx, req)
}

// EnvironmentServiceHandler is an implementation of the gitpod.v1.EnvironmentService service.
type EnvironmentServiceHandler interface {
	// GetEnvironment returns a single environment.
	//
	// +return NOT_FOUND User does not have access to an environment with the given
	// ID +return NOT_FOUND Environment does not exist
	GetEnvironment(context.Context, *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.GetEnvironmentResponse], error)
	// ListEnvironments returns a list of environments that match the query.
	ListEnvironments(context.Context, *connect.Request[v1.ListEnvironmentsRequest]) (*connect.Response[v1.ListEnvironmentsResponse], error)
	// ListEnvironmentClasses returns the list of environment classes with runner details a user is able to use based on the
	// query
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ListEnvironmentClasses(context.Context, *connect.Request[v1.ListEnvironmentClassesRequest]) (*connect.Response[v1.ListEnvironmentClassesResponse], error)
	// CreateEnvironment creates a new environment and starts it.
	CreateEnvironment(context.Context, *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error)
	// CreateAbdStartEnvironmentFromProject creates a new environment from a project and starts it.
	CreateEnvironmentFromProject(context.Context, *connect.Request[v1.CreateEnvironmentFromProjectRequest]) (*connect.Response[v1.CreateEnvironmentFromProjectResponse], error)
	// StartEnvironment starts an environment. This function is idempotent, i.e. if
	// the environment is already running no error is returned.
	StartEnvironment(context.Context, *connect.Request[v1.StartEnvironmentRequest]) (*connect.Response[v1.StartEnvironmentResponse], error)
	// StopEnvironment stops a running environment.
	StopEnvironment(context.Context, *connect.Request[v1.StopEnvironmentRequest]) (*connect.Response[v1.StopEnvironmentResponse], error)
	// UpdateEnvironment updates the environment partially.
	UpdateEnvironment(context.Context, *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error)
	// DeleteEnvironment deletes an environment.
	// When the environment is running, it will be stopped as well.
	// Deleted environments cannot be started again.
	DeleteEnvironment(context.Context, *connect.Request[v1.DeleteEnvironmentRequest]) (*connect.Response[v1.DeleteEnvironmentResponse], error)
	// CreateEnvironmentLogsToken creates a token that can be used to access the logs of an environment.
	CreateEnvironmentLogsToken(context.Context, *connect.Request[v1.CreateEnvironmentLogsTokenRequest]) (*connect.Response[v1.CreateEnvironmentLogsTokenResponse], error)
	// MarkEnvironmentActive allows tools to signal activity for an environment.
	MarkEnvironmentActive(context.Context, *connect.Request[v1.MarkEnvironmentActiveRequest]) (*connect.Response[v1.MarkEnvironmentActiveResponse], error)
}

// NewEnvironmentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnvironmentServiceHandler(svc EnvironmentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	environmentServiceGetEnvironmentHandler := connect.NewUnaryHandler(
		EnvironmentServiceGetEnvironmentProcedure,
		svc.GetEnvironment,
		connect.WithSchema(environmentServiceGetEnvironmentMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceListEnvironmentsHandler := connect.NewUnaryHandler(
		EnvironmentServiceListEnvironmentsProcedure,
		svc.ListEnvironments,
		connect.WithSchema(environmentServiceListEnvironmentsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceListEnvironmentClassesHandler := connect.NewUnaryHandler(
		EnvironmentServiceListEnvironmentClassesProcedure,
		svc.ListEnvironmentClasses,
		connect.WithSchema(environmentServiceListEnvironmentClassesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceCreateEnvironmentHandler := connect.NewUnaryHandler(
		EnvironmentServiceCreateEnvironmentProcedure,
		svc.CreateEnvironment,
		connect.WithSchema(environmentServiceCreateEnvironmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceCreateEnvironmentFromProjectHandler := connect.NewUnaryHandler(
		EnvironmentServiceCreateEnvironmentFromProjectProcedure,
		svc.CreateEnvironmentFromProject,
		connect.WithSchema(environmentServiceCreateEnvironmentFromProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceStartEnvironmentHandler := connect.NewUnaryHandler(
		EnvironmentServiceStartEnvironmentProcedure,
		svc.StartEnvironment,
		connect.WithSchema(environmentServiceStartEnvironmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceStopEnvironmentHandler := connect.NewUnaryHandler(
		EnvironmentServiceStopEnvironmentProcedure,
		svc.StopEnvironment,
		connect.WithSchema(environmentServiceStopEnvironmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceUpdateEnvironmentHandler := connect.NewUnaryHandler(
		EnvironmentServiceUpdateEnvironmentProcedure,
		svc.UpdateEnvironment,
		connect.WithSchema(environmentServiceUpdateEnvironmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceDeleteEnvironmentHandler := connect.NewUnaryHandler(
		EnvironmentServiceDeleteEnvironmentProcedure,
		svc.DeleteEnvironment,
		connect.WithSchema(environmentServiceDeleteEnvironmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceCreateEnvironmentLogsTokenHandler := connect.NewUnaryHandler(
		EnvironmentServiceCreateEnvironmentLogsTokenProcedure,
		svc.CreateEnvironmentLogsToken,
		connect.WithSchema(environmentServiceCreateEnvironmentLogsTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceMarkEnvironmentActiveHandler := connect.NewUnaryHandler(
		EnvironmentServiceMarkEnvironmentActiveProcedure,
		svc.MarkEnvironmentActive,
		connect.WithSchema(environmentServiceMarkEnvironmentActiveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.EnvironmentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnvironmentServiceGetEnvironmentProcedure:
			environmentServiceGetEnvironmentHandler.ServeHTTP(w, r)
		case EnvironmentServiceListEnvironmentsProcedure:
			environmentServiceListEnvironmentsHandler.ServeHTTP(w, r)
		case EnvironmentServiceListEnvironmentClassesProcedure:
			environmentServiceListEnvironmentClassesHandler.ServeHTTP(w, r)
		case EnvironmentServiceCreateEnvironmentProcedure:
			environmentServiceCreateEnvironmentHandler.ServeHTTP(w, r)
		case EnvironmentServiceCreateEnvironmentFromProjectProcedure:
			environmentServiceCreateEnvironmentFromProjectHandler.ServeHTTP(w, r)
		case EnvironmentServiceStartEnvironmentProcedure:
			environmentServiceStartEnvironmentHandler.ServeHTTP(w, r)
		case EnvironmentServiceStopEnvironmentProcedure:
			environmentServiceStopEnvironmentHandler.ServeHTTP(w, r)
		case EnvironmentServiceUpdateEnvironmentProcedure:
			environmentServiceUpdateEnvironmentHandler.ServeHTTP(w, r)
		case EnvironmentServiceDeleteEnvironmentProcedure:
			environmentServiceDeleteEnvironmentHandler.ServeHTTP(w, r)
		case EnvironmentServiceCreateEnvironmentLogsTokenProcedure:
			environmentServiceCreateEnvironmentLogsTokenHandler.ServeHTTP(w, r)
		case EnvironmentServiceMarkEnvironmentActiveProcedure:
			environmentServiceMarkEnvironmentActiveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnvironmentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnvironmentServiceHandler struct{}

func (UnimplementedEnvironmentServiceHandler) GetEnvironment(context.Context, *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.GetEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentService.GetEnvironment is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) ListEnvironments(context.Context, *connect.Request[v1.ListEnvironmentsRequest]) (*connect.Response[v1.ListEnvironmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentService.ListEnvironments is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) ListEnvironmentClasses(context.Context, *connect.Request[v1.ListEnvironmentClassesRequest]) (*connect.Response[v1.ListEnvironmentClassesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentService.ListEnvironmentClasses is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) CreateEnvironment(context.Context, *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentService.CreateEnvironment is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) CreateEnvironmentFromProject(context.Context, *connect.Request[v1.CreateEnvironmentFromProjectRequest]) (*connect.Response[v1.CreateEnvironmentFromProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentService.CreateEnvironmentFromProject is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) StartEnvironment(context.Context, *connect.Request[v1.StartEnvironmentRequest]) (*connect.Response[v1.StartEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentService.StartEnvironment is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) StopEnvironment(context.Context, *connect.Request[v1.StopEnvironmentRequest]) (*connect.Response[v1.StopEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentService.StopEnvironment is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) UpdateEnvironment(context.Context, *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentService.UpdateEnvironment is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) DeleteEnvironment(context.Context, *connect.Request[v1.DeleteEnvironmentRequest]) (*connect.Response[v1.DeleteEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentService.DeleteEnvironment is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) CreateEnvironmentLogsToken(context.Context, *connect.Request[v1.CreateEnvironmentLogsTokenRequest]) (*connect.Response[v1.CreateEnvironmentLogsTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentService.CreateEnvironmentLogsToken is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) MarkEnvironmentActive(context.Context, *connect.Request[v1.MarkEnvironmentActiveRequest]) (*connect.Response[v1.MarkEnvironmentActiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentService.MarkEnvironmentActive is not implemented"))
}
