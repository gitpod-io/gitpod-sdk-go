// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/runner.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RunnerServiceName is the fully-qualified name of the RunnerService service.
	RunnerServiceName = "gitpod.v1.RunnerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RunnerServiceCreateRunnerProcedure is the fully-qualified name of the RunnerService's
	// CreateRunner RPC.
	RunnerServiceCreateRunnerProcedure = "/gitpod.v1.RunnerService/CreateRunner"
	// RunnerServiceGetRunnerProcedure is the fully-qualified name of the RunnerService's GetRunner RPC.
	RunnerServiceGetRunnerProcedure = "/gitpod.v1.RunnerService/GetRunner"
	// RunnerServiceListRunnersProcedure is the fully-qualified name of the RunnerService's ListRunners
	// RPC.
	RunnerServiceListRunnersProcedure = "/gitpod.v1.RunnerService/ListRunners"
	// RunnerServiceUpdateRunnerProcedure is the fully-qualified name of the RunnerService's
	// UpdateRunner RPC.
	RunnerServiceUpdateRunnerProcedure = "/gitpod.v1.RunnerService/UpdateRunner"
	// RunnerServiceDeleteRunnerProcedure is the fully-qualified name of the RunnerService's
	// DeleteRunner RPC.
	RunnerServiceDeleteRunnerProcedure = "/gitpod.v1.RunnerService/DeleteRunner"
	// RunnerServiceCreateRunnerTokenProcedure is the fully-qualified name of the RunnerService's
	// CreateRunnerToken RPC.
	RunnerServiceCreateRunnerTokenProcedure = "/gitpod.v1.RunnerService/CreateRunnerToken"
	// RunnerServiceParseContextURLProcedure is the fully-qualified name of the RunnerService's
	// ParseContextURL RPC.
	RunnerServiceParseContextURLProcedure = "/gitpod.v1.RunnerService/ParseContextURL"
	// RunnerServiceCheckAuthenticationForHostProcedure is the fully-qualified name of the
	// RunnerService's CheckAuthenticationForHost RPC.
	RunnerServiceCheckAuthenticationForHostProcedure = "/gitpod.v1.RunnerService/CheckAuthenticationForHost"
	// RunnerServiceListRunnerPoliciesProcedure is the fully-qualified name of the RunnerService's
	// ListRunnerPolicies RPC.
	RunnerServiceListRunnerPoliciesProcedure = "/gitpod.v1.RunnerService/ListRunnerPolicies"
	// RunnerServiceCreateRunnerPolicyProcedure is the fully-qualified name of the RunnerService's
	// CreateRunnerPolicy RPC.
	RunnerServiceCreateRunnerPolicyProcedure = "/gitpod.v1.RunnerService/CreateRunnerPolicy"
	// RunnerServiceUpdateRunnerPolicyProcedure is the fully-qualified name of the RunnerService's
	// UpdateRunnerPolicy RPC.
	RunnerServiceUpdateRunnerPolicyProcedure = "/gitpod.v1.RunnerService/UpdateRunnerPolicy"
	// RunnerServiceDeleteRunnerPolicyProcedure is the fully-qualified name of the RunnerService's
	// DeleteRunnerPolicy RPC.
	RunnerServiceDeleteRunnerPolicyProcedure = "/gitpod.v1.RunnerService/DeleteRunnerPolicy"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	runnerServiceServiceDescriptor                          = v1.File_gitpod_v1_runner_proto.Services().ByName("RunnerService")
	runnerServiceCreateRunnerMethodDescriptor               = runnerServiceServiceDescriptor.Methods().ByName("CreateRunner")
	runnerServiceGetRunnerMethodDescriptor                  = runnerServiceServiceDescriptor.Methods().ByName("GetRunner")
	runnerServiceListRunnersMethodDescriptor                = runnerServiceServiceDescriptor.Methods().ByName("ListRunners")
	runnerServiceUpdateRunnerMethodDescriptor               = runnerServiceServiceDescriptor.Methods().ByName("UpdateRunner")
	runnerServiceDeleteRunnerMethodDescriptor               = runnerServiceServiceDescriptor.Methods().ByName("DeleteRunner")
	runnerServiceCreateRunnerTokenMethodDescriptor          = runnerServiceServiceDescriptor.Methods().ByName("CreateRunnerToken")
	runnerServiceParseContextURLMethodDescriptor            = runnerServiceServiceDescriptor.Methods().ByName("ParseContextURL")
	runnerServiceCheckAuthenticationForHostMethodDescriptor = runnerServiceServiceDescriptor.Methods().ByName("CheckAuthenticationForHost")
	runnerServiceListRunnerPoliciesMethodDescriptor         = runnerServiceServiceDescriptor.Methods().ByName("ListRunnerPolicies")
	runnerServiceCreateRunnerPolicyMethodDescriptor         = runnerServiceServiceDescriptor.Methods().ByName("CreateRunnerPolicy")
	runnerServiceUpdateRunnerPolicyMethodDescriptor         = runnerServiceServiceDescriptor.Methods().ByName("UpdateRunnerPolicy")
	runnerServiceDeleteRunnerPolicyMethodDescriptor         = runnerServiceServiceDescriptor.Methods().ByName("DeleteRunnerPolicy")
)

// RunnerServiceClient is a client for the gitpod.v1.RunnerService service.
type RunnerServiceClient interface {
	// CreateRunner creates a new runner with the server. Registrations are very
	// short-lived and must be renewed every 30 seconds. Runners can be registered
	// for an entire organisation or a single user.
	CreateRunner(context.Context, *connect.Request[v1.CreateRunnerRequest]) (*connect.Response[v1.CreateRunnerResponse], error)
	// GetRunner returns a single runner.
	GetRunner(context.Context, *connect.Request[v1.GetRunnerRequest]) (*connect.Response[v1.GetRunnerResponse], error)
	// ListRunners returns all runners registered in the scope.
	ListRunners(context.Context, *connect.Request[v1.ListRunnersRequest]) (*connect.Response[v1.ListRunnersResponse], error)
	// UpdateRunner updates an environment runner.
	UpdateRunner(context.Context, *connect.Request[v1.UpdateRunnerRequest]) (*connect.Response[v1.UpdateRunnerResponse], error)
	// DeleteRunner deletes an environment runner.
	DeleteRunner(context.Context, *connect.Request[v1.DeleteRunnerRequest]) (*connect.Response[v1.DeleteRunnerResponse], error)
	// CreateRunnerToken returns a token that can be used to authenticate as the
	// runner. Use this call to renew an outdated token - this does not expire any
	// previouly issued tokens.
	CreateRunnerToken(context.Context, *connect.Request[v1.CreateRunnerTokenRequest]) (*connect.Response[v1.CreateRunnerTokenResponse], error)
	// ParseContextURL asks a runner to parse a context URL, and return the parsed result.
	//
	// This call returns
	//   - FAILED_PRECONDITION if the user requires authentication on the runner to access the context URL
	//   - PERMISSION_DENIED if the user is not allowed to access the context URL using the credentials they have
	//   - INVALID_ARGUMENT if the context URL is invalid
	//   - NOT_FOUND if the repository or branch indicated by the context URL does not exist
	ParseContextURL(context.Context, *connect.Request[v1.ParseContextURLRequest]) (*connect.Response[v1.ParseContextURLResponse], error)
	// CheckAuthenticationForHost asks a runner if the user is authenticated against a particular host, e.g. an SCM system.
	// If not, this function will return a URL that the user should visit to authenticate, or indicate that Personal Access Tokens are supported.
	CheckAuthenticationForHost(context.Context, *connect.Request[v1.CheckAuthenticationForHostRequest]) (*connect.Response[v1.CheckAuthenticationForHostResponse], error)
	// ListRunnerPolicies lists runner policies.
	ListRunnerPolicies(context.Context, *connect.Request[v1.ListRunnerPoliciesRequest]) (*connect.Response[v1.ListRunnerPoliciesResponse], error)
	// CreateRunnerPolicy creates a new runner policy.
	CreateRunnerPolicy(context.Context, *connect.Request[v1.CreateRunnerPolicyRequest]) (*connect.Response[v1.CreateRunnerPolicyResponse], error)
	// UpdateRunnerPolicy an existing runner policy.
	UpdateRunnerPolicy(context.Context, *connect.Request[v1.UpdateRunnerPolicyRequest]) (*connect.Response[v1.UpdateRunnerPolicyResponse], error)
	// DeleteRunnerPolicy deletes a runner policy.
	DeleteRunnerPolicy(context.Context, *connect.Request[v1.DeleteRunnerPolicyRequest]) (*connect.Response[v1.DeleteRunnerPolicyResponse], error)
}

// NewRunnerServiceClient constructs a client for the gitpod.v1.RunnerService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRunnerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RunnerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runnerServiceClient{
		createRunner: connect.NewClient[v1.CreateRunnerRequest, v1.CreateRunnerResponse](
			httpClient,
			baseURL+RunnerServiceCreateRunnerProcedure,
			connect.WithSchema(runnerServiceCreateRunnerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRunner: connect.NewClient[v1.GetRunnerRequest, v1.GetRunnerResponse](
			httpClient,
			baseURL+RunnerServiceGetRunnerProcedure,
			connect.WithSchema(runnerServiceGetRunnerMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listRunners: connect.NewClient[v1.ListRunnersRequest, v1.ListRunnersResponse](
			httpClient,
			baseURL+RunnerServiceListRunnersProcedure,
			connect.WithSchema(runnerServiceListRunnersMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateRunner: connect.NewClient[v1.UpdateRunnerRequest, v1.UpdateRunnerResponse](
			httpClient,
			baseURL+RunnerServiceUpdateRunnerProcedure,
			connect.WithSchema(runnerServiceUpdateRunnerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRunner: connect.NewClient[v1.DeleteRunnerRequest, v1.DeleteRunnerResponse](
			httpClient,
			baseURL+RunnerServiceDeleteRunnerProcedure,
			connect.WithSchema(runnerServiceDeleteRunnerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRunnerToken: connect.NewClient[v1.CreateRunnerTokenRequest, v1.CreateRunnerTokenResponse](
			httpClient,
			baseURL+RunnerServiceCreateRunnerTokenProcedure,
			connect.WithSchema(runnerServiceCreateRunnerTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		parseContextURL: connect.NewClient[v1.ParseContextURLRequest, v1.ParseContextURLResponse](
			httpClient,
			baseURL+RunnerServiceParseContextURLProcedure,
			connect.WithSchema(runnerServiceParseContextURLMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkAuthenticationForHost: connect.NewClient[v1.CheckAuthenticationForHostRequest, v1.CheckAuthenticationForHostResponse](
			httpClient,
			baseURL+RunnerServiceCheckAuthenticationForHostProcedure,
			connect.WithSchema(runnerServiceCheckAuthenticationForHostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRunnerPolicies: connect.NewClient[v1.ListRunnerPoliciesRequest, v1.ListRunnerPoliciesResponse](
			httpClient,
			baseURL+RunnerServiceListRunnerPoliciesProcedure,
			connect.WithSchema(runnerServiceListRunnerPoliciesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createRunnerPolicy: connect.NewClient[v1.CreateRunnerPolicyRequest, v1.CreateRunnerPolicyResponse](
			httpClient,
			baseURL+RunnerServiceCreateRunnerPolicyProcedure,
			connect.WithSchema(runnerServiceCreateRunnerPolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRunnerPolicy: connect.NewClient[v1.UpdateRunnerPolicyRequest, v1.UpdateRunnerPolicyResponse](
			httpClient,
			baseURL+RunnerServiceUpdateRunnerPolicyProcedure,
			connect.WithSchema(runnerServiceUpdateRunnerPolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRunnerPolicy: connect.NewClient[v1.DeleteRunnerPolicyRequest, v1.DeleteRunnerPolicyResponse](
			httpClient,
			baseURL+RunnerServiceDeleteRunnerPolicyProcedure,
			connect.WithSchema(runnerServiceDeleteRunnerPolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// runnerServiceClient implements RunnerServiceClient.
type runnerServiceClient struct {
	createRunner               *connect.Client[v1.CreateRunnerRequest, v1.CreateRunnerResponse]
	getRunner                  *connect.Client[v1.GetRunnerRequest, v1.GetRunnerResponse]
	listRunners                *connect.Client[v1.ListRunnersRequest, v1.ListRunnersResponse]
	updateRunner               *connect.Client[v1.UpdateRunnerRequest, v1.UpdateRunnerResponse]
	deleteRunner               *connect.Client[v1.DeleteRunnerRequest, v1.DeleteRunnerResponse]
	createRunnerToken          *connect.Client[v1.CreateRunnerTokenRequest, v1.CreateRunnerTokenResponse]
	parseContextURL            *connect.Client[v1.ParseContextURLRequest, v1.ParseContextURLResponse]
	checkAuthenticationForHost *connect.Client[v1.CheckAuthenticationForHostRequest, v1.CheckAuthenticationForHostResponse]
	listRunnerPolicies         *connect.Client[v1.ListRunnerPoliciesRequest, v1.ListRunnerPoliciesResponse]
	createRunnerPolicy         *connect.Client[v1.CreateRunnerPolicyRequest, v1.CreateRunnerPolicyResponse]
	updateRunnerPolicy         *connect.Client[v1.UpdateRunnerPolicyRequest, v1.UpdateRunnerPolicyResponse]
	deleteRunnerPolicy         *connect.Client[v1.DeleteRunnerPolicyRequest, v1.DeleteRunnerPolicyResponse]
}

// CreateRunner calls gitpod.v1.RunnerService.CreateRunner.
func (c *runnerServiceClient) CreateRunner(ctx context.Context, req *connect.Request[v1.CreateRunnerRequest]) (*connect.Response[v1.CreateRunnerResponse], error) {
	return c.createRunner.CallUnary(ctx, req)
}

// GetRunner calls gitpod.v1.RunnerService.GetRunner.
func (c *runnerServiceClient) GetRunner(ctx context.Context, req *connect.Request[v1.GetRunnerRequest]) (*connect.Response[v1.GetRunnerResponse], error) {
	return c.getRunner.CallUnary(ctx, req)
}

// ListRunners calls gitpod.v1.RunnerService.ListRunners.
func (c *runnerServiceClient) ListRunners(ctx context.Context, req *connect.Request[v1.ListRunnersRequest]) (*connect.Response[v1.ListRunnersResponse], error) {
	return c.listRunners.CallUnary(ctx, req)
}

// UpdateRunner calls gitpod.v1.RunnerService.UpdateRunner.
func (c *runnerServiceClient) UpdateRunner(ctx context.Context, req *connect.Request[v1.UpdateRunnerRequest]) (*connect.Response[v1.UpdateRunnerResponse], error) {
	return c.updateRunner.CallUnary(ctx, req)
}

// DeleteRunner calls gitpod.v1.RunnerService.DeleteRunner.
func (c *runnerServiceClient) DeleteRunner(ctx context.Context, req *connect.Request[v1.DeleteRunnerRequest]) (*connect.Response[v1.DeleteRunnerResponse], error) {
	return c.deleteRunner.CallUnary(ctx, req)
}

// CreateRunnerToken calls gitpod.v1.RunnerService.CreateRunnerToken.
func (c *runnerServiceClient) CreateRunnerToken(ctx context.Context, req *connect.Request[v1.CreateRunnerTokenRequest]) (*connect.Response[v1.CreateRunnerTokenResponse], error) {
	return c.createRunnerToken.CallUnary(ctx, req)
}

// ParseContextURL calls gitpod.v1.RunnerService.ParseContextURL.
func (c *runnerServiceClient) ParseContextURL(ctx context.Context, req *connect.Request[v1.ParseContextURLRequest]) (*connect.Response[v1.ParseContextURLResponse], error) {
	return c.parseContextURL.CallUnary(ctx, req)
}

// CheckAuthenticationForHost calls gitpod.v1.RunnerService.CheckAuthenticationForHost.
func (c *runnerServiceClient) CheckAuthenticationForHost(ctx context.Context, req *connect.Request[v1.CheckAuthenticationForHostRequest]) (*connect.Response[v1.CheckAuthenticationForHostResponse], error) {
	return c.checkAuthenticationForHost.CallUnary(ctx, req)
}

// ListRunnerPolicies calls gitpod.v1.RunnerService.ListRunnerPolicies.
func (c *runnerServiceClient) ListRunnerPolicies(ctx context.Context, req *connect.Request[v1.ListRunnerPoliciesRequest]) (*connect.Response[v1.ListRunnerPoliciesResponse], error) {
	return c.listRunnerPolicies.CallUnary(ctx, req)
}

// CreateRunnerPolicy calls gitpod.v1.RunnerService.CreateRunnerPolicy.
func (c *runnerServiceClient) CreateRunnerPolicy(ctx context.Context, req *connect.Request[v1.CreateRunnerPolicyRequest]) (*connect.Response[v1.CreateRunnerPolicyResponse], error) {
	return c.createRunnerPolicy.CallUnary(ctx, req)
}

// UpdateRunnerPolicy calls gitpod.v1.RunnerService.UpdateRunnerPolicy.
func (c *runnerServiceClient) UpdateRunnerPolicy(ctx context.Context, req *connect.Request[v1.UpdateRunnerPolicyRequest]) (*connect.Response[v1.UpdateRunnerPolicyResponse], error) {
	return c.updateRunnerPolicy.CallUnary(ctx, req)
}

// DeleteRunnerPolicy calls gitpod.v1.RunnerService.DeleteRunnerPolicy.
func (c *runnerServiceClient) DeleteRunnerPolicy(ctx context.Context, req *connect.Request[v1.DeleteRunnerPolicyRequest]) (*connect.Response[v1.DeleteRunnerPolicyResponse], error) {
	return c.deleteRunnerPolicy.CallUnary(ctx, req)
}

// RunnerServiceHandler is an implementation of the gitpod.v1.RunnerService service.
type RunnerServiceHandler interface {
	// CreateRunner creates a new runner with the server. Registrations are very
	// short-lived and must be renewed every 30 seconds. Runners can be registered
	// for an entire organisation or a single user.
	CreateRunner(context.Context, *connect.Request[v1.CreateRunnerRequest]) (*connect.Response[v1.CreateRunnerResponse], error)
	// GetRunner returns a single runner.
	GetRunner(context.Context, *connect.Request[v1.GetRunnerRequest]) (*connect.Response[v1.GetRunnerResponse], error)
	// ListRunners returns all runners registered in the scope.
	ListRunners(context.Context, *connect.Request[v1.ListRunnersRequest]) (*connect.Response[v1.ListRunnersResponse], error)
	// UpdateRunner updates an environment runner.
	UpdateRunner(context.Context, *connect.Request[v1.UpdateRunnerRequest]) (*connect.Response[v1.UpdateRunnerResponse], error)
	// DeleteRunner deletes an environment runner.
	DeleteRunner(context.Context, *connect.Request[v1.DeleteRunnerRequest]) (*connect.Response[v1.DeleteRunnerResponse], error)
	// CreateRunnerToken returns a token that can be used to authenticate as the
	// runner. Use this call to renew an outdated token - this does not expire any
	// previouly issued tokens.
	CreateRunnerToken(context.Context, *connect.Request[v1.CreateRunnerTokenRequest]) (*connect.Response[v1.CreateRunnerTokenResponse], error)
	// ParseContextURL asks a runner to parse a context URL, and return the parsed result.
	//
	// This call returns
	//   - FAILED_PRECONDITION if the user requires authentication on the runner to access the context URL
	//   - PERMISSION_DENIED if the user is not allowed to access the context URL using the credentials they have
	//   - INVALID_ARGUMENT if the context URL is invalid
	//   - NOT_FOUND if the repository or branch indicated by the context URL does not exist
	ParseContextURL(context.Context, *connect.Request[v1.ParseContextURLRequest]) (*connect.Response[v1.ParseContextURLResponse], error)
	// CheckAuthenticationForHost asks a runner if the user is authenticated against a particular host, e.g. an SCM system.
	// If not, this function will return a URL that the user should visit to authenticate, or indicate that Personal Access Tokens are supported.
	CheckAuthenticationForHost(context.Context, *connect.Request[v1.CheckAuthenticationForHostRequest]) (*connect.Response[v1.CheckAuthenticationForHostResponse], error)
	// ListRunnerPolicies lists runner policies.
	ListRunnerPolicies(context.Context, *connect.Request[v1.ListRunnerPoliciesRequest]) (*connect.Response[v1.ListRunnerPoliciesResponse], error)
	// CreateRunnerPolicy creates a new runner policy.
	CreateRunnerPolicy(context.Context, *connect.Request[v1.CreateRunnerPolicyRequest]) (*connect.Response[v1.CreateRunnerPolicyResponse], error)
	// UpdateRunnerPolicy an existing runner policy.
	UpdateRunnerPolicy(context.Context, *connect.Request[v1.UpdateRunnerPolicyRequest]) (*connect.Response[v1.UpdateRunnerPolicyResponse], error)
	// DeleteRunnerPolicy deletes a runner policy.
	DeleteRunnerPolicy(context.Context, *connect.Request[v1.DeleteRunnerPolicyRequest]) (*connect.Response[v1.DeleteRunnerPolicyResponse], error)
}

// NewRunnerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRunnerServiceHandler(svc RunnerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	runnerServiceCreateRunnerHandler := connect.NewUnaryHandler(
		RunnerServiceCreateRunnerProcedure,
		svc.CreateRunner,
		connect.WithSchema(runnerServiceCreateRunnerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceGetRunnerHandler := connect.NewUnaryHandler(
		RunnerServiceGetRunnerProcedure,
		svc.GetRunner,
		connect.WithSchema(runnerServiceGetRunnerMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceListRunnersHandler := connect.NewUnaryHandler(
		RunnerServiceListRunnersProcedure,
		svc.ListRunners,
		connect.WithSchema(runnerServiceListRunnersMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceUpdateRunnerHandler := connect.NewUnaryHandler(
		RunnerServiceUpdateRunnerProcedure,
		svc.UpdateRunner,
		connect.WithSchema(runnerServiceUpdateRunnerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceDeleteRunnerHandler := connect.NewUnaryHandler(
		RunnerServiceDeleteRunnerProcedure,
		svc.DeleteRunner,
		connect.WithSchema(runnerServiceDeleteRunnerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceCreateRunnerTokenHandler := connect.NewUnaryHandler(
		RunnerServiceCreateRunnerTokenProcedure,
		svc.CreateRunnerToken,
		connect.WithSchema(runnerServiceCreateRunnerTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceParseContextURLHandler := connect.NewUnaryHandler(
		RunnerServiceParseContextURLProcedure,
		svc.ParseContextURL,
		connect.WithSchema(runnerServiceParseContextURLMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceCheckAuthenticationForHostHandler := connect.NewUnaryHandler(
		RunnerServiceCheckAuthenticationForHostProcedure,
		svc.CheckAuthenticationForHost,
		connect.WithSchema(runnerServiceCheckAuthenticationForHostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceListRunnerPoliciesHandler := connect.NewUnaryHandler(
		RunnerServiceListRunnerPoliciesProcedure,
		svc.ListRunnerPolicies,
		connect.WithSchema(runnerServiceListRunnerPoliciesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceCreateRunnerPolicyHandler := connect.NewUnaryHandler(
		RunnerServiceCreateRunnerPolicyProcedure,
		svc.CreateRunnerPolicy,
		connect.WithSchema(runnerServiceCreateRunnerPolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceUpdateRunnerPolicyHandler := connect.NewUnaryHandler(
		RunnerServiceUpdateRunnerPolicyProcedure,
		svc.UpdateRunnerPolicy,
		connect.WithSchema(runnerServiceUpdateRunnerPolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceDeleteRunnerPolicyHandler := connect.NewUnaryHandler(
		RunnerServiceDeleteRunnerPolicyProcedure,
		svc.DeleteRunnerPolicy,
		connect.WithSchema(runnerServiceDeleteRunnerPolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.RunnerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RunnerServiceCreateRunnerProcedure:
			runnerServiceCreateRunnerHandler.ServeHTTP(w, r)
		case RunnerServiceGetRunnerProcedure:
			runnerServiceGetRunnerHandler.ServeHTTP(w, r)
		case RunnerServiceListRunnersProcedure:
			runnerServiceListRunnersHandler.ServeHTTP(w, r)
		case RunnerServiceUpdateRunnerProcedure:
			runnerServiceUpdateRunnerHandler.ServeHTTP(w, r)
		case RunnerServiceDeleteRunnerProcedure:
			runnerServiceDeleteRunnerHandler.ServeHTTP(w, r)
		case RunnerServiceCreateRunnerTokenProcedure:
			runnerServiceCreateRunnerTokenHandler.ServeHTTP(w, r)
		case RunnerServiceParseContextURLProcedure:
			runnerServiceParseContextURLHandler.ServeHTTP(w, r)
		case RunnerServiceCheckAuthenticationForHostProcedure:
			runnerServiceCheckAuthenticationForHostHandler.ServeHTTP(w, r)
		case RunnerServiceListRunnerPoliciesProcedure:
			runnerServiceListRunnerPoliciesHandler.ServeHTTP(w, r)
		case RunnerServiceCreateRunnerPolicyProcedure:
			runnerServiceCreateRunnerPolicyHandler.ServeHTTP(w, r)
		case RunnerServiceUpdateRunnerPolicyProcedure:
			runnerServiceUpdateRunnerPolicyHandler.ServeHTTP(w, r)
		case RunnerServiceDeleteRunnerPolicyProcedure:
			runnerServiceDeleteRunnerPolicyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRunnerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRunnerServiceHandler struct{}

func (UnimplementedRunnerServiceHandler) CreateRunner(context.Context, *connect.Request[v1.CreateRunnerRequest]) (*connect.Response[v1.CreateRunnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerService.CreateRunner is not implemented"))
}

func (UnimplementedRunnerServiceHandler) GetRunner(context.Context, *connect.Request[v1.GetRunnerRequest]) (*connect.Response[v1.GetRunnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerService.GetRunner is not implemented"))
}

func (UnimplementedRunnerServiceHandler) ListRunners(context.Context, *connect.Request[v1.ListRunnersRequest]) (*connect.Response[v1.ListRunnersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerService.ListRunners is not implemented"))
}

func (UnimplementedRunnerServiceHandler) UpdateRunner(context.Context, *connect.Request[v1.UpdateRunnerRequest]) (*connect.Response[v1.UpdateRunnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerService.UpdateRunner is not implemented"))
}

func (UnimplementedRunnerServiceHandler) DeleteRunner(context.Context, *connect.Request[v1.DeleteRunnerRequest]) (*connect.Response[v1.DeleteRunnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerService.DeleteRunner is not implemented"))
}

func (UnimplementedRunnerServiceHandler) CreateRunnerToken(context.Context, *connect.Request[v1.CreateRunnerTokenRequest]) (*connect.Response[v1.CreateRunnerTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerService.CreateRunnerToken is not implemented"))
}

func (UnimplementedRunnerServiceHandler) ParseContextURL(context.Context, *connect.Request[v1.ParseContextURLRequest]) (*connect.Response[v1.ParseContextURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerService.ParseContextURL is not implemented"))
}

func (UnimplementedRunnerServiceHandler) CheckAuthenticationForHost(context.Context, *connect.Request[v1.CheckAuthenticationForHostRequest]) (*connect.Response[v1.CheckAuthenticationForHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerService.CheckAuthenticationForHost is not implemented"))
}

func (UnimplementedRunnerServiceHandler) ListRunnerPolicies(context.Context, *connect.Request[v1.ListRunnerPoliciesRequest]) (*connect.Response[v1.ListRunnerPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerService.ListRunnerPolicies is not implemented"))
}

func (UnimplementedRunnerServiceHandler) CreateRunnerPolicy(context.Context, *connect.Request[v1.CreateRunnerPolicyRequest]) (*connect.Response[v1.CreateRunnerPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerService.CreateRunnerPolicy is not implemented"))
}

func (UnimplementedRunnerServiceHandler) UpdateRunnerPolicy(context.Context, *connect.Request[v1.UpdateRunnerPolicyRequest]) (*connect.Response[v1.UpdateRunnerPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerService.UpdateRunnerPolicy is not implemented"))
}

func (UnimplementedRunnerServiceHandler) DeleteRunnerPolicy(context.Context, *connect.Request[v1.DeleteRunnerPolicyRequest]) (*connect.Response[v1.DeleteRunnerPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerService.DeleteRunnerPolicy is not implemented"))
}
