// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/event.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-sdk-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "gitpod.v1.EventService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventServiceWatchEventsProcedure is the fully-qualified name of the EventService's WatchEvents
	// RPC.
	EventServiceWatchEventsProcedure = "/gitpod.v1.EventService/WatchEvents"
	// EventServiceListAuditLogsProcedure is the fully-qualified name of the EventService's
	// ListAuditLogs RPC.
	EventServiceListAuditLogsProcedure = "/gitpod.v1.EventService/ListAuditLogs"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	eventServiceServiceDescriptor             = v1.File_gitpod_v1_event_proto.Services().ByName("EventService")
	eventServiceWatchEventsMethodDescriptor   = eventServiceServiceDescriptor.Methods().ByName("WatchEvents")
	eventServiceListAuditLogsMethodDescriptor = eventServiceServiceDescriptor.Methods().ByName("ListAuditLogs")
)

// EventServiceClient is a client for the gitpod.v1.EventService service.
type EventServiceClient interface {
	// WatchEvents streams all requests events to the client
	WatchEvents(context.Context, *connect.Request[v1.WatchEventsRequest]) (*connect.ServerStreamForClient[v1.WatchEventsResponse], error)
	// ListAuditLogs retrieves a paginated list of audit logs for the specified organization
	ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error)
}

// NewEventServiceClient constructs a client for the gitpod.v1.EventService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventServiceClient{
		watchEvents: connect.NewClient[v1.WatchEventsRequest, v1.WatchEventsResponse](
			httpClient,
			baseURL+EventServiceWatchEventsProcedure,
			connect.WithSchema(eventServiceWatchEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAuditLogs: connect.NewClient[v1.ListAuditLogsRequest, v1.ListAuditLogsResponse](
			httpClient,
			baseURL+EventServiceListAuditLogsProcedure,
			connect.WithSchema(eventServiceListAuditLogsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	watchEvents   *connect.Client[v1.WatchEventsRequest, v1.WatchEventsResponse]
	listAuditLogs *connect.Client[v1.ListAuditLogsRequest, v1.ListAuditLogsResponse]
}

// WatchEvents calls gitpod.v1.EventService.WatchEvents.
func (c *eventServiceClient) WatchEvents(ctx context.Context, req *connect.Request[v1.WatchEventsRequest]) (*connect.ServerStreamForClient[v1.WatchEventsResponse], error) {
	return c.watchEvents.CallServerStream(ctx, req)
}

// ListAuditLogs calls gitpod.v1.EventService.ListAuditLogs.
func (c *eventServiceClient) ListAuditLogs(ctx context.Context, req *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error) {
	return c.listAuditLogs.CallUnary(ctx, req)
}

// EventServiceHandler is an implementation of the gitpod.v1.EventService service.
type EventServiceHandler interface {
	// WatchEvents streams all requests events to the client
	WatchEvents(context.Context, *connect.Request[v1.WatchEventsRequest], *connect.ServerStream[v1.WatchEventsResponse]) error
	// ListAuditLogs retrieves a paginated list of audit logs for the specified organization
	ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error)
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventServiceWatchEventsHandler := connect.NewServerStreamHandler(
		EventServiceWatchEventsProcedure,
		svc.WatchEvents,
		connect.WithSchema(eventServiceWatchEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceListAuditLogsHandler := connect.NewUnaryHandler(
		EventServiceListAuditLogsProcedure,
		svc.ListAuditLogs,
		connect.WithSchema(eventServiceListAuditLogsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.EventService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventServiceWatchEventsProcedure:
			eventServiceWatchEventsHandler.ServeHTTP(w, r)
		case EventServiceListAuditLogsProcedure:
			eventServiceListAuditLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) WatchEvents(context.Context, *connect.Request[v1.WatchEventsRequest], *connect.ServerStream[v1.WatchEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EventService.WatchEvents is not implemented"))
}

func (UnimplementedEventServiceHandler) ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EventService.ListAuditLogs is not implemented"))
}
