// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/user.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-api-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "gitpod.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetAuthenticatedUserProcedure is the fully-qualified name of the UserService's
	// GetAuthenticatedUser RPC.
	UserServiceGetAuthenticatedUserProcedure = "/gitpod.v1.UserService/GetAuthenticatedUser"
	// UserServiceUpdateUserProcedure is the fully-qualified name of the UserService's UpdateUser RPC.
	UserServiceUpdateUserProcedure = "/gitpod.v1.UserService/UpdateUser"
	// UserServiceSetSuspendedProcedure is the fully-qualified name of the UserService's SetSuspended
	// RPC.
	UserServiceSetSuspendedProcedure = "/gitpod.v1.UserService/SetSuspended"
	// UserServiceCreatePersonalAccessTokenProcedure is the fully-qualified name of the UserService's
	// CreatePersonalAccessToken RPC.
	UserServiceCreatePersonalAccessTokenProcedure = "/gitpod.v1.UserService/CreatePersonalAccessToken"
	// UserServiceGetPersonalAccessTokenProcedure is the fully-qualified name of the UserService's
	// GetPersonalAccessToken RPC.
	UserServiceGetPersonalAccessTokenProcedure = "/gitpod.v1.UserService/GetPersonalAccessToken"
	// UserServiceListPersonalAccessTokensProcedure is the fully-qualified name of the UserService's
	// ListPersonalAccessTokens RPC.
	UserServiceListPersonalAccessTokensProcedure = "/gitpod.v1.UserService/ListPersonalAccessTokens"
	// UserServiceDeletePersonalAccessTokenProcedure is the fully-qualified name of the UserService's
	// DeletePersonalAccessToken RPC.
	UserServiceDeletePersonalAccessTokenProcedure = "/gitpod.v1.UserService/DeletePersonalAccessToken"
	// UserServiceSetPreferenceProcedure is the fully-qualified name of the UserService's SetPreference
	// RPC.
	UserServiceSetPreferenceProcedure = "/gitpod.v1.UserService/SetPreference"
	// UserServiceGetPreferenceProcedure is the fully-qualified name of the UserService's GetPreference
	// RPC.
	UserServiceGetPreferenceProcedure = "/gitpod.v1.UserService/GetPreference"
	// UserServiceListPreferencesProcedure is the fully-qualified name of the UserService's
	// ListPreferences RPC.
	UserServiceListPreferencesProcedure = "/gitpod.v1.UserService/ListPreferences"
	// UserServiceDeletePreferenceProcedure is the fully-qualified name of the UserService's
	// DeletePreference RPC.
	UserServiceDeletePreferenceProcedure = "/gitpod.v1.UserService/DeletePreference"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServiceServiceDescriptor                         = v1.File_gitpod_v1_user_proto.Services().ByName("UserService")
	userServiceGetAuthenticatedUserMethodDescriptor      = userServiceServiceDescriptor.Methods().ByName("GetAuthenticatedUser")
	userServiceUpdateUserMethodDescriptor                = userServiceServiceDescriptor.Methods().ByName("UpdateUser")
	userServiceSetSuspendedMethodDescriptor              = userServiceServiceDescriptor.Methods().ByName("SetSuspended")
	userServiceCreatePersonalAccessTokenMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("CreatePersonalAccessToken")
	userServiceGetPersonalAccessTokenMethodDescriptor    = userServiceServiceDescriptor.Methods().ByName("GetPersonalAccessToken")
	userServiceListPersonalAccessTokensMethodDescriptor  = userServiceServiceDescriptor.Methods().ByName("ListPersonalAccessTokens")
	userServiceDeletePersonalAccessTokenMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("DeletePersonalAccessToken")
	userServiceSetPreferenceMethodDescriptor             = userServiceServiceDescriptor.Methods().ByName("SetPreference")
	userServiceGetPreferenceMethodDescriptor             = userServiceServiceDescriptor.Methods().ByName("GetPreference")
	userServiceListPreferencesMethodDescriptor           = userServiceServiceDescriptor.Methods().ByName("ListPreferences")
	userServiceDeletePreferenceMethodDescriptor          = userServiceServiceDescriptor.Methods().ByName("DeletePreference")
)

// UserServiceClient is a client for the gitpod.v1.UserService service.
type UserServiceClient interface {
	// GetAuthenticatedUser allows to retrieve the current user.
	GetAuthenticatedUser(context.Context, *connect.Request[v1.GetAuthenticatedUserRequest]) (*connect.Response[v1.GetAuthenticatedUserResponse], error)
	// UpdateUser updates the properties of a user.
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// SetSuspended sets the suspended state of the user.
	SetSuspended(context.Context, *connect.Request[v1.SetSuspendedRequest]) (*connect.Response[v1.SetSuspendedResponse], error)
	CreatePersonalAccessToken(context.Context, *connect.Request[v1.CreatePersonalAccessTokenRequest]) (*connect.Response[v1.CreatePersonalAccessTokenResponse], error)
	GetPersonalAccessToken(context.Context, *connect.Request[v1.GetPersonalAccessTokenRequest]) (*connect.Response[v1.GetPersonalAccessTokenResponse], error)
	ListPersonalAccessTokens(context.Context, *connect.Request[v1.ListPersonalAccessTokensRequest]) (*connect.Response[v1.ListPersonalAccessTokensResponse], error)
	DeletePersonalAccessToken(context.Context, *connect.Request[v1.DeletePersonalAccessTokenRequest]) (*connect.Response[v1.DeletePersonalAccessTokenResponse], error)
	// SetPreference upserts user preference settings for the user
	SetPreference(context.Context, *connect.Request[v1.SetPreferenceRequest]) (*connect.Response[v1.SetPreferenceResponse], error)
	GetPreference(context.Context, *connect.Request[v1.GetPreferenceRequest]) (*connect.Response[v1.GetPreferenceResponse], error)
	// ListPreferences returns the list of user preferences without any prefix scans
	ListPreferences(context.Context, *connect.Request[v1.ListPreferencesRequest]) (*connect.Response[v1.ListPreferencesResponse], error)
	DeletePreference(context.Context, *connect.Request[v1.DeletePreferenceRequest]) (*connect.Response[v1.DeletePreferenceResponse], error)
}

// NewUserServiceClient constructs a client for the gitpod.v1.UserService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		getAuthenticatedUser: connect.NewClient[v1.GetAuthenticatedUserRequest, v1.GetAuthenticatedUserResponse](
			httpClient,
			baseURL+UserServiceGetAuthenticatedUserProcedure,
			connect.WithSchema(userServiceGetAuthenticatedUserMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+UserServiceUpdateUserProcedure,
			connect.WithSchema(userServiceUpdateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setSuspended: connect.NewClient[v1.SetSuspendedRequest, v1.SetSuspendedResponse](
			httpClient,
			baseURL+UserServiceSetSuspendedProcedure,
			connect.WithSchema(userServiceSetSuspendedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createPersonalAccessToken: connect.NewClient[v1.CreatePersonalAccessTokenRequest, v1.CreatePersonalAccessTokenResponse](
			httpClient,
			baseURL+UserServiceCreatePersonalAccessTokenProcedure,
			connect.WithSchema(userServiceCreatePersonalAccessTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPersonalAccessToken: connect.NewClient[v1.GetPersonalAccessTokenRequest, v1.GetPersonalAccessTokenResponse](
			httpClient,
			baseURL+UserServiceGetPersonalAccessTokenProcedure,
			connect.WithSchema(userServiceGetPersonalAccessTokenMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listPersonalAccessTokens: connect.NewClient[v1.ListPersonalAccessTokensRequest, v1.ListPersonalAccessTokensResponse](
			httpClient,
			baseURL+UserServiceListPersonalAccessTokensProcedure,
			connect.WithSchema(userServiceListPersonalAccessTokensMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePersonalAccessToken: connect.NewClient[v1.DeletePersonalAccessTokenRequest, v1.DeletePersonalAccessTokenResponse](
			httpClient,
			baseURL+UserServiceDeletePersonalAccessTokenProcedure,
			connect.WithSchema(userServiceDeletePersonalAccessTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setPreference: connect.NewClient[v1.SetPreferenceRequest, v1.SetPreferenceResponse](
			httpClient,
			baseURL+UserServiceSetPreferenceProcedure,
			connect.WithSchema(userServiceSetPreferenceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPreference: connect.NewClient[v1.GetPreferenceRequest, v1.GetPreferenceResponse](
			httpClient,
			baseURL+UserServiceGetPreferenceProcedure,
			connect.WithSchema(userServiceGetPreferenceMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listPreferences: connect.NewClient[v1.ListPreferencesRequest, v1.ListPreferencesResponse](
			httpClient,
			baseURL+UserServiceListPreferencesProcedure,
			connect.WithSchema(userServiceListPreferencesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deletePreference: connect.NewClient[v1.DeletePreferenceRequest, v1.DeletePreferenceResponse](
			httpClient,
			baseURL+UserServiceDeletePreferenceProcedure,
			connect.WithSchema(userServiceDeletePreferenceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getAuthenticatedUser      *connect.Client[v1.GetAuthenticatedUserRequest, v1.GetAuthenticatedUserResponse]
	updateUser                *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	setSuspended              *connect.Client[v1.SetSuspendedRequest, v1.SetSuspendedResponse]
	createPersonalAccessToken *connect.Client[v1.CreatePersonalAccessTokenRequest, v1.CreatePersonalAccessTokenResponse]
	getPersonalAccessToken    *connect.Client[v1.GetPersonalAccessTokenRequest, v1.GetPersonalAccessTokenResponse]
	listPersonalAccessTokens  *connect.Client[v1.ListPersonalAccessTokensRequest, v1.ListPersonalAccessTokensResponse]
	deletePersonalAccessToken *connect.Client[v1.DeletePersonalAccessTokenRequest, v1.DeletePersonalAccessTokenResponse]
	setPreference             *connect.Client[v1.SetPreferenceRequest, v1.SetPreferenceResponse]
	getPreference             *connect.Client[v1.GetPreferenceRequest, v1.GetPreferenceResponse]
	listPreferences           *connect.Client[v1.ListPreferencesRequest, v1.ListPreferencesResponse]
	deletePreference          *connect.Client[v1.DeletePreferenceRequest, v1.DeletePreferenceResponse]
}

// GetAuthenticatedUser calls gitpod.v1.UserService.GetAuthenticatedUser.
func (c *userServiceClient) GetAuthenticatedUser(ctx context.Context, req *connect.Request[v1.GetAuthenticatedUserRequest]) (*connect.Response[v1.GetAuthenticatedUserResponse], error) {
	return c.getAuthenticatedUser.CallUnary(ctx, req)
}

// UpdateUser calls gitpod.v1.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// SetSuspended calls gitpod.v1.UserService.SetSuspended.
func (c *userServiceClient) SetSuspended(ctx context.Context, req *connect.Request[v1.SetSuspendedRequest]) (*connect.Response[v1.SetSuspendedResponse], error) {
	return c.setSuspended.CallUnary(ctx, req)
}

// CreatePersonalAccessToken calls gitpod.v1.UserService.CreatePersonalAccessToken.
func (c *userServiceClient) CreatePersonalAccessToken(ctx context.Context, req *connect.Request[v1.CreatePersonalAccessTokenRequest]) (*connect.Response[v1.CreatePersonalAccessTokenResponse], error) {
	return c.createPersonalAccessToken.CallUnary(ctx, req)
}

// GetPersonalAccessToken calls gitpod.v1.UserService.GetPersonalAccessToken.
func (c *userServiceClient) GetPersonalAccessToken(ctx context.Context, req *connect.Request[v1.GetPersonalAccessTokenRequest]) (*connect.Response[v1.GetPersonalAccessTokenResponse], error) {
	return c.getPersonalAccessToken.CallUnary(ctx, req)
}

// ListPersonalAccessTokens calls gitpod.v1.UserService.ListPersonalAccessTokens.
func (c *userServiceClient) ListPersonalAccessTokens(ctx context.Context, req *connect.Request[v1.ListPersonalAccessTokensRequest]) (*connect.Response[v1.ListPersonalAccessTokensResponse], error) {
	return c.listPersonalAccessTokens.CallUnary(ctx, req)
}

// DeletePersonalAccessToken calls gitpod.v1.UserService.DeletePersonalAccessToken.
func (c *userServiceClient) DeletePersonalAccessToken(ctx context.Context, req *connect.Request[v1.DeletePersonalAccessTokenRequest]) (*connect.Response[v1.DeletePersonalAccessTokenResponse], error) {
	return c.deletePersonalAccessToken.CallUnary(ctx, req)
}

// SetPreference calls gitpod.v1.UserService.SetPreference.
func (c *userServiceClient) SetPreference(ctx context.Context, req *connect.Request[v1.SetPreferenceRequest]) (*connect.Response[v1.SetPreferenceResponse], error) {
	return c.setPreference.CallUnary(ctx, req)
}

// GetPreference calls gitpod.v1.UserService.GetPreference.
func (c *userServiceClient) GetPreference(ctx context.Context, req *connect.Request[v1.GetPreferenceRequest]) (*connect.Response[v1.GetPreferenceResponse], error) {
	return c.getPreference.CallUnary(ctx, req)
}

// ListPreferences calls gitpod.v1.UserService.ListPreferences.
func (c *userServiceClient) ListPreferences(ctx context.Context, req *connect.Request[v1.ListPreferencesRequest]) (*connect.Response[v1.ListPreferencesResponse], error) {
	return c.listPreferences.CallUnary(ctx, req)
}

// DeletePreference calls gitpod.v1.UserService.DeletePreference.
func (c *userServiceClient) DeletePreference(ctx context.Context, req *connect.Request[v1.DeletePreferenceRequest]) (*connect.Response[v1.DeletePreferenceResponse], error) {
	return c.deletePreference.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the gitpod.v1.UserService service.
type UserServiceHandler interface {
	// GetAuthenticatedUser allows to retrieve the current user.
	GetAuthenticatedUser(context.Context, *connect.Request[v1.GetAuthenticatedUserRequest]) (*connect.Response[v1.GetAuthenticatedUserResponse], error)
	// UpdateUser updates the properties of a user.
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// SetSuspended sets the suspended state of the user.
	SetSuspended(context.Context, *connect.Request[v1.SetSuspendedRequest]) (*connect.Response[v1.SetSuspendedResponse], error)
	CreatePersonalAccessToken(context.Context, *connect.Request[v1.CreatePersonalAccessTokenRequest]) (*connect.Response[v1.CreatePersonalAccessTokenResponse], error)
	GetPersonalAccessToken(context.Context, *connect.Request[v1.GetPersonalAccessTokenRequest]) (*connect.Response[v1.GetPersonalAccessTokenResponse], error)
	ListPersonalAccessTokens(context.Context, *connect.Request[v1.ListPersonalAccessTokensRequest]) (*connect.Response[v1.ListPersonalAccessTokensResponse], error)
	DeletePersonalAccessToken(context.Context, *connect.Request[v1.DeletePersonalAccessTokenRequest]) (*connect.Response[v1.DeletePersonalAccessTokenResponse], error)
	// SetPreference upserts user preference settings for the user
	SetPreference(context.Context, *connect.Request[v1.SetPreferenceRequest]) (*connect.Response[v1.SetPreferenceResponse], error)
	GetPreference(context.Context, *connect.Request[v1.GetPreferenceRequest]) (*connect.Response[v1.GetPreferenceResponse], error)
	// ListPreferences returns the list of user preferences without any prefix scans
	ListPreferences(context.Context, *connect.Request[v1.ListPreferencesRequest]) (*connect.Response[v1.ListPreferencesResponse], error)
	DeletePreference(context.Context, *connect.Request[v1.DeletePreferenceRequest]) (*connect.Response[v1.DeletePreferenceResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceGetAuthenticatedUserHandler := connect.NewUnaryHandler(
		UserServiceGetAuthenticatedUserProcedure,
		svc.GetAuthenticatedUser,
		connect.WithSchema(userServiceGetAuthenticatedUserMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userServiceUpdateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSetSuspendedHandler := connect.NewUnaryHandler(
		UserServiceSetSuspendedProcedure,
		svc.SetSuspended,
		connect.WithSchema(userServiceSetSuspendedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCreatePersonalAccessTokenHandler := connect.NewUnaryHandler(
		UserServiceCreatePersonalAccessTokenProcedure,
		svc.CreatePersonalAccessToken,
		connect.WithSchema(userServiceCreatePersonalAccessTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetPersonalAccessTokenHandler := connect.NewUnaryHandler(
		UserServiceGetPersonalAccessTokenProcedure,
		svc.GetPersonalAccessToken,
		connect.WithSchema(userServiceGetPersonalAccessTokenMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListPersonalAccessTokensHandler := connect.NewUnaryHandler(
		UserServiceListPersonalAccessTokensProcedure,
		svc.ListPersonalAccessTokens,
		connect.WithSchema(userServiceListPersonalAccessTokensMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeletePersonalAccessTokenHandler := connect.NewUnaryHandler(
		UserServiceDeletePersonalAccessTokenProcedure,
		svc.DeletePersonalAccessToken,
		connect.WithSchema(userServiceDeletePersonalAccessTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSetPreferenceHandler := connect.NewUnaryHandler(
		UserServiceSetPreferenceProcedure,
		svc.SetPreference,
		connect.WithSchema(userServiceSetPreferenceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetPreferenceHandler := connect.NewUnaryHandler(
		UserServiceGetPreferenceProcedure,
		svc.GetPreference,
		connect.WithSchema(userServiceGetPreferenceMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListPreferencesHandler := connect.NewUnaryHandler(
		UserServiceListPreferencesProcedure,
		svc.ListPreferences,
		connect.WithSchema(userServiceListPreferencesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeletePreferenceHandler := connect.NewUnaryHandler(
		UserServiceDeletePreferenceProcedure,
		svc.DeletePreference,
		connect.WithSchema(userServiceDeletePreferenceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetAuthenticatedUserProcedure:
			userServiceGetAuthenticatedUserHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProcedure:
			userServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserServiceSetSuspendedProcedure:
			userServiceSetSuspendedHandler.ServeHTTP(w, r)
		case UserServiceCreatePersonalAccessTokenProcedure:
			userServiceCreatePersonalAccessTokenHandler.ServeHTTP(w, r)
		case UserServiceGetPersonalAccessTokenProcedure:
			userServiceGetPersonalAccessTokenHandler.ServeHTTP(w, r)
		case UserServiceListPersonalAccessTokensProcedure:
			userServiceListPersonalAccessTokensHandler.ServeHTTP(w, r)
		case UserServiceDeletePersonalAccessTokenProcedure:
			userServiceDeletePersonalAccessTokenHandler.ServeHTTP(w, r)
		case UserServiceSetPreferenceProcedure:
			userServiceSetPreferenceHandler.ServeHTTP(w, r)
		case UserServiceGetPreferenceProcedure:
			userServiceGetPreferenceHandler.ServeHTTP(w, r)
		case UserServiceListPreferencesProcedure:
			userServiceListPreferencesHandler.ServeHTTP(w, r)
		case UserServiceDeletePreferenceProcedure:
			userServiceDeletePreferenceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetAuthenticatedUser(context.Context, *connect.Request[v1.GetAuthenticatedUserRequest]) (*connect.Response[v1.GetAuthenticatedUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.UserService.GetAuthenticatedUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) SetSuspended(context.Context, *connect.Request[v1.SetSuspendedRequest]) (*connect.Response[v1.SetSuspendedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.UserService.SetSuspended is not implemented"))
}

func (UnimplementedUserServiceHandler) CreatePersonalAccessToken(context.Context, *connect.Request[v1.CreatePersonalAccessTokenRequest]) (*connect.Response[v1.CreatePersonalAccessTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.UserService.CreatePersonalAccessToken is not implemented"))
}

func (UnimplementedUserServiceHandler) GetPersonalAccessToken(context.Context, *connect.Request[v1.GetPersonalAccessTokenRequest]) (*connect.Response[v1.GetPersonalAccessTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.UserService.GetPersonalAccessToken is not implemented"))
}

func (UnimplementedUserServiceHandler) ListPersonalAccessTokens(context.Context, *connect.Request[v1.ListPersonalAccessTokensRequest]) (*connect.Response[v1.ListPersonalAccessTokensResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.UserService.ListPersonalAccessTokens is not implemented"))
}

func (UnimplementedUserServiceHandler) DeletePersonalAccessToken(context.Context, *connect.Request[v1.DeletePersonalAccessTokenRequest]) (*connect.Response[v1.DeletePersonalAccessTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.UserService.DeletePersonalAccessToken is not implemented"))
}

func (UnimplementedUserServiceHandler) SetPreference(context.Context, *connect.Request[v1.SetPreferenceRequest]) (*connect.Response[v1.SetPreferenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.UserService.SetPreference is not implemented"))
}

func (UnimplementedUserServiceHandler) GetPreference(context.Context, *connect.Request[v1.GetPreferenceRequest]) (*connect.Response[v1.GetPreferenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.UserService.GetPreference is not implemented"))
}

func (UnimplementedUserServiceHandler) ListPreferences(context.Context, *connect.Request[v1.ListPreferencesRequest]) (*connect.Response[v1.ListPreferencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.UserService.ListPreferences is not implemented"))
}

func (UnimplementedUserServiceHandler) DeletePreference(context.Context, *connect.Request[v1.DeletePreferenceRequest]) (*connect.Response[v1.DeletePreferenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.UserService.DeletePreference is not implemented"))
}
