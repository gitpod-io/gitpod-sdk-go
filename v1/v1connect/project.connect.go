// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/project.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-sdk-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProjectServiceName is the fully-qualified name of the ProjectService service.
	ProjectServiceName = "gitpod.v1.ProjectService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectServiceCreateProjectProcedure is the fully-qualified name of the ProjectService's
	// CreateProject RPC.
	ProjectServiceCreateProjectProcedure = "/gitpod.v1.ProjectService/CreateProject"
	// ProjectServiceCreateProjectFromEnvironmentProcedure is the fully-qualified name of the
	// ProjectService's CreateProjectFromEnvironment RPC.
	ProjectServiceCreateProjectFromEnvironmentProcedure = "/gitpod.v1.ProjectService/CreateProjectFromEnvironment"
	// ProjectServiceGetProjectProcedure is the fully-qualified name of the ProjectService's GetProject
	// RPC.
	ProjectServiceGetProjectProcedure = "/gitpod.v1.ProjectService/GetProject"
	// ProjectServiceUpdateProjectProcedure is the fully-qualified name of the ProjectService's
	// UpdateProject RPC.
	ProjectServiceUpdateProjectProcedure = "/gitpod.v1.ProjectService/UpdateProject"
	// ProjectServiceListProjectsProcedure is the fully-qualified name of the ProjectService's
	// ListProjects RPC.
	ProjectServiceListProjectsProcedure = "/gitpod.v1.ProjectService/ListProjects"
	// ProjectServiceDeleteProjectProcedure is the fully-qualified name of the ProjectService's
	// DeleteProject RPC.
	ProjectServiceDeleteProjectProcedure = "/gitpod.v1.ProjectService/DeleteProject"
	// ProjectServiceListProjectPoliciesProcedure is the fully-qualified name of the ProjectService's
	// ListProjectPolicies RPC.
	ProjectServiceListProjectPoliciesProcedure = "/gitpod.v1.ProjectService/ListProjectPolicies"
	// ProjectServiceCreateProjectPolicyProcedure is the fully-qualified name of the ProjectService's
	// CreateProjectPolicy RPC.
	ProjectServiceCreateProjectPolicyProcedure = "/gitpod.v1.ProjectService/CreateProjectPolicy"
	// ProjectServiceDeleteProjectPolicyProcedure is the fully-qualified name of the ProjectService's
	// DeleteProjectPolicy RPC.
	ProjectServiceDeleteProjectPolicyProcedure = "/gitpod.v1.ProjectService/DeleteProjectPolicy"
	// ProjectServiceUpdateProjectPolicyProcedure is the fully-qualified name of the ProjectService's
	// UpdateProjectPolicy RPC.
	ProjectServiceUpdateProjectPolicyProcedure = "/gitpod.v1.ProjectService/UpdateProjectPolicy"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	projectServiceServiceDescriptor                            = v1.File_gitpod_v1_project_proto.Services().ByName("ProjectService")
	projectServiceCreateProjectMethodDescriptor                = projectServiceServiceDescriptor.Methods().ByName("CreateProject")
	projectServiceCreateProjectFromEnvironmentMethodDescriptor = projectServiceServiceDescriptor.Methods().ByName("CreateProjectFromEnvironment")
	projectServiceGetProjectMethodDescriptor                   = projectServiceServiceDescriptor.Methods().ByName("GetProject")
	projectServiceUpdateProjectMethodDescriptor                = projectServiceServiceDescriptor.Methods().ByName("UpdateProject")
	projectServiceListProjectsMethodDescriptor                 = projectServiceServiceDescriptor.Methods().ByName("ListProjects")
	projectServiceDeleteProjectMethodDescriptor                = projectServiceServiceDescriptor.Methods().ByName("DeleteProject")
	projectServiceListProjectPoliciesMethodDescriptor          = projectServiceServiceDescriptor.Methods().ByName("ListProjectPolicies")
	projectServiceCreateProjectPolicyMethodDescriptor          = projectServiceServiceDescriptor.Methods().ByName("CreateProjectPolicy")
	projectServiceDeleteProjectPolicyMethodDescriptor          = projectServiceServiceDescriptor.Methods().ByName("DeleteProjectPolicy")
	projectServiceUpdateProjectPolicyMethodDescriptor          = projectServiceServiceDescriptor.Methods().ByName("UpdateProjectPolicy")
)

// ProjectServiceClient is a client for the gitpod.v1.ProjectService service.
type ProjectServiceClient interface {
	// CreateProject creates a new Project.
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	// CreateProject creates a new Project using an environment as template.
	CreateProjectFromEnvironment(context.Context, *connect.Request[v1.CreateProjectFromEnvironmentRequest]) (*connect.Response[v1.CreateProjectFromEnvironmentResponse], error)
	// GetProject retrieves a single Project.
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	// UpdateProject updates the properties of a Project.
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	// ListProjects lists all projects the caller has access to.
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	// DeleteProject deletes the specified project.
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
	// ListProjectPolicies lists policies for a project.
	ListProjectPolicies(context.Context, *connect.Request[v1.ListProjectPoliciesRequest]) (*connect.Response[v1.ListProjectPoliciesResponse], error)
	// CreateProjectPolicy creates a Project Policy.
	CreateProjectPolicy(context.Context, *connect.Request[v1.CreateProjectPolicyRequest]) (*connect.Response[v1.CreateProjectPolicyResponse], error)
	// DeleteProjectPolicy deletes a Project Policy.
	DeleteProjectPolicy(context.Context, *connect.Request[v1.DeleteProjectPolicyRequest]) (*connect.Response[v1.DeleteProjectPolicyResponse], error)
	// UpdateProjectPolicy updates a Project Policy.
	UpdateProjectPolicy(context.Context, *connect.Request[v1.UpdateProjectPolicyRequest]) (*connect.Response[v1.UpdateProjectPolicyResponse], error)
}

// NewProjectServiceClient constructs a client for the gitpod.v1.ProjectService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProjectServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &projectServiceClient{
		createProject: connect.NewClient[v1.CreateProjectRequest, v1.CreateProjectResponse](
			httpClient,
			baseURL+ProjectServiceCreateProjectProcedure,
			connect.WithSchema(projectServiceCreateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProjectFromEnvironment: connect.NewClient[v1.CreateProjectFromEnvironmentRequest, v1.CreateProjectFromEnvironmentResponse](
			httpClient,
			baseURL+ProjectServiceCreateProjectFromEnvironmentProcedure,
			connect.WithSchema(projectServiceCreateProjectFromEnvironmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProject: connect.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+ProjectServiceGetProjectProcedure,
			connect.WithSchema(projectServiceGetProjectMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[v1.UpdateProjectRequest, v1.UpdateProjectResponse](
			httpClient,
			baseURL+ProjectServiceUpdateProjectProcedure,
			connect.WithSchema(projectServiceUpdateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProjects: connect.NewClient[v1.ListProjectsRequest, v1.ListProjectsResponse](
			httpClient,
			baseURL+ProjectServiceListProjectsProcedure,
			connect.WithSchema(projectServiceListProjectsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteProject: connect.NewClient[v1.DeleteProjectRequest, v1.DeleteProjectResponse](
			httpClient,
			baseURL+ProjectServiceDeleteProjectProcedure,
			connect.WithSchema(projectServiceDeleteProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProjectPolicies: connect.NewClient[v1.ListProjectPoliciesRequest, v1.ListProjectPoliciesResponse](
			httpClient,
			baseURL+ProjectServiceListProjectPoliciesProcedure,
			connect.WithSchema(projectServiceListProjectPoliciesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createProjectPolicy: connect.NewClient[v1.CreateProjectPolicyRequest, v1.CreateProjectPolicyResponse](
			httpClient,
			baseURL+ProjectServiceCreateProjectPolicyProcedure,
			connect.WithSchema(projectServiceCreateProjectPolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProjectPolicy: connect.NewClient[v1.DeleteProjectPolicyRequest, v1.DeleteProjectPolicyResponse](
			httpClient,
			baseURL+ProjectServiceDeleteProjectPolicyProcedure,
			connect.WithSchema(projectServiceDeleteProjectPolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProjectPolicy: connect.NewClient[v1.UpdateProjectPolicyRequest, v1.UpdateProjectPolicyResponse](
			httpClient,
			baseURL+ProjectServiceUpdateProjectPolicyProcedure,
			connect.WithSchema(projectServiceUpdateProjectPolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// projectServiceClient implements ProjectServiceClient.
type projectServiceClient struct {
	createProject                *connect.Client[v1.CreateProjectRequest, v1.CreateProjectResponse]
	createProjectFromEnvironment *connect.Client[v1.CreateProjectFromEnvironmentRequest, v1.CreateProjectFromEnvironmentResponse]
	getProject                   *connect.Client[v1.GetProjectRequest, v1.GetProjectResponse]
	updateProject                *connect.Client[v1.UpdateProjectRequest, v1.UpdateProjectResponse]
	listProjects                 *connect.Client[v1.ListProjectsRequest, v1.ListProjectsResponse]
	deleteProject                *connect.Client[v1.DeleteProjectRequest, v1.DeleteProjectResponse]
	listProjectPolicies          *connect.Client[v1.ListProjectPoliciesRequest, v1.ListProjectPoliciesResponse]
	createProjectPolicy          *connect.Client[v1.CreateProjectPolicyRequest, v1.CreateProjectPolicyResponse]
	deleteProjectPolicy          *connect.Client[v1.DeleteProjectPolicyRequest, v1.DeleteProjectPolicyResponse]
	updateProjectPolicy          *connect.Client[v1.UpdateProjectPolicyRequest, v1.UpdateProjectPolicyResponse]
}

// CreateProject calls gitpod.v1.ProjectService.CreateProject.
func (c *projectServiceClient) CreateProject(ctx context.Context, req *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// CreateProjectFromEnvironment calls gitpod.v1.ProjectService.CreateProjectFromEnvironment.
func (c *projectServiceClient) CreateProjectFromEnvironment(ctx context.Context, req *connect.Request[v1.CreateProjectFromEnvironmentRequest]) (*connect.Response[v1.CreateProjectFromEnvironmentResponse], error) {
	return c.createProjectFromEnvironment.CallUnary(ctx, req)
}

// GetProject calls gitpod.v1.ProjectService.GetProject.
func (c *projectServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// UpdateProject calls gitpod.v1.ProjectService.UpdateProject.
func (c *projectServiceClient) UpdateProject(ctx context.Context, req *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// ListProjects calls gitpod.v1.ProjectService.ListProjects.
func (c *projectServiceClient) ListProjects(ctx context.Context, req *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// DeleteProject calls gitpod.v1.ProjectService.DeleteProject.
func (c *projectServiceClient) DeleteProject(ctx context.Context, req *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// ListProjectPolicies calls gitpod.v1.ProjectService.ListProjectPolicies.
func (c *projectServiceClient) ListProjectPolicies(ctx context.Context, req *connect.Request[v1.ListProjectPoliciesRequest]) (*connect.Response[v1.ListProjectPoliciesResponse], error) {
	return c.listProjectPolicies.CallUnary(ctx, req)
}

// CreateProjectPolicy calls gitpod.v1.ProjectService.CreateProjectPolicy.
func (c *projectServiceClient) CreateProjectPolicy(ctx context.Context, req *connect.Request[v1.CreateProjectPolicyRequest]) (*connect.Response[v1.CreateProjectPolicyResponse], error) {
	return c.createProjectPolicy.CallUnary(ctx, req)
}

// DeleteProjectPolicy calls gitpod.v1.ProjectService.DeleteProjectPolicy.
func (c *projectServiceClient) DeleteProjectPolicy(ctx context.Context, req *connect.Request[v1.DeleteProjectPolicyRequest]) (*connect.Response[v1.DeleteProjectPolicyResponse], error) {
	return c.deleteProjectPolicy.CallUnary(ctx, req)
}

// UpdateProjectPolicy calls gitpod.v1.ProjectService.UpdateProjectPolicy.
func (c *projectServiceClient) UpdateProjectPolicy(ctx context.Context, req *connect.Request[v1.UpdateProjectPolicyRequest]) (*connect.Response[v1.UpdateProjectPolicyResponse], error) {
	return c.updateProjectPolicy.CallUnary(ctx, req)
}

// ProjectServiceHandler is an implementation of the gitpod.v1.ProjectService service.
type ProjectServiceHandler interface {
	// CreateProject creates a new Project.
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	// CreateProject creates a new Project using an environment as template.
	CreateProjectFromEnvironment(context.Context, *connect.Request[v1.CreateProjectFromEnvironmentRequest]) (*connect.Response[v1.CreateProjectFromEnvironmentResponse], error)
	// GetProject retrieves a single Project.
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	// UpdateProject updates the properties of a Project.
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	// ListProjects lists all projects the caller has access to.
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	// DeleteProject deletes the specified project.
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
	// ListProjectPolicies lists policies for a project.
	ListProjectPolicies(context.Context, *connect.Request[v1.ListProjectPoliciesRequest]) (*connect.Response[v1.ListProjectPoliciesResponse], error)
	// CreateProjectPolicy creates a Project Policy.
	CreateProjectPolicy(context.Context, *connect.Request[v1.CreateProjectPolicyRequest]) (*connect.Response[v1.CreateProjectPolicyResponse], error)
	// DeleteProjectPolicy deletes a Project Policy.
	DeleteProjectPolicy(context.Context, *connect.Request[v1.DeleteProjectPolicyRequest]) (*connect.Response[v1.DeleteProjectPolicyResponse], error)
	// UpdateProjectPolicy updates a Project Policy.
	UpdateProjectPolicy(context.Context, *connect.Request[v1.UpdateProjectPolicyRequest]) (*connect.Response[v1.UpdateProjectPolicyResponse], error)
}

// NewProjectServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectServiceHandler(svc ProjectServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	projectServiceCreateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(projectServiceCreateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceCreateProjectFromEnvironmentHandler := connect.NewUnaryHandler(
		ProjectServiceCreateProjectFromEnvironmentProcedure,
		svc.CreateProjectFromEnvironment,
		connect.WithSchema(projectServiceCreateProjectFromEnvironmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceGetProjectHandler := connect.NewUnaryHandler(
		ProjectServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(projectServiceGetProjectMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(projectServiceUpdateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceListProjectsHandler := connect.NewUnaryHandler(
		ProjectServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(projectServiceListProjectsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeleteProjectHandler := connect.NewUnaryHandler(
		ProjectServiceDeleteProjectProcedure,
		svc.DeleteProject,
		connect.WithSchema(projectServiceDeleteProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceListProjectPoliciesHandler := connect.NewUnaryHandler(
		ProjectServiceListProjectPoliciesProcedure,
		svc.ListProjectPolicies,
		connect.WithSchema(projectServiceListProjectPoliciesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceCreateProjectPolicyHandler := connect.NewUnaryHandler(
		ProjectServiceCreateProjectPolicyProcedure,
		svc.CreateProjectPolicy,
		connect.WithSchema(projectServiceCreateProjectPolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeleteProjectPolicyHandler := connect.NewUnaryHandler(
		ProjectServiceDeleteProjectPolicyProcedure,
		svc.DeleteProjectPolicy,
		connect.WithSchema(projectServiceDeleteProjectPolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateProjectPolicyHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateProjectPolicyProcedure,
		svc.UpdateProjectPolicy,
		connect.WithSchema(projectServiceUpdateProjectPolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.ProjectService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectServiceCreateProjectProcedure:
			projectServiceCreateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceCreateProjectFromEnvironmentProcedure:
			projectServiceCreateProjectFromEnvironmentHandler.ServeHTTP(w, r)
		case ProjectServiceGetProjectProcedure:
			projectServiceGetProjectHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateProjectProcedure:
			projectServiceUpdateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceListProjectsProcedure:
			projectServiceListProjectsHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteProjectProcedure:
			projectServiceDeleteProjectHandler.ServeHTTP(w, r)
		case ProjectServiceListProjectPoliciesProcedure:
			projectServiceListProjectPoliciesHandler.ServeHTTP(w, r)
		case ProjectServiceCreateProjectPolicyProcedure:
			projectServiceCreateProjectPolicyHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteProjectPolicyProcedure:
			projectServiceDeleteProjectPolicyHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateProjectPolicyProcedure:
			projectServiceUpdateProjectPolicyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectServiceHandler struct{}

func (UnimplementedProjectServiceHandler) CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.ProjectService.CreateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) CreateProjectFromEnvironment(context.Context, *connect.Request[v1.CreateProjectFromEnvironmentRequest]) (*connect.Response[v1.CreateProjectFromEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.ProjectService.CreateProjectFromEnvironment is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.ProjectService.GetProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.ProjectService.UpdateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.ProjectService.ListProjects is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.ProjectService.DeleteProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) ListProjectPolicies(context.Context, *connect.Request[v1.ListProjectPoliciesRequest]) (*connect.Response[v1.ListProjectPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.ProjectService.ListProjectPolicies is not implemented"))
}

func (UnimplementedProjectServiceHandler) CreateProjectPolicy(context.Context, *connect.Request[v1.CreateProjectPolicyRequest]) (*connect.Response[v1.CreateProjectPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.ProjectService.CreateProjectPolicy is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteProjectPolicy(context.Context, *connect.Request[v1.DeleteProjectPolicyRequest]) (*connect.Response[v1.DeleteProjectPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.ProjectService.DeleteProjectPolicy is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateProjectPolicy(context.Context, *connect.Request[v1.UpdateProjectPolicyRequest]) (*connect.Response[v1.UpdateProjectPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.ProjectService.UpdateProjectPolicy is not implemented"))
}
