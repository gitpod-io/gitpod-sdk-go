// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/environment_automation.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-api-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnvironmentAutomationServiceName is the fully-qualified name of the EnvironmentAutomationService
	// service.
	EnvironmentAutomationServiceName = "gitpod.v1.EnvironmentAutomationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnvironmentAutomationServiceCreateServiceProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's CreateService RPC.
	EnvironmentAutomationServiceCreateServiceProcedure = "/gitpod.v1.EnvironmentAutomationService/CreateService"
	// EnvironmentAutomationServiceGetServiceProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's GetService RPC.
	EnvironmentAutomationServiceGetServiceProcedure = "/gitpod.v1.EnvironmentAutomationService/GetService"
	// EnvironmentAutomationServiceListServicesProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's ListServices RPC.
	EnvironmentAutomationServiceListServicesProcedure = "/gitpod.v1.EnvironmentAutomationService/ListServices"
	// EnvironmentAutomationServiceUpdateServiceProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's UpdateService RPC.
	EnvironmentAutomationServiceUpdateServiceProcedure = "/gitpod.v1.EnvironmentAutomationService/UpdateService"
	// EnvironmentAutomationServiceDeleteServiceProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's DeleteService RPC.
	EnvironmentAutomationServiceDeleteServiceProcedure = "/gitpod.v1.EnvironmentAutomationService/DeleteService"
	// EnvironmentAutomationServiceStartServiceProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's StartService RPC.
	EnvironmentAutomationServiceStartServiceProcedure = "/gitpod.v1.EnvironmentAutomationService/StartService"
	// EnvironmentAutomationServiceStopServiceProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's StopService RPC.
	EnvironmentAutomationServiceStopServiceProcedure = "/gitpod.v1.EnvironmentAutomationService/StopService"
	// EnvironmentAutomationServiceUpsertAutomationsFileProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's UpsertAutomationsFile RPC.
	EnvironmentAutomationServiceUpsertAutomationsFileProcedure = "/gitpod.v1.EnvironmentAutomationService/UpsertAutomationsFile"
	// EnvironmentAutomationServiceCreateTaskProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's CreateTask RPC.
	EnvironmentAutomationServiceCreateTaskProcedure = "/gitpod.v1.EnvironmentAutomationService/CreateTask"
	// EnvironmentAutomationServiceGetTaskProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's GetTask RPC.
	EnvironmentAutomationServiceGetTaskProcedure = "/gitpod.v1.EnvironmentAutomationService/GetTask"
	// EnvironmentAutomationServiceListTasksProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's ListTasks RPC.
	EnvironmentAutomationServiceListTasksProcedure = "/gitpod.v1.EnvironmentAutomationService/ListTasks"
	// EnvironmentAutomationServiceUpdateTaskProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's UpdateTask RPC.
	EnvironmentAutomationServiceUpdateTaskProcedure = "/gitpod.v1.EnvironmentAutomationService/UpdateTask"
	// EnvironmentAutomationServiceDeleteTaskProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's DeleteTask RPC.
	EnvironmentAutomationServiceDeleteTaskProcedure = "/gitpod.v1.EnvironmentAutomationService/DeleteTask"
	// EnvironmentAutomationServiceStartTaskProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's StartTask RPC.
	EnvironmentAutomationServiceStartTaskProcedure = "/gitpod.v1.EnvironmentAutomationService/StartTask"
	// EnvironmentAutomationServiceListTaskExecutionsProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's ListTaskExecutions RPC.
	EnvironmentAutomationServiceListTaskExecutionsProcedure = "/gitpod.v1.EnvironmentAutomationService/ListTaskExecutions"
	// EnvironmentAutomationServiceGetTaskExecutionProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's GetTaskExecution RPC.
	EnvironmentAutomationServiceGetTaskExecutionProcedure = "/gitpod.v1.EnvironmentAutomationService/GetTaskExecution"
	// EnvironmentAutomationServiceStopTaskExecutionProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's StopTaskExecution RPC.
	EnvironmentAutomationServiceStopTaskExecutionProcedure = "/gitpod.v1.EnvironmentAutomationService/StopTaskExecution"
	// EnvironmentAutomationServiceUpdateTaskExecutionStatusProcedure is the fully-qualified name of the
	// EnvironmentAutomationService's UpdateTaskExecutionStatus RPC.
	EnvironmentAutomationServiceUpdateTaskExecutionStatusProcedure = "/gitpod.v1.EnvironmentAutomationService/UpdateTaskExecutionStatus"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	environmentAutomationServiceServiceDescriptor                         = v1.File_gitpod_v1_environment_automation_proto.Services().ByName("EnvironmentAutomationService")
	environmentAutomationServiceCreateServiceMethodDescriptor             = environmentAutomationServiceServiceDescriptor.Methods().ByName("CreateService")
	environmentAutomationServiceGetServiceMethodDescriptor                = environmentAutomationServiceServiceDescriptor.Methods().ByName("GetService")
	environmentAutomationServiceListServicesMethodDescriptor              = environmentAutomationServiceServiceDescriptor.Methods().ByName("ListServices")
	environmentAutomationServiceUpdateServiceMethodDescriptor             = environmentAutomationServiceServiceDescriptor.Methods().ByName("UpdateService")
	environmentAutomationServiceDeleteServiceMethodDescriptor             = environmentAutomationServiceServiceDescriptor.Methods().ByName("DeleteService")
	environmentAutomationServiceStartServiceMethodDescriptor              = environmentAutomationServiceServiceDescriptor.Methods().ByName("StartService")
	environmentAutomationServiceStopServiceMethodDescriptor               = environmentAutomationServiceServiceDescriptor.Methods().ByName("StopService")
	environmentAutomationServiceUpsertAutomationsFileMethodDescriptor     = environmentAutomationServiceServiceDescriptor.Methods().ByName("UpsertAutomationsFile")
	environmentAutomationServiceCreateTaskMethodDescriptor                = environmentAutomationServiceServiceDescriptor.Methods().ByName("CreateTask")
	environmentAutomationServiceGetTaskMethodDescriptor                   = environmentAutomationServiceServiceDescriptor.Methods().ByName("GetTask")
	environmentAutomationServiceListTasksMethodDescriptor                 = environmentAutomationServiceServiceDescriptor.Methods().ByName("ListTasks")
	environmentAutomationServiceUpdateTaskMethodDescriptor                = environmentAutomationServiceServiceDescriptor.Methods().ByName("UpdateTask")
	environmentAutomationServiceDeleteTaskMethodDescriptor                = environmentAutomationServiceServiceDescriptor.Methods().ByName("DeleteTask")
	environmentAutomationServiceStartTaskMethodDescriptor                 = environmentAutomationServiceServiceDescriptor.Methods().ByName("StartTask")
	environmentAutomationServiceListTaskExecutionsMethodDescriptor        = environmentAutomationServiceServiceDescriptor.Methods().ByName("ListTaskExecutions")
	environmentAutomationServiceGetTaskExecutionMethodDescriptor          = environmentAutomationServiceServiceDescriptor.Methods().ByName("GetTaskExecution")
	environmentAutomationServiceStopTaskExecutionMethodDescriptor         = environmentAutomationServiceServiceDescriptor.Methods().ByName("StopTaskExecution")
	environmentAutomationServiceUpdateTaskExecutionStatusMethodDescriptor = environmentAutomationServiceServiceDescriptor.Methods().ByName("UpdateTaskExecutionStatus")
)

// EnvironmentAutomationServiceClient is a client for the gitpod.v1.EnvironmentAutomationService
// service.
type EnvironmentAutomationServiceClient interface {
	CreateService(context.Context, *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v1.CreateServiceResponse], error)
	GetService(context.Context, *connect.Request[v1.GetServiceRequest]) (*connect.Response[v1.GetServiceResponse], error)
	ListServices(context.Context, *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error)
	UpdateService(context.Context, *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v1.UpdateServiceResponse], error)
	// DeleteService deletes a service. This call does not block until the service is deleted.
	// If the service is not stopped it will be stopped before deletion.
	DeleteService(context.Context, *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[v1.DeleteServiceResponse], error)
	// StartService starts a service. This call does not block until the service is started.
	// This call will not error if the service is already running or has been started.
	StartService(context.Context, *connect.Request[v1.StartServiceRequest]) (*connect.Response[v1.StartServiceResponse], error)
	// StopService stops a service. This call does not block until the service is stopped.
	// This call will not error if the service is already stopped or has been stopped.
	StopService(context.Context, *connect.Request[v1.StopServiceRequest]) (*connect.Response[v1.StopServiceResponse], error)
	// UpsertAutomationsFile upserts the automations file for the given environment.
	UpsertAutomationsFile(context.Context, *connect.Request[v1.UpsertAutomationsFileRequest]) (*connect.Response[v1.UpsertAutomationsFileResponse], error)
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	// StartTask starts a task, i.e. creates a task execution.
	// This call does not block until the task is started; the task will be started asynchronously.
	StartTask(context.Context, *connect.Request[v1.StartTaskRequest]) (*connect.Response[v1.StartTaskResponse], error)
	ListTaskExecutions(context.Context, *connect.Request[v1.ListTaskExecutionsRequest]) (*connect.Response[v1.ListTaskExecutionsResponse], error)
	GetTaskExecution(context.Context, *connect.Request[v1.GetTaskExecutionRequest]) (*connect.Response[v1.GetTaskExecutionResponse], error)
	StopTaskExecution(context.Context, *connect.Request[v1.StopTaskExecutionRequest]) (*connect.Response[v1.StopTaskExecutionResponse], error)
	// UpdateTaskExecutionStatus updates the status of a task execution. Only the environment executing a task execution is expected to call this function.
	UpdateTaskExecutionStatus(context.Context, *connect.Request[v1.UpdateTaskExecutionStatusRequest]) (*connect.Response[v1.UpdateTaskExecutionStatusResponse], error)
}

// NewEnvironmentAutomationServiceClient constructs a client for the
// gitpod.v1.EnvironmentAutomationService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnvironmentAutomationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnvironmentAutomationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &environmentAutomationServiceClient{
		createService: connect.NewClient[v1.CreateServiceRequest, v1.CreateServiceResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceCreateServiceProcedure,
			connect.WithSchema(environmentAutomationServiceCreateServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getService: connect.NewClient[v1.GetServiceRequest, v1.GetServiceResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceGetServiceProcedure,
			connect.WithSchema(environmentAutomationServiceGetServiceMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listServices: connect.NewClient[v1.ListServicesRequest, v1.ListServicesResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceListServicesProcedure,
			connect.WithSchema(environmentAutomationServiceListServicesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateService: connect.NewClient[v1.UpdateServiceRequest, v1.UpdateServiceResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceUpdateServiceProcedure,
			connect.WithSchema(environmentAutomationServiceUpdateServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteService: connect.NewClient[v1.DeleteServiceRequest, v1.DeleteServiceResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceDeleteServiceProcedure,
			connect.WithSchema(environmentAutomationServiceDeleteServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startService: connect.NewClient[v1.StartServiceRequest, v1.StartServiceResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceStartServiceProcedure,
			connect.WithSchema(environmentAutomationServiceStartServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopService: connect.NewClient[v1.StopServiceRequest, v1.StopServiceResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceStopServiceProcedure,
			connect.WithSchema(environmentAutomationServiceStopServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		upsertAutomationsFile: connect.NewClient[v1.UpsertAutomationsFileRequest, v1.UpsertAutomationsFileResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceUpsertAutomationsFileProcedure,
			connect.WithSchema(environmentAutomationServiceUpsertAutomationsFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceCreateTaskProcedure,
			connect.WithSchema(environmentAutomationServiceCreateTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[v1.GetTaskRequest, v1.GetTaskResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceGetTaskProcedure,
			connect.WithSchema(environmentAutomationServiceGetTaskMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listTasks: connect.NewClient[v1.ListTasksRequest, v1.ListTasksResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceListTasksProcedure,
			connect.WithSchema(environmentAutomationServiceListTasksMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateTask: connect.NewClient[v1.UpdateTaskRequest, v1.UpdateTaskResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceUpdateTaskProcedure,
			connect.WithSchema(environmentAutomationServiceUpdateTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteTaskResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceDeleteTaskProcedure,
			connect.WithSchema(environmentAutomationServiceDeleteTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startTask: connect.NewClient[v1.StartTaskRequest, v1.StartTaskResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceStartTaskProcedure,
			connect.WithSchema(environmentAutomationServiceStartTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTaskExecutions: connect.NewClient[v1.ListTaskExecutionsRequest, v1.ListTaskExecutionsResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceListTaskExecutionsProcedure,
			connect.WithSchema(environmentAutomationServiceListTaskExecutionsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getTaskExecution: connect.NewClient[v1.GetTaskExecutionRequest, v1.GetTaskExecutionResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceGetTaskExecutionProcedure,
			connect.WithSchema(environmentAutomationServiceGetTaskExecutionMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		stopTaskExecution: connect.NewClient[v1.StopTaskExecutionRequest, v1.StopTaskExecutionResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceStopTaskExecutionProcedure,
			connect.WithSchema(environmentAutomationServiceStopTaskExecutionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTaskExecutionStatus: connect.NewClient[v1.UpdateTaskExecutionStatusRequest, v1.UpdateTaskExecutionStatusResponse](
			httpClient,
			baseURL+EnvironmentAutomationServiceUpdateTaskExecutionStatusProcedure,
			connect.WithSchema(environmentAutomationServiceUpdateTaskExecutionStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// environmentAutomationServiceClient implements EnvironmentAutomationServiceClient.
type environmentAutomationServiceClient struct {
	createService             *connect.Client[v1.CreateServiceRequest, v1.CreateServiceResponse]
	getService                *connect.Client[v1.GetServiceRequest, v1.GetServiceResponse]
	listServices              *connect.Client[v1.ListServicesRequest, v1.ListServicesResponse]
	updateService             *connect.Client[v1.UpdateServiceRequest, v1.UpdateServiceResponse]
	deleteService             *connect.Client[v1.DeleteServiceRequest, v1.DeleteServiceResponse]
	startService              *connect.Client[v1.StartServiceRequest, v1.StartServiceResponse]
	stopService               *connect.Client[v1.StopServiceRequest, v1.StopServiceResponse]
	upsertAutomationsFile     *connect.Client[v1.UpsertAutomationsFileRequest, v1.UpsertAutomationsFileResponse]
	createTask                *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	getTask                   *connect.Client[v1.GetTaskRequest, v1.GetTaskResponse]
	listTasks                 *connect.Client[v1.ListTasksRequest, v1.ListTasksResponse]
	updateTask                *connect.Client[v1.UpdateTaskRequest, v1.UpdateTaskResponse]
	deleteTask                *connect.Client[v1.DeleteTaskRequest, v1.DeleteTaskResponse]
	startTask                 *connect.Client[v1.StartTaskRequest, v1.StartTaskResponse]
	listTaskExecutions        *connect.Client[v1.ListTaskExecutionsRequest, v1.ListTaskExecutionsResponse]
	getTaskExecution          *connect.Client[v1.GetTaskExecutionRequest, v1.GetTaskExecutionResponse]
	stopTaskExecution         *connect.Client[v1.StopTaskExecutionRequest, v1.StopTaskExecutionResponse]
	updateTaskExecutionStatus *connect.Client[v1.UpdateTaskExecutionStatusRequest, v1.UpdateTaskExecutionStatusResponse]
}

// CreateService calls gitpod.v1.EnvironmentAutomationService.CreateService.
func (c *environmentAutomationServiceClient) CreateService(ctx context.Context, req *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v1.CreateServiceResponse], error) {
	return c.createService.CallUnary(ctx, req)
}

// GetService calls gitpod.v1.EnvironmentAutomationService.GetService.
func (c *environmentAutomationServiceClient) GetService(ctx context.Context, req *connect.Request[v1.GetServiceRequest]) (*connect.Response[v1.GetServiceResponse], error) {
	return c.getService.CallUnary(ctx, req)
}

// ListServices calls gitpod.v1.EnvironmentAutomationService.ListServices.
func (c *environmentAutomationServiceClient) ListServices(ctx context.Context, req *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error) {
	return c.listServices.CallUnary(ctx, req)
}

// UpdateService calls gitpod.v1.EnvironmentAutomationService.UpdateService.
func (c *environmentAutomationServiceClient) UpdateService(ctx context.Context, req *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v1.UpdateServiceResponse], error) {
	return c.updateService.CallUnary(ctx, req)
}

// DeleteService calls gitpod.v1.EnvironmentAutomationService.DeleteService.
func (c *environmentAutomationServiceClient) DeleteService(ctx context.Context, req *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[v1.DeleteServiceResponse], error) {
	return c.deleteService.CallUnary(ctx, req)
}

// StartService calls gitpod.v1.EnvironmentAutomationService.StartService.
func (c *environmentAutomationServiceClient) StartService(ctx context.Context, req *connect.Request[v1.StartServiceRequest]) (*connect.Response[v1.StartServiceResponse], error) {
	return c.startService.CallUnary(ctx, req)
}

// StopService calls gitpod.v1.EnvironmentAutomationService.StopService.
func (c *environmentAutomationServiceClient) StopService(ctx context.Context, req *connect.Request[v1.StopServiceRequest]) (*connect.Response[v1.StopServiceResponse], error) {
	return c.stopService.CallUnary(ctx, req)
}

// UpsertAutomationsFile calls gitpod.v1.EnvironmentAutomationService.UpsertAutomationsFile.
func (c *environmentAutomationServiceClient) UpsertAutomationsFile(ctx context.Context, req *connect.Request[v1.UpsertAutomationsFileRequest]) (*connect.Response[v1.UpsertAutomationsFileResponse], error) {
	return c.upsertAutomationsFile.CallUnary(ctx, req)
}

// CreateTask calls gitpod.v1.EnvironmentAutomationService.CreateTask.
func (c *environmentAutomationServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// GetTask calls gitpod.v1.EnvironmentAutomationService.GetTask.
func (c *environmentAutomationServiceClient) GetTask(ctx context.Context, req *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// ListTasks calls gitpod.v1.EnvironmentAutomationService.ListTasks.
func (c *environmentAutomationServiceClient) ListTasks(ctx context.Context, req *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// UpdateTask calls gitpod.v1.EnvironmentAutomationService.UpdateTask.
func (c *environmentAutomationServiceClient) UpdateTask(ctx context.Context, req *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return c.updateTask.CallUnary(ctx, req)
}

// DeleteTask calls gitpod.v1.EnvironmentAutomationService.DeleteTask.
func (c *environmentAutomationServiceClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// StartTask calls gitpod.v1.EnvironmentAutomationService.StartTask.
func (c *environmentAutomationServiceClient) StartTask(ctx context.Context, req *connect.Request[v1.StartTaskRequest]) (*connect.Response[v1.StartTaskResponse], error) {
	return c.startTask.CallUnary(ctx, req)
}

// ListTaskExecutions calls gitpod.v1.EnvironmentAutomationService.ListTaskExecutions.
func (c *environmentAutomationServiceClient) ListTaskExecutions(ctx context.Context, req *connect.Request[v1.ListTaskExecutionsRequest]) (*connect.Response[v1.ListTaskExecutionsResponse], error) {
	return c.listTaskExecutions.CallUnary(ctx, req)
}

// GetTaskExecution calls gitpod.v1.EnvironmentAutomationService.GetTaskExecution.
func (c *environmentAutomationServiceClient) GetTaskExecution(ctx context.Context, req *connect.Request[v1.GetTaskExecutionRequest]) (*connect.Response[v1.GetTaskExecutionResponse], error) {
	return c.getTaskExecution.CallUnary(ctx, req)
}

// StopTaskExecution calls gitpod.v1.EnvironmentAutomationService.StopTaskExecution.
func (c *environmentAutomationServiceClient) StopTaskExecution(ctx context.Context, req *connect.Request[v1.StopTaskExecutionRequest]) (*connect.Response[v1.StopTaskExecutionResponse], error) {
	return c.stopTaskExecution.CallUnary(ctx, req)
}

// UpdateTaskExecutionStatus calls gitpod.v1.EnvironmentAutomationService.UpdateTaskExecutionStatus.
func (c *environmentAutomationServiceClient) UpdateTaskExecutionStatus(ctx context.Context, req *connect.Request[v1.UpdateTaskExecutionStatusRequest]) (*connect.Response[v1.UpdateTaskExecutionStatusResponse], error) {
	return c.updateTaskExecutionStatus.CallUnary(ctx, req)
}

// EnvironmentAutomationServiceHandler is an implementation of the
// gitpod.v1.EnvironmentAutomationService service.
type EnvironmentAutomationServiceHandler interface {
	CreateService(context.Context, *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v1.CreateServiceResponse], error)
	GetService(context.Context, *connect.Request[v1.GetServiceRequest]) (*connect.Response[v1.GetServiceResponse], error)
	ListServices(context.Context, *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error)
	UpdateService(context.Context, *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v1.UpdateServiceResponse], error)
	// DeleteService deletes a service. This call does not block until the service is deleted.
	// If the service is not stopped it will be stopped before deletion.
	DeleteService(context.Context, *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[v1.DeleteServiceResponse], error)
	// StartService starts a service. This call does not block until the service is started.
	// This call will not error if the service is already running or has been started.
	StartService(context.Context, *connect.Request[v1.StartServiceRequest]) (*connect.Response[v1.StartServiceResponse], error)
	// StopService stops a service. This call does not block until the service is stopped.
	// This call will not error if the service is already stopped or has been stopped.
	StopService(context.Context, *connect.Request[v1.StopServiceRequest]) (*connect.Response[v1.StopServiceResponse], error)
	// UpsertAutomationsFile upserts the automations file for the given environment.
	UpsertAutomationsFile(context.Context, *connect.Request[v1.UpsertAutomationsFileRequest]) (*connect.Response[v1.UpsertAutomationsFileResponse], error)
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	// StartTask starts a task, i.e. creates a task execution.
	// This call does not block until the task is started; the task will be started asynchronously.
	StartTask(context.Context, *connect.Request[v1.StartTaskRequest]) (*connect.Response[v1.StartTaskResponse], error)
	ListTaskExecutions(context.Context, *connect.Request[v1.ListTaskExecutionsRequest]) (*connect.Response[v1.ListTaskExecutionsResponse], error)
	GetTaskExecution(context.Context, *connect.Request[v1.GetTaskExecutionRequest]) (*connect.Response[v1.GetTaskExecutionResponse], error)
	StopTaskExecution(context.Context, *connect.Request[v1.StopTaskExecutionRequest]) (*connect.Response[v1.StopTaskExecutionResponse], error)
	// UpdateTaskExecutionStatus updates the status of a task execution. Only the environment executing a task execution is expected to call this function.
	UpdateTaskExecutionStatus(context.Context, *connect.Request[v1.UpdateTaskExecutionStatusRequest]) (*connect.Response[v1.UpdateTaskExecutionStatusResponse], error)
}

// NewEnvironmentAutomationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnvironmentAutomationServiceHandler(svc EnvironmentAutomationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	environmentAutomationServiceCreateServiceHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceCreateServiceProcedure,
		svc.CreateService,
		connect.WithSchema(environmentAutomationServiceCreateServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceGetServiceHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceGetServiceProcedure,
		svc.GetService,
		connect.WithSchema(environmentAutomationServiceGetServiceMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceListServicesHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceListServicesProcedure,
		svc.ListServices,
		connect.WithSchema(environmentAutomationServiceListServicesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceUpdateServiceHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceUpdateServiceProcedure,
		svc.UpdateService,
		connect.WithSchema(environmentAutomationServiceUpdateServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceDeleteServiceHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceDeleteServiceProcedure,
		svc.DeleteService,
		connect.WithSchema(environmentAutomationServiceDeleteServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceStartServiceHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceStartServiceProcedure,
		svc.StartService,
		connect.WithSchema(environmentAutomationServiceStartServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceStopServiceHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceStopServiceProcedure,
		svc.StopService,
		connect.WithSchema(environmentAutomationServiceStopServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceUpsertAutomationsFileHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceUpsertAutomationsFileProcedure,
		svc.UpsertAutomationsFile,
		connect.WithSchema(environmentAutomationServiceUpsertAutomationsFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceCreateTaskHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(environmentAutomationServiceCreateTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceGetTaskHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(environmentAutomationServiceGetTaskMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceListTasksHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(environmentAutomationServiceListTasksMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceUpdateTaskHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceUpdateTaskProcedure,
		svc.UpdateTask,
		connect.WithSchema(environmentAutomationServiceUpdateTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceDeleteTaskHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(environmentAutomationServiceDeleteTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceStartTaskHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceStartTaskProcedure,
		svc.StartTask,
		connect.WithSchema(environmentAutomationServiceStartTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceListTaskExecutionsHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceListTaskExecutionsProcedure,
		svc.ListTaskExecutions,
		connect.WithSchema(environmentAutomationServiceListTaskExecutionsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceGetTaskExecutionHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceGetTaskExecutionProcedure,
		svc.GetTaskExecution,
		connect.WithSchema(environmentAutomationServiceGetTaskExecutionMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceStopTaskExecutionHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceStopTaskExecutionProcedure,
		svc.StopTaskExecution,
		connect.WithSchema(environmentAutomationServiceStopTaskExecutionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentAutomationServiceUpdateTaskExecutionStatusHandler := connect.NewUnaryHandler(
		EnvironmentAutomationServiceUpdateTaskExecutionStatusProcedure,
		svc.UpdateTaskExecutionStatus,
		connect.WithSchema(environmentAutomationServiceUpdateTaskExecutionStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.EnvironmentAutomationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnvironmentAutomationServiceCreateServiceProcedure:
			environmentAutomationServiceCreateServiceHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceGetServiceProcedure:
			environmentAutomationServiceGetServiceHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceListServicesProcedure:
			environmentAutomationServiceListServicesHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceUpdateServiceProcedure:
			environmentAutomationServiceUpdateServiceHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceDeleteServiceProcedure:
			environmentAutomationServiceDeleteServiceHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceStartServiceProcedure:
			environmentAutomationServiceStartServiceHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceStopServiceProcedure:
			environmentAutomationServiceStopServiceHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceUpsertAutomationsFileProcedure:
			environmentAutomationServiceUpsertAutomationsFileHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceCreateTaskProcedure:
			environmentAutomationServiceCreateTaskHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceGetTaskProcedure:
			environmentAutomationServiceGetTaskHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceListTasksProcedure:
			environmentAutomationServiceListTasksHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceUpdateTaskProcedure:
			environmentAutomationServiceUpdateTaskHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceDeleteTaskProcedure:
			environmentAutomationServiceDeleteTaskHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceStartTaskProcedure:
			environmentAutomationServiceStartTaskHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceListTaskExecutionsProcedure:
			environmentAutomationServiceListTaskExecutionsHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceGetTaskExecutionProcedure:
			environmentAutomationServiceGetTaskExecutionHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceStopTaskExecutionProcedure:
			environmentAutomationServiceStopTaskExecutionHandler.ServeHTTP(w, r)
		case EnvironmentAutomationServiceUpdateTaskExecutionStatusProcedure:
			environmentAutomationServiceUpdateTaskExecutionStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnvironmentAutomationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnvironmentAutomationServiceHandler struct{}

func (UnimplementedEnvironmentAutomationServiceHandler) CreateService(context.Context, *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v1.CreateServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.CreateService is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) GetService(context.Context, *connect.Request[v1.GetServiceRequest]) (*connect.Response[v1.GetServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.GetService is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) ListServices(context.Context, *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.ListServices is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) UpdateService(context.Context, *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v1.UpdateServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.UpdateService is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) DeleteService(context.Context, *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[v1.DeleteServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.DeleteService is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) StartService(context.Context, *connect.Request[v1.StartServiceRequest]) (*connect.Response[v1.StartServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.StartService is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) StopService(context.Context, *connect.Request[v1.StopServiceRequest]) (*connect.Response[v1.StopServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.StopService is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) UpsertAutomationsFile(context.Context, *connect.Request[v1.UpsertAutomationsFileRequest]) (*connect.Response[v1.UpsertAutomationsFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.UpsertAutomationsFile is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.CreateTask is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.GetTask is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.ListTasks is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.UpdateTask is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.DeleteTask is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) StartTask(context.Context, *connect.Request[v1.StartTaskRequest]) (*connect.Response[v1.StartTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.StartTask is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) ListTaskExecutions(context.Context, *connect.Request[v1.ListTaskExecutionsRequest]) (*connect.Response[v1.ListTaskExecutionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.ListTaskExecutions is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) GetTaskExecution(context.Context, *connect.Request[v1.GetTaskExecutionRequest]) (*connect.Response[v1.GetTaskExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.GetTaskExecution is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) StopTaskExecution(context.Context, *connect.Request[v1.StopTaskExecutionRequest]) (*connect.Response[v1.StopTaskExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.StopTaskExecution is not implemented"))
}

func (UnimplementedEnvironmentAutomationServiceHandler) UpdateTaskExecutionStatus(context.Context, *connect.Request[v1.UpdateTaskExecutionStatusRequest]) (*connect.Response[v1.UpdateTaskExecutionStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EnvironmentAutomationService.UpdateTaskExecutionStatus is not implemented"))
}
