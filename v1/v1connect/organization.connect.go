// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/organization.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-api-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrganizationServiceName is the fully-qualified name of the OrganizationService service.
	OrganizationServiceName = "gitpod.v1.OrganizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrganizationServiceCreateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's CreateOrganization RPC.
	OrganizationServiceCreateOrganizationProcedure = "/gitpod.v1.OrganizationService/CreateOrganization"
	// OrganizationServiceJoinOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's JoinOrganization RPC.
	OrganizationServiceJoinOrganizationProcedure = "/gitpod.v1.OrganizationService/JoinOrganization"
	// OrganizationServiceGetOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's GetOrganization RPC.
	OrganizationServiceGetOrganizationProcedure = "/gitpod.v1.OrganizationService/GetOrganization"
	// OrganizationServiceUpdateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's UpdateOrganization RPC.
	OrganizationServiceUpdateOrganizationProcedure = "/gitpod.v1.OrganizationService/UpdateOrganization"
	// OrganizationServiceListOrganizationsProcedure is the fully-qualified name of the
	// OrganizationService's ListOrganizations RPC.
	OrganizationServiceListOrganizationsProcedure = "/gitpod.v1.OrganizationService/ListOrganizations"
	// OrganizationServiceDeleteOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's DeleteOrganization RPC.
	OrganizationServiceDeleteOrganizationProcedure = "/gitpod.v1.OrganizationService/DeleteOrganization"
	// OrganizationServiceListMembersProcedure is the fully-qualified name of the OrganizationService's
	// ListMembers RPC.
	OrganizationServiceListMembersProcedure = "/gitpod.v1.OrganizationService/ListMembers"
	// OrganizationServiceSetRoleProcedure is the fully-qualified name of the OrganizationService's
	// SetRole RPC.
	OrganizationServiceSetRoleProcedure = "/gitpod.v1.OrganizationService/SetRole"
	// OrganizationServiceCreateOrganizationInviteProcedure is the fully-qualified name of the
	// OrganizationService's CreateOrganizationInvite RPC.
	OrganizationServiceCreateOrganizationInviteProcedure = "/gitpod.v1.OrganizationService/CreateOrganizationInvite"
	// OrganizationServiceGetOrganizationInviteProcedure is the fully-qualified name of the
	// OrganizationService's GetOrganizationInvite RPC.
	OrganizationServiceGetOrganizationInviteProcedure = "/gitpod.v1.OrganizationService/GetOrganizationInvite"
	// OrganizationServiceGetOrganizationInviteSummaryProcedure is the fully-qualified name of the
	// OrganizationService's GetOrganizationInviteSummary RPC.
	OrganizationServiceGetOrganizationInviteSummaryProcedure = "/gitpod.v1.OrganizationService/GetOrganizationInviteSummary"
	// OrganizationServiceLeaveOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's LeaveOrganization RPC.
	OrganizationServiceLeaveOrganizationProcedure = "/gitpod.v1.OrganizationService/LeaveOrganization"
	// OrganizationServiceCreateSSOConfigurationProcedure is the fully-qualified name of the
	// OrganizationService's CreateSSOConfiguration RPC.
	OrganizationServiceCreateSSOConfigurationProcedure = "/gitpod.v1.OrganizationService/CreateSSOConfiguration"
	// OrganizationServiceGetSSOConfigurationProcedure is the fully-qualified name of the
	// OrganizationService's GetSSOConfiguration RPC.
	OrganizationServiceGetSSOConfigurationProcedure = "/gitpod.v1.OrganizationService/GetSSOConfiguration"
	// OrganizationServiceListSSOConfigurationsProcedure is the fully-qualified name of the
	// OrganizationService's ListSSOConfigurations RPC.
	OrganizationServiceListSSOConfigurationsProcedure = "/gitpod.v1.OrganizationService/ListSSOConfigurations"
	// OrganizationServiceDeleteSSOConfigurationProcedure is the fully-qualified name of the
	// OrganizationService's DeleteSSOConfiguration RPC.
	OrganizationServiceDeleteSSOConfigurationProcedure = "/gitpod.v1.OrganizationService/DeleteSSOConfiguration"
	// OrganizationServiceUpdateSSOConfigurationProcedure is the fully-qualified name of the
	// OrganizationService's UpdateSSOConfiguration RPC.
	OrganizationServiceUpdateSSOConfigurationProcedure = "/gitpod.v1.OrganizationService/UpdateSSOConfiguration"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	organizationServiceServiceDescriptor                            = v1.File_gitpod_v1_organization_proto.Services().ByName("OrganizationService")
	organizationServiceCreateOrganizationMethodDescriptor           = organizationServiceServiceDescriptor.Methods().ByName("CreateOrganization")
	organizationServiceJoinOrganizationMethodDescriptor             = organizationServiceServiceDescriptor.Methods().ByName("JoinOrganization")
	organizationServiceGetOrganizationMethodDescriptor              = organizationServiceServiceDescriptor.Methods().ByName("GetOrganization")
	organizationServiceUpdateOrganizationMethodDescriptor           = organizationServiceServiceDescriptor.Methods().ByName("UpdateOrganization")
	organizationServiceListOrganizationsMethodDescriptor            = organizationServiceServiceDescriptor.Methods().ByName("ListOrganizations")
	organizationServiceDeleteOrganizationMethodDescriptor           = organizationServiceServiceDescriptor.Methods().ByName("DeleteOrganization")
	organizationServiceListMembersMethodDescriptor                  = organizationServiceServiceDescriptor.Methods().ByName("ListMembers")
	organizationServiceSetRoleMethodDescriptor                      = organizationServiceServiceDescriptor.Methods().ByName("SetRole")
	organizationServiceCreateOrganizationInviteMethodDescriptor     = organizationServiceServiceDescriptor.Methods().ByName("CreateOrganizationInvite")
	organizationServiceGetOrganizationInviteMethodDescriptor        = organizationServiceServiceDescriptor.Methods().ByName("GetOrganizationInvite")
	organizationServiceGetOrganizationInviteSummaryMethodDescriptor = organizationServiceServiceDescriptor.Methods().ByName("GetOrganizationInviteSummary")
	organizationServiceLeaveOrganizationMethodDescriptor            = organizationServiceServiceDescriptor.Methods().ByName("LeaveOrganization")
	organizationServiceCreateSSOConfigurationMethodDescriptor       = organizationServiceServiceDescriptor.Methods().ByName("CreateSSOConfiguration")
	organizationServiceGetSSOConfigurationMethodDescriptor          = organizationServiceServiceDescriptor.Methods().ByName("GetSSOConfiguration")
	organizationServiceListSSOConfigurationsMethodDescriptor        = organizationServiceServiceDescriptor.Methods().ByName("ListSSOConfigurations")
	organizationServiceDeleteSSOConfigurationMethodDescriptor       = organizationServiceServiceDescriptor.Methods().ByName("DeleteSSOConfiguration")
	organizationServiceUpdateSSOConfigurationMethodDescriptor       = organizationServiceServiceDescriptor.Methods().ByName("UpdateSSOConfiguration")
)

// OrganizationServiceClient is a client for the gitpod.v1.OrganizationService service.
type OrganizationServiceClient interface {
	// CreateOrganization creates a new Organization.
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	// JoinOrganization lets accounts join an Organization.
	JoinOrganization(context.Context, *connect.Request[v1.JoinOrganizationRequest]) (*connect.Response[v1.JoinOrganizationResponse], error)
	// GetOrganization retrieves a single Organization.
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	// UpdateOrganization updates the properties of an Organization.
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	// ListOrganizations lists all organization the caller has access to.
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	// DeleteOrganization deletes the specified organization.
	DeleteOrganization(context.Context, *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error)
	// ListMembers lists all members of the specified organization.
	ListMembers(context.Context, *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error)
	SetRole(context.Context, *connect.Request[v1.SetRoleRequest]) (*connect.Response[v1.SetRoleResponse], error)
	// CreateOrganizationInvite creates an invite for the organization.
	// Any existing OrganizationInvites are invalidated and can no longer be used.
	CreateOrganizationInvite(context.Context, *connect.Request[v1.CreateOrganizationInviteRequest]) (*connect.Response[v1.CreateOrganizationInviteResponse], error)
	// GetOrganizationInvite retrieves invite for the organization.
	// If no invite exists, a new one is created.
	GetOrganizationInvite(context.Context, *connect.Request[v1.GetOrganizationInviteRequest]) (*connect.Response[v1.GetOrganizationInviteResponse], error)
	// GetOrganizationInviteSummary retrieves a summary of the organization based on an Invite ID.
	// Used to discover which organization an invite is for.
	GetOrganizationInviteSummary(context.Context, *connect.Request[v1.GetOrganizationInviteSummaryRequest]) (*connect.Response[v1.GetOrganizationInviteSummaryResponse], error)
	// LeaveOrganization lets the passed user leave an Organization.
	LeaveOrganization(context.Context, *connect.Request[v1.LeaveOrganizationRequest]) (*connect.Response[v1.LeaveOrganizationResponse], error)
	// CreateSSOConfiguration creates a new SSO configuration for the organization.
	CreateSSOConfiguration(context.Context, *connect.Request[v1.CreateSSOConfigurationRequest]) (*connect.Response[v1.CreateSSOConfigurationResponse], error)
	// GetSSOConfiguration returns an SSO configuration.
	GetSSOConfiguration(context.Context, *connect.Request[v1.GetSSOConfigurationRequest]) (*connect.Response[v1.GetSSOConfigurationResponse], error)
	// ListSSOConfigurations lists all SSO configurations matching provided filters.
	ListSSOConfigurations(context.Context, *connect.Request[v1.ListSSOConfigurationsRequest]) (*connect.Response[v1.ListSSOConfigurationsResponse], error)
	// DeleteSSOConfiguration deletes an SSO configuration.
	DeleteSSOConfiguration(context.Context, *connect.Request[v1.DeleteSSOConfigurationRequest]) (*connect.Response[v1.DeleteSSOConfigurationResponse], error)
	// UpdateSSOConfiguration updates the SSO configuration for the organization.
	UpdateSSOConfiguration(context.Context, *connect.Request[v1.UpdateSSOConfigurationRequest]) (*connect.Response[v1.UpdateSSOConfigurationResponse], error)
}

// NewOrganizationServiceClient constructs a client for the gitpod.v1.OrganizationService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrganizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &organizationServiceClient{
		createOrganization: connect.NewClient[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceCreateOrganizationProcedure,
			connect.WithSchema(organizationServiceCreateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		joinOrganization: connect.NewClient[v1.JoinOrganizationRequest, v1.JoinOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceJoinOrganizationProcedure,
			connect.WithSchema(organizationServiceJoinOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrganization: connect.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceGetOrganizationProcedure,
			connect.WithSchema(organizationServiceGetOrganizationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateOrganizationProcedure,
			connect.WithSchema(organizationServiceUpdateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse](
			httpClient,
			baseURL+OrganizationServiceListOrganizationsProcedure,
			connect.WithSchema(organizationServiceListOrganizationsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteOrganization: connect.NewClient[v1.DeleteOrganizationRequest, v1.DeleteOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceDeleteOrganizationProcedure,
			connect.WithSchema(organizationServiceDeleteOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMembers: connect.NewClient[v1.ListMembersRequest, v1.ListMembersResponse](
			httpClient,
			baseURL+OrganizationServiceListMembersProcedure,
			connect.WithSchema(organizationServiceListMembersMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		setRole: connect.NewClient[v1.SetRoleRequest, v1.SetRoleResponse](
			httpClient,
			baseURL+OrganizationServiceSetRoleProcedure,
			connect.WithSchema(organizationServiceSetRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOrganizationInvite: connect.NewClient[v1.CreateOrganizationInviteRequest, v1.CreateOrganizationInviteResponse](
			httpClient,
			baseURL+OrganizationServiceCreateOrganizationInviteProcedure,
			connect.WithSchema(organizationServiceCreateOrganizationInviteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrganizationInvite: connect.NewClient[v1.GetOrganizationInviteRequest, v1.GetOrganizationInviteResponse](
			httpClient,
			baseURL+OrganizationServiceGetOrganizationInviteProcedure,
			connect.WithSchema(organizationServiceGetOrganizationInviteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrganizationInviteSummary: connect.NewClient[v1.GetOrganizationInviteSummaryRequest, v1.GetOrganizationInviteSummaryResponse](
			httpClient,
			baseURL+OrganizationServiceGetOrganizationInviteSummaryProcedure,
			connect.WithSchema(organizationServiceGetOrganizationInviteSummaryMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		leaveOrganization: connect.NewClient[v1.LeaveOrganizationRequest, v1.LeaveOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceLeaveOrganizationProcedure,
			connect.WithSchema(organizationServiceLeaveOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createSSOConfiguration: connect.NewClient[v1.CreateSSOConfigurationRequest, v1.CreateSSOConfigurationResponse](
			httpClient,
			baseURL+OrganizationServiceCreateSSOConfigurationProcedure,
			connect.WithSchema(organizationServiceCreateSSOConfigurationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSSOConfiguration: connect.NewClient[v1.GetSSOConfigurationRequest, v1.GetSSOConfigurationResponse](
			httpClient,
			baseURL+OrganizationServiceGetSSOConfigurationProcedure,
			connect.WithSchema(organizationServiceGetSSOConfigurationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listSSOConfigurations: connect.NewClient[v1.ListSSOConfigurationsRequest, v1.ListSSOConfigurationsResponse](
			httpClient,
			baseURL+OrganizationServiceListSSOConfigurationsProcedure,
			connect.WithSchema(organizationServiceListSSOConfigurationsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteSSOConfiguration: connect.NewClient[v1.DeleteSSOConfigurationRequest, v1.DeleteSSOConfigurationResponse](
			httpClient,
			baseURL+OrganizationServiceDeleteSSOConfigurationProcedure,
			connect.WithSchema(organizationServiceDeleteSSOConfigurationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateSSOConfiguration: connect.NewClient[v1.UpdateSSOConfigurationRequest, v1.UpdateSSOConfigurationResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateSSOConfigurationProcedure,
			connect.WithSchema(organizationServiceUpdateSSOConfigurationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// organizationServiceClient implements OrganizationServiceClient.
type organizationServiceClient struct {
	createOrganization           *connect.Client[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse]
	joinOrganization             *connect.Client[v1.JoinOrganizationRequest, v1.JoinOrganizationResponse]
	getOrganization              *connect.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	updateOrganization           *connect.Client[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse]
	listOrganizations            *connect.Client[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse]
	deleteOrganization           *connect.Client[v1.DeleteOrganizationRequest, v1.DeleteOrganizationResponse]
	listMembers                  *connect.Client[v1.ListMembersRequest, v1.ListMembersResponse]
	setRole                      *connect.Client[v1.SetRoleRequest, v1.SetRoleResponse]
	createOrganizationInvite     *connect.Client[v1.CreateOrganizationInviteRequest, v1.CreateOrganizationInviteResponse]
	getOrganizationInvite        *connect.Client[v1.GetOrganizationInviteRequest, v1.GetOrganizationInviteResponse]
	getOrganizationInviteSummary *connect.Client[v1.GetOrganizationInviteSummaryRequest, v1.GetOrganizationInviteSummaryResponse]
	leaveOrganization            *connect.Client[v1.LeaveOrganizationRequest, v1.LeaveOrganizationResponse]
	createSSOConfiguration       *connect.Client[v1.CreateSSOConfigurationRequest, v1.CreateSSOConfigurationResponse]
	getSSOConfiguration          *connect.Client[v1.GetSSOConfigurationRequest, v1.GetSSOConfigurationResponse]
	listSSOConfigurations        *connect.Client[v1.ListSSOConfigurationsRequest, v1.ListSSOConfigurationsResponse]
	deleteSSOConfiguration       *connect.Client[v1.DeleteSSOConfigurationRequest, v1.DeleteSSOConfigurationResponse]
	updateSSOConfiguration       *connect.Client[v1.UpdateSSOConfigurationRequest, v1.UpdateSSOConfigurationResponse]
}

// CreateOrganization calls gitpod.v1.OrganizationService.CreateOrganization.
func (c *organizationServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// JoinOrganization calls gitpod.v1.OrganizationService.JoinOrganization.
func (c *organizationServiceClient) JoinOrganization(ctx context.Context, req *connect.Request[v1.JoinOrganizationRequest]) (*connect.Response[v1.JoinOrganizationResponse], error) {
	return c.joinOrganization.CallUnary(ctx, req)
}

// GetOrganization calls gitpod.v1.OrganizationService.GetOrganization.
func (c *organizationServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls gitpod.v1.OrganizationService.UpdateOrganization.
func (c *organizationServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// ListOrganizations calls gitpod.v1.OrganizationService.ListOrganizations.
func (c *organizationServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// DeleteOrganization calls gitpod.v1.OrganizationService.DeleteOrganization.
func (c *organizationServiceClient) DeleteOrganization(ctx context.Context, req *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// ListMembers calls gitpod.v1.OrganizationService.ListMembers.
func (c *organizationServiceClient) ListMembers(ctx context.Context, req *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error) {
	return c.listMembers.CallUnary(ctx, req)
}

// SetRole calls gitpod.v1.OrganizationService.SetRole.
func (c *organizationServiceClient) SetRole(ctx context.Context, req *connect.Request[v1.SetRoleRequest]) (*connect.Response[v1.SetRoleResponse], error) {
	return c.setRole.CallUnary(ctx, req)
}

// CreateOrganizationInvite calls gitpod.v1.OrganizationService.CreateOrganizationInvite.
func (c *organizationServiceClient) CreateOrganizationInvite(ctx context.Context, req *connect.Request[v1.CreateOrganizationInviteRequest]) (*connect.Response[v1.CreateOrganizationInviteResponse], error) {
	return c.createOrganizationInvite.CallUnary(ctx, req)
}

// GetOrganizationInvite calls gitpod.v1.OrganizationService.GetOrganizationInvite.
func (c *organizationServiceClient) GetOrganizationInvite(ctx context.Context, req *connect.Request[v1.GetOrganizationInviteRequest]) (*connect.Response[v1.GetOrganizationInviteResponse], error) {
	return c.getOrganizationInvite.CallUnary(ctx, req)
}

// GetOrganizationInviteSummary calls gitpod.v1.OrganizationService.GetOrganizationInviteSummary.
func (c *organizationServiceClient) GetOrganizationInviteSummary(ctx context.Context, req *connect.Request[v1.GetOrganizationInviteSummaryRequest]) (*connect.Response[v1.GetOrganizationInviteSummaryResponse], error) {
	return c.getOrganizationInviteSummary.CallUnary(ctx, req)
}

// LeaveOrganization calls gitpod.v1.OrganizationService.LeaveOrganization.
func (c *organizationServiceClient) LeaveOrganization(ctx context.Context, req *connect.Request[v1.LeaveOrganizationRequest]) (*connect.Response[v1.LeaveOrganizationResponse], error) {
	return c.leaveOrganization.CallUnary(ctx, req)
}

// CreateSSOConfiguration calls gitpod.v1.OrganizationService.CreateSSOConfiguration.
func (c *organizationServiceClient) CreateSSOConfiguration(ctx context.Context, req *connect.Request[v1.CreateSSOConfigurationRequest]) (*connect.Response[v1.CreateSSOConfigurationResponse], error) {
	return c.createSSOConfiguration.CallUnary(ctx, req)
}

// GetSSOConfiguration calls gitpod.v1.OrganizationService.GetSSOConfiguration.
func (c *organizationServiceClient) GetSSOConfiguration(ctx context.Context, req *connect.Request[v1.GetSSOConfigurationRequest]) (*connect.Response[v1.GetSSOConfigurationResponse], error) {
	return c.getSSOConfiguration.CallUnary(ctx, req)
}

// ListSSOConfigurations calls gitpod.v1.OrganizationService.ListSSOConfigurations.
func (c *organizationServiceClient) ListSSOConfigurations(ctx context.Context, req *connect.Request[v1.ListSSOConfigurationsRequest]) (*connect.Response[v1.ListSSOConfigurationsResponse], error) {
	return c.listSSOConfigurations.CallUnary(ctx, req)
}

// DeleteSSOConfiguration calls gitpod.v1.OrganizationService.DeleteSSOConfiguration.
func (c *organizationServiceClient) DeleteSSOConfiguration(ctx context.Context, req *connect.Request[v1.DeleteSSOConfigurationRequest]) (*connect.Response[v1.DeleteSSOConfigurationResponse], error) {
	return c.deleteSSOConfiguration.CallUnary(ctx, req)
}

// UpdateSSOConfiguration calls gitpod.v1.OrganizationService.UpdateSSOConfiguration.
func (c *organizationServiceClient) UpdateSSOConfiguration(ctx context.Context, req *connect.Request[v1.UpdateSSOConfigurationRequest]) (*connect.Response[v1.UpdateSSOConfigurationResponse], error) {
	return c.updateSSOConfiguration.CallUnary(ctx, req)
}

// OrganizationServiceHandler is an implementation of the gitpod.v1.OrganizationService service.
type OrganizationServiceHandler interface {
	// CreateOrganization creates a new Organization.
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	// JoinOrganization lets accounts join an Organization.
	JoinOrganization(context.Context, *connect.Request[v1.JoinOrganizationRequest]) (*connect.Response[v1.JoinOrganizationResponse], error)
	// GetOrganization retrieves a single Organization.
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	// UpdateOrganization updates the properties of an Organization.
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	// ListOrganizations lists all organization the caller has access to.
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	// DeleteOrganization deletes the specified organization.
	DeleteOrganization(context.Context, *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error)
	// ListMembers lists all members of the specified organization.
	ListMembers(context.Context, *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error)
	SetRole(context.Context, *connect.Request[v1.SetRoleRequest]) (*connect.Response[v1.SetRoleResponse], error)
	// CreateOrganizationInvite creates an invite for the organization.
	// Any existing OrganizationInvites are invalidated and can no longer be used.
	CreateOrganizationInvite(context.Context, *connect.Request[v1.CreateOrganizationInviteRequest]) (*connect.Response[v1.CreateOrganizationInviteResponse], error)
	// GetOrganizationInvite retrieves invite for the organization.
	// If no invite exists, a new one is created.
	GetOrganizationInvite(context.Context, *connect.Request[v1.GetOrganizationInviteRequest]) (*connect.Response[v1.GetOrganizationInviteResponse], error)
	// GetOrganizationInviteSummary retrieves a summary of the organization based on an Invite ID.
	// Used to discover which organization an invite is for.
	GetOrganizationInviteSummary(context.Context, *connect.Request[v1.GetOrganizationInviteSummaryRequest]) (*connect.Response[v1.GetOrganizationInviteSummaryResponse], error)
	// LeaveOrganization lets the passed user leave an Organization.
	LeaveOrganization(context.Context, *connect.Request[v1.LeaveOrganizationRequest]) (*connect.Response[v1.LeaveOrganizationResponse], error)
	// CreateSSOConfiguration creates a new SSO configuration for the organization.
	CreateSSOConfiguration(context.Context, *connect.Request[v1.CreateSSOConfigurationRequest]) (*connect.Response[v1.CreateSSOConfigurationResponse], error)
	// GetSSOConfiguration returns an SSO configuration.
	GetSSOConfiguration(context.Context, *connect.Request[v1.GetSSOConfigurationRequest]) (*connect.Response[v1.GetSSOConfigurationResponse], error)
	// ListSSOConfigurations lists all SSO configurations matching provided filters.
	ListSSOConfigurations(context.Context, *connect.Request[v1.ListSSOConfigurationsRequest]) (*connect.Response[v1.ListSSOConfigurationsResponse], error)
	// DeleteSSOConfiguration deletes an SSO configuration.
	DeleteSSOConfiguration(context.Context, *connect.Request[v1.DeleteSSOConfigurationRequest]) (*connect.Response[v1.DeleteSSOConfigurationResponse], error)
	// UpdateSSOConfiguration updates the SSO configuration for the organization.
	UpdateSSOConfiguration(context.Context, *connect.Request[v1.UpdateSSOConfigurationRequest]) (*connect.Response[v1.UpdateSSOConfigurationResponse], error)
}

// NewOrganizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganizationServiceHandler(svc OrganizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	organizationServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(organizationServiceCreateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceJoinOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceJoinOrganizationProcedure,
		svc.JoinOrganization,
		connect.WithSchema(organizationServiceJoinOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(organizationServiceGetOrganizationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(organizationServiceUpdateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListOrganizationsHandler := connect.NewUnaryHandler(
		OrganizationServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(organizationServiceListOrganizationsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeleteOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		connect.WithSchema(organizationServiceDeleteOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListMembersHandler := connect.NewUnaryHandler(
		OrganizationServiceListMembersProcedure,
		svc.ListMembers,
		connect.WithSchema(organizationServiceListMembersMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceSetRoleHandler := connect.NewUnaryHandler(
		OrganizationServiceSetRoleProcedure,
		svc.SetRole,
		connect.WithSchema(organizationServiceSetRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceCreateOrganizationInviteHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateOrganizationInviteProcedure,
		svc.CreateOrganizationInvite,
		connect.WithSchema(organizationServiceCreateOrganizationInviteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetOrganizationInviteHandler := connect.NewUnaryHandler(
		OrganizationServiceGetOrganizationInviteProcedure,
		svc.GetOrganizationInvite,
		connect.WithSchema(organizationServiceGetOrganizationInviteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetOrganizationInviteSummaryHandler := connect.NewUnaryHandler(
		OrganizationServiceGetOrganizationInviteSummaryProcedure,
		svc.GetOrganizationInviteSummary,
		connect.WithSchema(organizationServiceGetOrganizationInviteSummaryMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceLeaveOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceLeaveOrganizationProcedure,
		svc.LeaveOrganization,
		connect.WithSchema(organizationServiceLeaveOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceCreateSSOConfigurationHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateSSOConfigurationProcedure,
		svc.CreateSSOConfiguration,
		connect.WithSchema(organizationServiceCreateSSOConfigurationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetSSOConfigurationHandler := connect.NewUnaryHandler(
		OrganizationServiceGetSSOConfigurationProcedure,
		svc.GetSSOConfiguration,
		connect.WithSchema(organizationServiceGetSSOConfigurationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListSSOConfigurationsHandler := connect.NewUnaryHandler(
		OrganizationServiceListSSOConfigurationsProcedure,
		svc.ListSSOConfigurations,
		connect.WithSchema(organizationServiceListSSOConfigurationsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeleteSSOConfigurationHandler := connect.NewUnaryHandler(
		OrganizationServiceDeleteSSOConfigurationProcedure,
		svc.DeleteSSOConfiguration,
		connect.WithSchema(organizationServiceDeleteSSOConfigurationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateSSOConfigurationHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateSSOConfigurationProcedure,
		svc.UpdateSSOConfiguration,
		connect.WithSchema(organizationServiceUpdateSSOConfigurationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.OrganizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrganizationServiceCreateOrganizationProcedure:
			organizationServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceJoinOrganizationProcedure:
			organizationServiceJoinOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceGetOrganizationProcedure:
			organizationServiceGetOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateOrganizationProcedure:
			organizationServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceListOrganizationsProcedure:
			organizationServiceListOrganizationsHandler.ServeHTTP(w, r)
		case OrganizationServiceDeleteOrganizationProcedure:
			organizationServiceDeleteOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceListMembersProcedure:
			organizationServiceListMembersHandler.ServeHTTP(w, r)
		case OrganizationServiceSetRoleProcedure:
			organizationServiceSetRoleHandler.ServeHTTP(w, r)
		case OrganizationServiceCreateOrganizationInviteProcedure:
			organizationServiceCreateOrganizationInviteHandler.ServeHTTP(w, r)
		case OrganizationServiceGetOrganizationInviteProcedure:
			organizationServiceGetOrganizationInviteHandler.ServeHTTP(w, r)
		case OrganizationServiceGetOrganizationInviteSummaryProcedure:
			organizationServiceGetOrganizationInviteSummaryHandler.ServeHTTP(w, r)
		case OrganizationServiceLeaveOrganizationProcedure:
			organizationServiceLeaveOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceCreateSSOConfigurationProcedure:
			organizationServiceCreateSSOConfigurationHandler.ServeHTTP(w, r)
		case OrganizationServiceGetSSOConfigurationProcedure:
			organizationServiceGetSSOConfigurationHandler.ServeHTTP(w, r)
		case OrganizationServiceListSSOConfigurationsProcedure:
			organizationServiceListSSOConfigurationsHandler.ServeHTTP(w, r)
		case OrganizationServiceDeleteSSOConfigurationProcedure:
			organizationServiceDeleteSSOConfigurationHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateSSOConfigurationProcedure:
			organizationServiceUpdateSSOConfigurationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrganizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganizationServiceHandler struct{}

func (UnimplementedOrganizationServiceHandler) CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.CreateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) JoinOrganization(context.Context, *connect.Request[v1.JoinOrganizationRequest]) (*connect.Response[v1.JoinOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.JoinOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.GetOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.UpdateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.ListOrganizations is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeleteOrganization(context.Context, *connect.Request[v1.DeleteOrganizationRequest]) (*connect.Response[v1.DeleteOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.DeleteOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListMembers(context.Context, *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.ListMembers is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) SetRole(context.Context, *connect.Request[v1.SetRoleRequest]) (*connect.Response[v1.SetRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.SetRole is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) CreateOrganizationInvite(context.Context, *connect.Request[v1.CreateOrganizationInviteRequest]) (*connect.Response[v1.CreateOrganizationInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.CreateOrganizationInvite is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetOrganizationInvite(context.Context, *connect.Request[v1.GetOrganizationInviteRequest]) (*connect.Response[v1.GetOrganizationInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.GetOrganizationInvite is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetOrganizationInviteSummary(context.Context, *connect.Request[v1.GetOrganizationInviteSummaryRequest]) (*connect.Response[v1.GetOrganizationInviteSummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.GetOrganizationInviteSummary is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) LeaveOrganization(context.Context, *connect.Request[v1.LeaveOrganizationRequest]) (*connect.Response[v1.LeaveOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.LeaveOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) CreateSSOConfiguration(context.Context, *connect.Request[v1.CreateSSOConfigurationRequest]) (*connect.Response[v1.CreateSSOConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.CreateSSOConfiguration is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetSSOConfiguration(context.Context, *connect.Request[v1.GetSSOConfigurationRequest]) (*connect.Response[v1.GetSSOConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.GetSSOConfiguration is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListSSOConfigurations(context.Context, *connect.Request[v1.ListSSOConfigurationsRequest]) (*connect.Response[v1.ListSSOConfigurationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.ListSSOConfigurations is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeleteSSOConfiguration(context.Context, *connect.Request[v1.DeleteSSOConfigurationRequest]) (*connect.Response[v1.DeleteSSOConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.DeleteSSOConfiguration is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateSSOConfiguration(context.Context, *connect.Request[v1.UpdateSSOConfigurationRequest]) (*connect.Response[v1.UpdateSSOConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.OrganizationService.UpdateSSOConfiguration is not implemented"))
}
