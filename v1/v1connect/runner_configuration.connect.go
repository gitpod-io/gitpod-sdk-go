// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/runner_configuration.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RunnerConfigurationServiceName is the fully-qualified name of the RunnerConfigurationService
	// service.
	RunnerConfigurationServiceName = "gitpod.v1.RunnerConfigurationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RunnerConfigurationServiceCreateHostAuthenticationTokenProcedure is the fully-qualified name of
	// the RunnerConfigurationService's CreateHostAuthenticationToken RPC.
	RunnerConfigurationServiceCreateHostAuthenticationTokenProcedure = "/gitpod.v1.RunnerConfigurationService/CreateHostAuthenticationToken"
	// RunnerConfigurationServiceGetHostAuthenticationTokenProcedure is the fully-qualified name of the
	// RunnerConfigurationService's GetHostAuthenticationToken RPC.
	RunnerConfigurationServiceGetHostAuthenticationTokenProcedure = "/gitpod.v1.RunnerConfigurationService/GetHostAuthenticationToken"
	// RunnerConfigurationServiceListHostAuthenticationTokensProcedure is the fully-qualified name of
	// the RunnerConfigurationService's ListHostAuthenticationTokens RPC.
	RunnerConfigurationServiceListHostAuthenticationTokensProcedure = "/gitpod.v1.RunnerConfigurationService/ListHostAuthenticationTokens"
	// RunnerConfigurationServiceUpdateHostAuthenticationTokenProcedure is the fully-qualified name of
	// the RunnerConfigurationService's UpdateHostAuthenticationToken RPC.
	RunnerConfigurationServiceUpdateHostAuthenticationTokenProcedure = "/gitpod.v1.RunnerConfigurationService/UpdateHostAuthenticationToken"
	// RunnerConfigurationServiceDeleteHostAuthenticationTokenProcedure is the fully-qualified name of
	// the RunnerConfigurationService's DeleteHostAuthenticationToken RPC.
	RunnerConfigurationServiceDeleteHostAuthenticationTokenProcedure = "/gitpod.v1.RunnerConfigurationService/DeleteHostAuthenticationToken"
	// RunnerConfigurationServiceGetRunnerConfigurationSchemaProcedure is the fully-qualified name of
	// the RunnerConfigurationService's GetRunnerConfigurationSchema RPC.
	RunnerConfigurationServiceGetRunnerConfigurationSchemaProcedure = "/gitpod.v1.RunnerConfigurationService/GetRunnerConfigurationSchema"
	// RunnerConfigurationServiceCreateSCMIntegrationProcedure is the fully-qualified name of the
	// RunnerConfigurationService's CreateSCMIntegration RPC.
	RunnerConfigurationServiceCreateSCMIntegrationProcedure = "/gitpod.v1.RunnerConfigurationService/CreateSCMIntegration"
	// RunnerConfigurationServiceGetSCMIntegrationProcedure is the fully-qualified name of the
	// RunnerConfigurationService's GetSCMIntegration RPC.
	RunnerConfigurationServiceGetSCMIntegrationProcedure = "/gitpod.v1.RunnerConfigurationService/GetSCMIntegration"
	// RunnerConfigurationServiceListSCMIntegrationsProcedure is the fully-qualified name of the
	// RunnerConfigurationService's ListSCMIntegrations RPC.
	RunnerConfigurationServiceListSCMIntegrationsProcedure = "/gitpod.v1.RunnerConfigurationService/ListSCMIntegrations"
	// RunnerConfigurationServiceUpdateSCMIntegrationProcedure is the fully-qualified name of the
	// RunnerConfigurationService's UpdateSCMIntegration RPC.
	RunnerConfigurationServiceUpdateSCMIntegrationProcedure = "/gitpod.v1.RunnerConfigurationService/UpdateSCMIntegration"
	// RunnerConfigurationServiceDeleteSCMIntegrationProcedure is the fully-qualified name of the
	// RunnerConfigurationService's DeleteSCMIntegration RPC.
	RunnerConfigurationServiceDeleteSCMIntegrationProcedure = "/gitpod.v1.RunnerConfigurationService/DeleteSCMIntegration"
	// RunnerConfigurationServiceCreateEnvironmentClassProcedure is the fully-qualified name of the
	// RunnerConfigurationService's CreateEnvironmentClass RPC.
	RunnerConfigurationServiceCreateEnvironmentClassProcedure = "/gitpod.v1.RunnerConfigurationService/CreateEnvironmentClass"
	// RunnerConfigurationServiceGetEnvironmentClassProcedure is the fully-qualified name of the
	// RunnerConfigurationService's GetEnvironmentClass RPC.
	RunnerConfigurationServiceGetEnvironmentClassProcedure = "/gitpod.v1.RunnerConfigurationService/GetEnvironmentClass"
	// RunnerConfigurationServiceListEnvironmentClassesProcedure is the fully-qualified name of the
	// RunnerConfigurationService's ListEnvironmentClasses RPC.
	RunnerConfigurationServiceListEnvironmentClassesProcedure = "/gitpod.v1.RunnerConfigurationService/ListEnvironmentClasses"
	// RunnerConfigurationServiceUpdateEnvironmentClassProcedure is the fully-qualified name of the
	// RunnerConfigurationService's UpdateEnvironmentClass RPC.
	RunnerConfigurationServiceUpdateEnvironmentClassProcedure = "/gitpod.v1.RunnerConfigurationService/UpdateEnvironmentClass"
	// RunnerConfigurationServiceValidateRunnerConfigurationProcedure is the fully-qualified name of the
	// RunnerConfigurationService's ValidateRunnerConfiguration RPC.
	RunnerConfigurationServiceValidateRunnerConfigurationProcedure = "/gitpod.v1.RunnerConfigurationService/ValidateRunnerConfiguration"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	runnerConfigurationServiceServiceDescriptor                             = v1.File_gitpod_v1_runner_configuration_proto.Services().ByName("RunnerConfigurationService")
	runnerConfigurationServiceCreateHostAuthenticationTokenMethodDescriptor = runnerConfigurationServiceServiceDescriptor.Methods().ByName("CreateHostAuthenticationToken")
	runnerConfigurationServiceGetHostAuthenticationTokenMethodDescriptor    = runnerConfigurationServiceServiceDescriptor.Methods().ByName("GetHostAuthenticationToken")
	runnerConfigurationServiceListHostAuthenticationTokensMethodDescriptor  = runnerConfigurationServiceServiceDescriptor.Methods().ByName("ListHostAuthenticationTokens")
	runnerConfigurationServiceUpdateHostAuthenticationTokenMethodDescriptor = runnerConfigurationServiceServiceDescriptor.Methods().ByName("UpdateHostAuthenticationToken")
	runnerConfigurationServiceDeleteHostAuthenticationTokenMethodDescriptor = runnerConfigurationServiceServiceDescriptor.Methods().ByName("DeleteHostAuthenticationToken")
	runnerConfigurationServiceGetRunnerConfigurationSchemaMethodDescriptor  = runnerConfigurationServiceServiceDescriptor.Methods().ByName("GetRunnerConfigurationSchema")
	runnerConfigurationServiceCreateSCMIntegrationMethodDescriptor          = runnerConfigurationServiceServiceDescriptor.Methods().ByName("CreateSCMIntegration")
	runnerConfigurationServiceGetSCMIntegrationMethodDescriptor             = runnerConfigurationServiceServiceDescriptor.Methods().ByName("GetSCMIntegration")
	runnerConfigurationServiceListSCMIntegrationsMethodDescriptor           = runnerConfigurationServiceServiceDescriptor.Methods().ByName("ListSCMIntegrations")
	runnerConfigurationServiceUpdateSCMIntegrationMethodDescriptor          = runnerConfigurationServiceServiceDescriptor.Methods().ByName("UpdateSCMIntegration")
	runnerConfigurationServiceDeleteSCMIntegrationMethodDescriptor          = runnerConfigurationServiceServiceDescriptor.Methods().ByName("DeleteSCMIntegration")
	runnerConfigurationServiceCreateEnvironmentClassMethodDescriptor        = runnerConfigurationServiceServiceDescriptor.Methods().ByName("CreateEnvironmentClass")
	runnerConfigurationServiceGetEnvironmentClassMethodDescriptor           = runnerConfigurationServiceServiceDescriptor.Methods().ByName("GetEnvironmentClass")
	runnerConfigurationServiceListEnvironmentClassesMethodDescriptor        = runnerConfigurationServiceServiceDescriptor.Methods().ByName("ListEnvironmentClasses")
	runnerConfigurationServiceUpdateEnvironmentClassMethodDescriptor        = runnerConfigurationServiceServiceDescriptor.Methods().ByName("UpdateEnvironmentClass")
	runnerConfigurationServiceValidateRunnerConfigurationMethodDescriptor   = runnerConfigurationServiceServiceDescriptor.Methods().ByName("ValidateRunnerConfiguration")
)

// RunnerConfigurationServiceClient is a client for the gitpod.v1.RunnerConfigurationService
// service.
type RunnerConfigurationServiceClient interface {
	CreateHostAuthenticationToken(context.Context, *connect.Request[v1.CreateHostAuthenticationTokenRequest]) (*connect.Response[v1.CreateHostAuthenticationTokenResponse], error)
	GetHostAuthenticationToken(context.Context, *connect.Request[v1.GetHostAuthenticationTokenRequest]) (*connect.Response[v1.GetHostAuthenticationTokenResponse], error)
	ListHostAuthenticationTokens(context.Context, *connect.Request[v1.ListHostAuthenticationTokensRequest]) (*connect.Response[v1.ListHostAuthenticationTokensResponse], error)
	UpdateHostAuthenticationToken(context.Context, *connect.Request[v1.UpdateHostAuthenticationTokenRequest]) (*connect.Response[v1.UpdateHostAuthenticationTokenResponse], error)
	DeleteHostAuthenticationToken(context.Context, *connect.Request[v1.DeleteHostAuthenticationTokenRequest]) (*connect.Response[v1.DeleteHostAuthenticationTokenResponse], error)
	// GetRunnerConfigurationSchema retrieves the latest Runner configuration schema
	GetRunnerConfigurationSchema(context.Context, *connect.Request[v1.GetRunnerConfigurationSchemaRequest]) (*connect.Response[v1.GetRunnerConfigurationSchemaResponse], error)
	// CreateSCMIntegration creates a new SCM integration on a runner.
	CreateSCMIntegration(context.Context, *connect.Request[v1.CreateSCMIntegrationRequest]) (*connect.Response[v1.CreateSCMIntegrationResponse], error)
	// GetSCMIntegration returns a single SCM integration configured for a runner.
	GetSCMIntegration(context.Context, *connect.Request[v1.GetSCMIntegrationRequest]) (*connect.Response[v1.GetSCMIntegrationResponse], error)
	// ListSCMIntegrations returns all SCM integrations configured for a runner.
	ListSCMIntegrations(context.Context, *connect.Request[v1.ListSCMIntegrationsRequest]) (*connect.Response[v1.ListSCMIntegrationsResponse], error)
	// UpdateSCMIntegration updates an existing SCM integration on a runner.
	UpdateSCMIntegration(context.Context, *connect.Request[v1.UpdateSCMIntegrationRequest]) (*connect.Response[v1.UpdateSCMIntegrationResponse], error)
	// DeleteSCMIntegration deletes an existing SCM integration on a runner.
	DeleteSCMIntegration(context.Context, *connect.Request[v1.DeleteSCMIntegrationRequest]) (*connect.Response[v1.DeleteSCMIntegrationResponse], error)
	// CreateEnvironmentClass creates a new environment class on a runner.
	CreateEnvironmentClass(context.Context, *connect.Request[v1.CreateEnvironmentClassRequest]) (*connect.Response[v1.CreateEnvironmentClassResponse], error)
	// GetEnvironmentClass returns a single environment class configured for a runner.
	GetEnvironmentClass(context.Context, *connect.Request[v1.GetEnvironmentClassRequest]) (*connect.Response[v1.GetEnvironmentClassResponse], error)
	// ListEnvironmentClasses returns all environment classes configured for a runner.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ListEnvironmentClasses(context.Context, *connect.Request[v1.ListEnvironmentClassesRequest]) (*connect.Response[v1.ListEnvironmentClassesResponse], error)
	// UpdateEnvironmentClass updates an existing environment class on a runner.
	UpdateEnvironmentClass(context.Context, *connect.Request[v1.UpdateEnvironmentClassRequest]) (*connect.Response[v1.UpdateEnvironmentClassResponse], error)
	// ValidateRunnerConfiguration validates a runner configuration (e.g. environment class, SCM integration)
	// with the runner.
	ValidateRunnerConfiguration(context.Context, *connect.Request[v1.ValidateRunnerConfigurationRequest]) (*connect.Response[v1.ValidateRunnerConfigurationResponse], error)
}

// NewRunnerConfigurationServiceClient constructs a client for the
// gitpod.v1.RunnerConfigurationService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRunnerConfigurationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RunnerConfigurationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runnerConfigurationServiceClient{
		createHostAuthenticationToken: connect.NewClient[v1.CreateHostAuthenticationTokenRequest, v1.CreateHostAuthenticationTokenResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceCreateHostAuthenticationTokenProcedure,
			connect.WithSchema(runnerConfigurationServiceCreateHostAuthenticationTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getHostAuthenticationToken: connect.NewClient[v1.GetHostAuthenticationTokenRequest, v1.GetHostAuthenticationTokenResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceGetHostAuthenticationTokenProcedure,
			connect.WithSchema(runnerConfigurationServiceGetHostAuthenticationTokenMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listHostAuthenticationTokens: connect.NewClient[v1.ListHostAuthenticationTokensRequest, v1.ListHostAuthenticationTokensResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceListHostAuthenticationTokensProcedure,
			connect.WithSchema(runnerConfigurationServiceListHostAuthenticationTokensMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateHostAuthenticationToken: connect.NewClient[v1.UpdateHostAuthenticationTokenRequest, v1.UpdateHostAuthenticationTokenResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceUpdateHostAuthenticationTokenProcedure,
			connect.WithSchema(runnerConfigurationServiceUpdateHostAuthenticationTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteHostAuthenticationToken: connect.NewClient[v1.DeleteHostAuthenticationTokenRequest, v1.DeleteHostAuthenticationTokenResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceDeleteHostAuthenticationTokenProcedure,
			connect.WithSchema(runnerConfigurationServiceDeleteHostAuthenticationTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRunnerConfigurationSchema: connect.NewClient[v1.GetRunnerConfigurationSchemaRequest, v1.GetRunnerConfigurationSchemaResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceGetRunnerConfigurationSchemaProcedure,
			connect.WithSchema(runnerConfigurationServiceGetRunnerConfigurationSchemaMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createSCMIntegration: connect.NewClient[v1.CreateSCMIntegrationRequest, v1.CreateSCMIntegrationResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceCreateSCMIntegrationProcedure,
			connect.WithSchema(runnerConfigurationServiceCreateSCMIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSCMIntegration: connect.NewClient[v1.GetSCMIntegrationRequest, v1.GetSCMIntegrationResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceGetSCMIntegrationProcedure,
			connect.WithSchema(runnerConfigurationServiceGetSCMIntegrationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listSCMIntegrations: connect.NewClient[v1.ListSCMIntegrationsRequest, v1.ListSCMIntegrationsResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceListSCMIntegrationsProcedure,
			connect.WithSchema(runnerConfigurationServiceListSCMIntegrationsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateSCMIntegration: connect.NewClient[v1.UpdateSCMIntegrationRequest, v1.UpdateSCMIntegrationResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceUpdateSCMIntegrationProcedure,
			connect.WithSchema(runnerConfigurationServiceUpdateSCMIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSCMIntegration: connect.NewClient[v1.DeleteSCMIntegrationRequest, v1.DeleteSCMIntegrationResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceDeleteSCMIntegrationProcedure,
			connect.WithSchema(runnerConfigurationServiceDeleteSCMIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createEnvironmentClass: connect.NewClient[v1.CreateEnvironmentClassRequest, v1.CreateEnvironmentClassResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceCreateEnvironmentClassProcedure,
			connect.WithSchema(runnerConfigurationServiceCreateEnvironmentClassMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEnvironmentClass: connect.NewClient[v1.GetEnvironmentClassRequest, v1.GetEnvironmentClassResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceGetEnvironmentClassProcedure,
			connect.WithSchema(runnerConfigurationServiceGetEnvironmentClassMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listEnvironmentClasses: connect.NewClient[v1.ListEnvironmentClassesRequest, v1.ListEnvironmentClassesResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceListEnvironmentClassesProcedure,
			connect.WithSchema(runnerConfigurationServiceListEnvironmentClassesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateEnvironmentClass: connect.NewClient[v1.UpdateEnvironmentClassRequest, v1.UpdateEnvironmentClassResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceUpdateEnvironmentClassProcedure,
			connect.WithSchema(runnerConfigurationServiceUpdateEnvironmentClassMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		validateRunnerConfiguration: connect.NewClient[v1.ValidateRunnerConfigurationRequest, v1.ValidateRunnerConfigurationResponse](
			httpClient,
			baseURL+RunnerConfigurationServiceValidateRunnerConfigurationProcedure,
			connect.WithSchema(runnerConfigurationServiceValidateRunnerConfigurationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// runnerConfigurationServiceClient implements RunnerConfigurationServiceClient.
type runnerConfigurationServiceClient struct {
	createHostAuthenticationToken *connect.Client[v1.CreateHostAuthenticationTokenRequest, v1.CreateHostAuthenticationTokenResponse]
	getHostAuthenticationToken    *connect.Client[v1.GetHostAuthenticationTokenRequest, v1.GetHostAuthenticationTokenResponse]
	listHostAuthenticationTokens  *connect.Client[v1.ListHostAuthenticationTokensRequest, v1.ListHostAuthenticationTokensResponse]
	updateHostAuthenticationToken *connect.Client[v1.UpdateHostAuthenticationTokenRequest, v1.UpdateHostAuthenticationTokenResponse]
	deleteHostAuthenticationToken *connect.Client[v1.DeleteHostAuthenticationTokenRequest, v1.DeleteHostAuthenticationTokenResponse]
	getRunnerConfigurationSchema  *connect.Client[v1.GetRunnerConfigurationSchemaRequest, v1.GetRunnerConfigurationSchemaResponse]
	createSCMIntegration          *connect.Client[v1.CreateSCMIntegrationRequest, v1.CreateSCMIntegrationResponse]
	getSCMIntegration             *connect.Client[v1.GetSCMIntegrationRequest, v1.GetSCMIntegrationResponse]
	listSCMIntegrations           *connect.Client[v1.ListSCMIntegrationsRequest, v1.ListSCMIntegrationsResponse]
	updateSCMIntegration          *connect.Client[v1.UpdateSCMIntegrationRequest, v1.UpdateSCMIntegrationResponse]
	deleteSCMIntegration          *connect.Client[v1.DeleteSCMIntegrationRequest, v1.DeleteSCMIntegrationResponse]
	createEnvironmentClass        *connect.Client[v1.CreateEnvironmentClassRequest, v1.CreateEnvironmentClassResponse]
	getEnvironmentClass           *connect.Client[v1.GetEnvironmentClassRequest, v1.GetEnvironmentClassResponse]
	listEnvironmentClasses        *connect.Client[v1.ListEnvironmentClassesRequest, v1.ListEnvironmentClassesResponse]
	updateEnvironmentClass        *connect.Client[v1.UpdateEnvironmentClassRequest, v1.UpdateEnvironmentClassResponse]
	validateRunnerConfiguration   *connect.Client[v1.ValidateRunnerConfigurationRequest, v1.ValidateRunnerConfigurationResponse]
}

// CreateHostAuthenticationToken calls
// gitpod.v1.RunnerConfigurationService.CreateHostAuthenticationToken.
func (c *runnerConfigurationServiceClient) CreateHostAuthenticationToken(ctx context.Context, req *connect.Request[v1.CreateHostAuthenticationTokenRequest]) (*connect.Response[v1.CreateHostAuthenticationTokenResponse], error) {
	return c.createHostAuthenticationToken.CallUnary(ctx, req)
}

// GetHostAuthenticationToken calls gitpod.v1.RunnerConfigurationService.GetHostAuthenticationToken.
func (c *runnerConfigurationServiceClient) GetHostAuthenticationToken(ctx context.Context, req *connect.Request[v1.GetHostAuthenticationTokenRequest]) (*connect.Response[v1.GetHostAuthenticationTokenResponse], error) {
	return c.getHostAuthenticationToken.CallUnary(ctx, req)
}

// ListHostAuthenticationTokens calls
// gitpod.v1.RunnerConfigurationService.ListHostAuthenticationTokens.
func (c *runnerConfigurationServiceClient) ListHostAuthenticationTokens(ctx context.Context, req *connect.Request[v1.ListHostAuthenticationTokensRequest]) (*connect.Response[v1.ListHostAuthenticationTokensResponse], error) {
	return c.listHostAuthenticationTokens.CallUnary(ctx, req)
}

// UpdateHostAuthenticationToken calls
// gitpod.v1.RunnerConfigurationService.UpdateHostAuthenticationToken.
func (c *runnerConfigurationServiceClient) UpdateHostAuthenticationToken(ctx context.Context, req *connect.Request[v1.UpdateHostAuthenticationTokenRequest]) (*connect.Response[v1.UpdateHostAuthenticationTokenResponse], error) {
	return c.updateHostAuthenticationToken.CallUnary(ctx, req)
}

// DeleteHostAuthenticationToken calls
// gitpod.v1.RunnerConfigurationService.DeleteHostAuthenticationToken.
func (c *runnerConfigurationServiceClient) DeleteHostAuthenticationToken(ctx context.Context, req *connect.Request[v1.DeleteHostAuthenticationTokenRequest]) (*connect.Response[v1.DeleteHostAuthenticationTokenResponse], error) {
	return c.deleteHostAuthenticationToken.CallUnary(ctx, req)
}

// GetRunnerConfigurationSchema calls
// gitpod.v1.RunnerConfigurationService.GetRunnerConfigurationSchema.
func (c *runnerConfigurationServiceClient) GetRunnerConfigurationSchema(ctx context.Context, req *connect.Request[v1.GetRunnerConfigurationSchemaRequest]) (*connect.Response[v1.GetRunnerConfigurationSchemaResponse], error) {
	return c.getRunnerConfigurationSchema.CallUnary(ctx, req)
}

// CreateSCMIntegration calls gitpod.v1.RunnerConfigurationService.CreateSCMIntegration.
func (c *runnerConfigurationServiceClient) CreateSCMIntegration(ctx context.Context, req *connect.Request[v1.CreateSCMIntegrationRequest]) (*connect.Response[v1.CreateSCMIntegrationResponse], error) {
	return c.createSCMIntegration.CallUnary(ctx, req)
}

// GetSCMIntegration calls gitpod.v1.RunnerConfigurationService.GetSCMIntegration.
func (c *runnerConfigurationServiceClient) GetSCMIntegration(ctx context.Context, req *connect.Request[v1.GetSCMIntegrationRequest]) (*connect.Response[v1.GetSCMIntegrationResponse], error) {
	return c.getSCMIntegration.CallUnary(ctx, req)
}

// ListSCMIntegrations calls gitpod.v1.RunnerConfigurationService.ListSCMIntegrations.
func (c *runnerConfigurationServiceClient) ListSCMIntegrations(ctx context.Context, req *connect.Request[v1.ListSCMIntegrationsRequest]) (*connect.Response[v1.ListSCMIntegrationsResponse], error) {
	return c.listSCMIntegrations.CallUnary(ctx, req)
}

// UpdateSCMIntegration calls gitpod.v1.RunnerConfigurationService.UpdateSCMIntegration.
func (c *runnerConfigurationServiceClient) UpdateSCMIntegration(ctx context.Context, req *connect.Request[v1.UpdateSCMIntegrationRequest]) (*connect.Response[v1.UpdateSCMIntegrationResponse], error) {
	return c.updateSCMIntegration.CallUnary(ctx, req)
}

// DeleteSCMIntegration calls gitpod.v1.RunnerConfigurationService.DeleteSCMIntegration.
func (c *runnerConfigurationServiceClient) DeleteSCMIntegration(ctx context.Context, req *connect.Request[v1.DeleteSCMIntegrationRequest]) (*connect.Response[v1.DeleteSCMIntegrationResponse], error) {
	return c.deleteSCMIntegration.CallUnary(ctx, req)
}

// CreateEnvironmentClass calls gitpod.v1.RunnerConfigurationService.CreateEnvironmentClass.
func (c *runnerConfigurationServiceClient) CreateEnvironmentClass(ctx context.Context, req *connect.Request[v1.CreateEnvironmentClassRequest]) (*connect.Response[v1.CreateEnvironmentClassResponse], error) {
	return c.createEnvironmentClass.CallUnary(ctx, req)
}

// GetEnvironmentClass calls gitpod.v1.RunnerConfigurationService.GetEnvironmentClass.
func (c *runnerConfigurationServiceClient) GetEnvironmentClass(ctx context.Context, req *connect.Request[v1.GetEnvironmentClassRequest]) (*connect.Response[v1.GetEnvironmentClassResponse], error) {
	return c.getEnvironmentClass.CallUnary(ctx, req)
}

// ListEnvironmentClasses calls gitpod.v1.RunnerConfigurationService.ListEnvironmentClasses.
func (c *runnerConfigurationServiceClient) ListEnvironmentClasses(ctx context.Context, req *connect.Request[v1.ListEnvironmentClassesRequest]) (*connect.Response[v1.ListEnvironmentClassesResponse], error) {
	return c.listEnvironmentClasses.CallUnary(ctx, req)
}

// UpdateEnvironmentClass calls gitpod.v1.RunnerConfigurationService.UpdateEnvironmentClass.
func (c *runnerConfigurationServiceClient) UpdateEnvironmentClass(ctx context.Context, req *connect.Request[v1.UpdateEnvironmentClassRequest]) (*connect.Response[v1.UpdateEnvironmentClassResponse], error) {
	return c.updateEnvironmentClass.CallUnary(ctx, req)
}

// ValidateRunnerConfiguration calls
// gitpod.v1.RunnerConfigurationService.ValidateRunnerConfiguration.
func (c *runnerConfigurationServiceClient) ValidateRunnerConfiguration(ctx context.Context, req *connect.Request[v1.ValidateRunnerConfigurationRequest]) (*connect.Response[v1.ValidateRunnerConfigurationResponse], error) {
	return c.validateRunnerConfiguration.CallUnary(ctx, req)
}

// RunnerConfigurationServiceHandler is an implementation of the
// gitpod.v1.RunnerConfigurationService service.
type RunnerConfigurationServiceHandler interface {
	CreateHostAuthenticationToken(context.Context, *connect.Request[v1.CreateHostAuthenticationTokenRequest]) (*connect.Response[v1.CreateHostAuthenticationTokenResponse], error)
	GetHostAuthenticationToken(context.Context, *connect.Request[v1.GetHostAuthenticationTokenRequest]) (*connect.Response[v1.GetHostAuthenticationTokenResponse], error)
	ListHostAuthenticationTokens(context.Context, *connect.Request[v1.ListHostAuthenticationTokensRequest]) (*connect.Response[v1.ListHostAuthenticationTokensResponse], error)
	UpdateHostAuthenticationToken(context.Context, *connect.Request[v1.UpdateHostAuthenticationTokenRequest]) (*connect.Response[v1.UpdateHostAuthenticationTokenResponse], error)
	DeleteHostAuthenticationToken(context.Context, *connect.Request[v1.DeleteHostAuthenticationTokenRequest]) (*connect.Response[v1.DeleteHostAuthenticationTokenResponse], error)
	// GetRunnerConfigurationSchema retrieves the latest Runner configuration schema
	GetRunnerConfigurationSchema(context.Context, *connect.Request[v1.GetRunnerConfigurationSchemaRequest]) (*connect.Response[v1.GetRunnerConfigurationSchemaResponse], error)
	// CreateSCMIntegration creates a new SCM integration on a runner.
	CreateSCMIntegration(context.Context, *connect.Request[v1.CreateSCMIntegrationRequest]) (*connect.Response[v1.CreateSCMIntegrationResponse], error)
	// GetSCMIntegration returns a single SCM integration configured for a runner.
	GetSCMIntegration(context.Context, *connect.Request[v1.GetSCMIntegrationRequest]) (*connect.Response[v1.GetSCMIntegrationResponse], error)
	// ListSCMIntegrations returns all SCM integrations configured for a runner.
	ListSCMIntegrations(context.Context, *connect.Request[v1.ListSCMIntegrationsRequest]) (*connect.Response[v1.ListSCMIntegrationsResponse], error)
	// UpdateSCMIntegration updates an existing SCM integration on a runner.
	UpdateSCMIntegration(context.Context, *connect.Request[v1.UpdateSCMIntegrationRequest]) (*connect.Response[v1.UpdateSCMIntegrationResponse], error)
	// DeleteSCMIntegration deletes an existing SCM integration on a runner.
	DeleteSCMIntegration(context.Context, *connect.Request[v1.DeleteSCMIntegrationRequest]) (*connect.Response[v1.DeleteSCMIntegrationResponse], error)
	// CreateEnvironmentClass creates a new environment class on a runner.
	CreateEnvironmentClass(context.Context, *connect.Request[v1.CreateEnvironmentClassRequest]) (*connect.Response[v1.CreateEnvironmentClassResponse], error)
	// GetEnvironmentClass returns a single environment class configured for a runner.
	GetEnvironmentClass(context.Context, *connect.Request[v1.GetEnvironmentClassRequest]) (*connect.Response[v1.GetEnvironmentClassResponse], error)
	// ListEnvironmentClasses returns all environment classes configured for a runner.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ListEnvironmentClasses(context.Context, *connect.Request[v1.ListEnvironmentClassesRequest]) (*connect.Response[v1.ListEnvironmentClassesResponse], error)
	// UpdateEnvironmentClass updates an existing environment class on a runner.
	UpdateEnvironmentClass(context.Context, *connect.Request[v1.UpdateEnvironmentClassRequest]) (*connect.Response[v1.UpdateEnvironmentClassResponse], error)
	// ValidateRunnerConfiguration validates a runner configuration (e.g. environment class, SCM integration)
	// with the runner.
	ValidateRunnerConfiguration(context.Context, *connect.Request[v1.ValidateRunnerConfigurationRequest]) (*connect.Response[v1.ValidateRunnerConfigurationResponse], error)
}

// NewRunnerConfigurationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRunnerConfigurationServiceHandler(svc RunnerConfigurationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	runnerConfigurationServiceCreateHostAuthenticationTokenHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceCreateHostAuthenticationTokenProcedure,
		svc.CreateHostAuthenticationToken,
		connect.WithSchema(runnerConfigurationServiceCreateHostAuthenticationTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceGetHostAuthenticationTokenHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceGetHostAuthenticationTokenProcedure,
		svc.GetHostAuthenticationToken,
		connect.WithSchema(runnerConfigurationServiceGetHostAuthenticationTokenMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceListHostAuthenticationTokensHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceListHostAuthenticationTokensProcedure,
		svc.ListHostAuthenticationTokens,
		connect.WithSchema(runnerConfigurationServiceListHostAuthenticationTokensMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceUpdateHostAuthenticationTokenHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceUpdateHostAuthenticationTokenProcedure,
		svc.UpdateHostAuthenticationToken,
		connect.WithSchema(runnerConfigurationServiceUpdateHostAuthenticationTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceDeleteHostAuthenticationTokenHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceDeleteHostAuthenticationTokenProcedure,
		svc.DeleteHostAuthenticationToken,
		connect.WithSchema(runnerConfigurationServiceDeleteHostAuthenticationTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceGetRunnerConfigurationSchemaHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceGetRunnerConfigurationSchemaProcedure,
		svc.GetRunnerConfigurationSchema,
		connect.WithSchema(runnerConfigurationServiceGetRunnerConfigurationSchemaMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceCreateSCMIntegrationHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceCreateSCMIntegrationProcedure,
		svc.CreateSCMIntegration,
		connect.WithSchema(runnerConfigurationServiceCreateSCMIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceGetSCMIntegrationHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceGetSCMIntegrationProcedure,
		svc.GetSCMIntegration,
		connect.WithSchema(runnerConfigurationServiceGetSCMIntegrationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceListSCMIntegrationsHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceListSCMIntegrationsProcedure,
		svc.ListSCMIntegrations,
		connect.WithSchema(runnerConfigurationServiceListSCMIntegrationsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceUpdateSCMIntegrationHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceUpdateSCMIntegrationProcedure,
		svc.UpdateSCMIntegration,
		connect.WithSchema(runnerConfigurationServiceUpdateSCMIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceDeleteSCMIntegrationHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceDeleteSCMIntegrationProcedure,
		svc.DeleteSCMIntegration,
		connect.WithSchema(runnerConfigurationServiceDeleteSCMIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceCreateEnvironmentClassHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceCreateEnvironmentClassProcedure,
		svc.CreateEnvironmentClass,
		connect.WithSchema(runnerConfigurationServiceCreateEnvironmentClassMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceGetEnvironmentClassHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceGetEnvironmentClassProcedure,
		svc.GetEnvironmentClass,
		connect.WithSchema(runnerConfigurationServiceGetEnvironmentClassMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceListEnvironmentClassesHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceListEnvironmentClassesProcedure,
		svc.ListEnvironmentClasses,
		connect.WithSchema(runnerConfigurationServiceListEnvironmentClassesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceUpdateEnvironmentClassHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceUpdateEnvironmentClassProcedure,
		svc.UpdateEnvironmentClass,
		connect.WithSchema(runnerConfigurationServiceUpdateEnvironmentClassMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerConfigurationServiceValidateRunnerConfigurationHandler := connect.NewUnaryHandler(
		RunnerConfigurationServiceValidateRunnerConfigurationProcedure,
		svc.ValidateRunnerConfiguration,
		connect.WithSchema(runnerConfigurationServiceValidateRunnerConfigurationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.RunnerConfigurationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RunnerConfigurationServiceCreateHostAuthenticationTokenProcedure:
			runnerConfigurationServiceCreateHostAuthenticationTokenHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceGetHostAuthenticationTokenProcedure:
			runnerConfigurationServiceGetHostAuthenticationTokenHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceListHostAuthenticationTokensProcedure:
			runnerConfigurationServiceListHostAuthenticationTokensHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceUpdateHostAuthenticationTokenProcedure:
			runnerConfigurationServiceUpdateHostAuthenticationTokenHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceDeleteHostAuthenticationTokenProcedure:
			runnerConfigurationServiceDeleteHostAuthenticationTokenHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceGetRunnerConfigurationSchemaProcedure:
			runnerConfigurationServiceGetRunnerConfigurationSchemaHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceCreateSCMIntegrationProcedure:
			runnerConfigurationServiceCreateSCMIntegrationHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceGetSCMIntegrationProcedure:
			runnerConfigurationServiceGetSCMIntegrationHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceListSCMIntegrationsProcedure:
			runnerConfigurationServiceListSCMIntegrationsHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceUpdateSCMIntegrationProcedure:
			runnerConfigurationServiceUpdateSCMIntegrationHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceDeleteSCMIntegrationProcedure:
			runnerConfigurationServiceDeleteSCMIntegrationHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceCreateEnvironmentClassProcedure:
			runnerConfigurationServiceCreateEnvironmentClassHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceGetEnvironmentClassProcedure:
			runnerConfigurationServiceGetEnvironmentClassHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceListEnvironmentClassesProcedure:
			runnerConfigurationServiceListEnvironmentClassesHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceUpdateEnvironmentClassProcedure:
			runnerConfigurationServiceUpdateEnvironmentClassHandler.ServeHTTP(w, r)
		case RunnerConfigurationServiceValidateRunnerConfigurationProcedure:
			runnerConfigurationServiceValidateRunnerConfigurationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRunnerConfigurationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRunnerConfigurationServiceHandler struct{}

func (UnimplementedRunnerConfigurationServiceHandler) CreateHostAuthenticationToken(context.Context, *connect.Request[v1.CreateHostAuthenticationTokenRequest]) (*connect.Response[v1.CreateHostAuthenticationTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.CreateHostAuthenticationToken is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) GetHostAuthenticationToken(context.Context, *connect.Request[v1.GetHostAuthenticationTokenRequest]) (*connect.Response[v1.GetHostAuthenticationTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.GetHostAuthenticationToken is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) ListHostAuthenticationTokens(context.Context, *connect.Request[v1.ListHostAuthenticationTokensRequest]) (*connect.Response[v1.ListHostAuthenticationTokensResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.ListHostAuthenticationTokens is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) UpdateHostAuthenticationToken(context.Context, *connect.Request[v1.UpdateHostAuthenticationTokenRequest]) (*connect.Response[v1.UpdateHostAuthenticationTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.UpdateHostAuthenticationToken is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) DeleteHostAuthenticationToken(context.Context, *connect.Request[v1.DeleteHostAuthenticationTokenRequest]) (*connect.Response[v1.DeleteHostAuthenticationTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.DeleteHostAuthenticationToken is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) GetRunnerConfigurationSchema(context.Context, *connect.Request[v1.GetRunnerConfigurationSchemaRequest]) (*connect.Response[v1.GetRunnerConfigurationSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.GetRunnerConfigurationSchema is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) CreateSCMIntegration(context.Context, *connect.Request[v1.CreateSCMIntegrationRequest]) (*connect.Response[v1.CreateSCMIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.CreateSCMIntegration is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) GetSCMIntegration(context.Context, *connect.Request[v1.GetSCMIntegrationRequest]) (*connect.Response[v1.GetSCMIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.GetSCMIntegration is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) ListSCMIntegrations(context.Context, *connect.Request[v1.ListSCMIntegrationsRequest]) (*connect.Response[v1.ListSCMIntegrationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.ListSCMIntegrations is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) UpdateSCMIntegration(context.Context, *connect.Request[v1.UpdateSCMIntegrationRequest]) (*connect.Response[v1.UpdateSCMIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.UpdateSCMIntegration is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) DeleteSCMIntegration(context.Context, *connect.Request[v1.DeleteSCMIntegrationRequest]) (*connect.Response[v1.DeleteSCMIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.DeleteSCMIntegration is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) CreateEnvironmentClass(context.Context, *connect.Request[v1.CreateEnvironmentClassRequest]) (*connect.Response[v1.CreateEnvironmentClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.CreateEnvironmentClass is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) GetEnvironmentClass(context.Context, *connect.Request[v1.GetEnvironmentClassRequest]) (*connect.Response[v1.GetEnvironmentClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.GetEnvironmentClass is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) ListEnvironmentClasses(context.Context, *connect.Request[v1.ListEnvironmentClassesRequest]) (*connect.Response[v1.ListEnvironmentClassesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.ListEnvironmentClasses is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) UpdateEnvironmentClass(context.Context, *connect.Request[v1.UpdateEnvironmentClassRequest]) (*connect.Response[v1.UpdateEnvironmentClassResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.UpdateEnvironmentClass is not implemented"))
}

func (UnimplementedRunnerConfigurationServiceHandler) ValidateRunnerConfiguration(context.Context, *connect.Request[v1.ValidateRunnerConfigurationRequest]) (*connect.Response[v1.ValidateRunnerConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerConfigurationService.ValidateRunnerConfiguration is not implemented"))
}
