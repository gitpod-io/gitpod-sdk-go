// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/runner_interaction.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-api-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RunnerInteractionServiceName is the fully-qualified name of the RunnerInteractionService service.
	RunnerInteractionServiceName = "gitpod.v1.RunnerInteractionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RunnerInteractionServiceSignupProcedure is the fully-qualified name of the
	// RunnerInteractionService's Signup RPC.
	RunnerInteractionServiceSignupProcedure = "/gitpod.v1.RunnerInteractionService/Signup"
	// RunnerInteractionServiceMarkRunnerActiveProcedure is the fully-qualified name of the
	// RunnerInteractionService's MarkRunnerActive RPC.
	RunnerInteractionServiceMarkRunnerActiveProcedure = "/gitpod.v1.RunnerInteractionService/MarkRunnerActive"
	// RunnerInteractionServiceGetRunnerEnvironmentProcedure is the fully-qualified name of the
	// RunnerInteractionService's GetRunnerEnvironment RPC.
	RunnerInteractionServiceGetRunnerEnvironmentProcedure = "/gitpod.v1.RunnerInteractionService/GetRunnerEnvironment"
	// RunnerInteractionServiceListRunnerEnvironmentsProcedure is the fully-qualified name of the
	// RunnerInteractionService's ListRunnerEnvironments RPC.
	RunnerInteractionServiceListRunnerEnvironmentsProcedure = "/gitpod.v1.RunnerInteractionService/ListRunnerEnvironments"
	// RunnerInteractionServiceUpdateRunnerEnvironmentStatusProcedure is the fully-qualified name of the
	// RunnerInteractionService's UpdateRunnerEnvironmentStatus RPC.
	RunnerInteractionServiceUpdateRunnerEnvironmentStatusProcedure = "/gitpod.v1.RunnerInteractionService/UpdateRunnerEnvironmentStatus"
	// RunnerInteractionServiceUpdateRunnerStatusProcedure is the fully-qualified name of the
	// RunnerInteractionService's UpdateRunnerStatus RPC.
	RunnerInteractionServiceUpdateRunnerStatusProcedure = "/gitpod.v1.RunnerInteractionService/UpdateRunnerStatus"
	// RunnerInteractionServiceUpdateRunnerConfigurationSchemaProcedure is the fully-qualified name of
	// the RunnerInteractionService's UpdateRunnerConfigurationSchema RPC.
	RunnerInteractionServiceUpdateRunnerConfigurationSchemaProcedure = "/gitpod.v1.RunnerInteractionService/UpdateRunnerConfigurationSchema"
	// RunnerInteractionServiceGetHostAuthenticationTokenValueProcedure is the fully-qualified name of
	// the RunnerInteractionService's GetHostAuthenticationTokenValue RPC.
	RunnerInteractionServiceGetHostAuthenticationTokenValueProcedure = "/gitpod.v1.RunnerInteractionService/GetHostAuthenticationTokenValue"
	// RunnerInteractionServiceListRunnerEnvironmentClassesProcedure is the fully-qualified name of the
	// RunnerInteractionService's ListRunnerEnvironmentClasses RPC.
	RunnerInteractionServiceListRunnerEnvironmentClassesProcedure = "/gitpod.v1.RunnerInteractionService/ListRunnerEnvironmentClasses"
	// RunnerInteractionServiceListRunnerSCMIntegrationsProcedure is the fully-qualified name of the
	// RunnerInteractionService's ListRunnerSCMIntegrations RPC.
	RunnerInteractionServiceListRunnerSCMIntegrationsProcedure = "/gitpod.v1.RunnerInteractionService/ListRunnerSCMIntegrations"
	// RunnerInteractionServiceWatchRequestsProcedure is the fully-qualified name of the
	// RunnerInteractionService's WatchRequests RPC.
	RunnerInteractionServiceWatchRequestsProcedure = "/gitpod.v1.RunnerInteractionService/WatchRequests"
	// RunnerInteractionServiceSendResponseProcedure is the fully-qualified name of the
	// RunnerInteractionService's SendResponse RPC.
	RunnerInteractionServiceSendResponseProcedure = "/gitpod.v1.RunnerInteractionService/SendResponse"
	// RunnerInteractionServiceGetLatestVersionProcedure is the fully-qualified name of the
	// RunnerInteractionService's GetLatestVersion RPC.
	RunnerInteractionServiceGetLatestVersionProcedure = "/gitpod.v1.RunnerInteractionService/GetLatestVersion"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	runnerInteractionServiceServiceDescriptor                               = v1.File_gitpod_v1_runner_interaction_proto.Services().ByName("RunnerInteractionService")
	runnerInteractionServiceSignupMethodDescriptor                          = runnerInteractionServiceServiceDescriptor.Methods().ByName("Signup")
	runnerInteractionServiceMarkRunnerActiveMethodDescriptor                = runnerInteractionServiceServiceDescriptor.Methods().ByName("MarkRunnerActive")
	runnerInteractionServiceGetRunnerEnvironmentMethodDescriptor            = runnerInteractionServiceServiceDescriptor.Methods().ByName("GetRunnerEnvironment")
	runnerInteractionServiceListRunnerEnvironmentsMethodDescriptor          = runnerInteractionServiceServiceDescriptor.Methods().ByName("ListRunnerEnvironments")
	runnerInteractionServiceUpdateRunnerEnvironmentStatusMethodDescriptor   = runnerInteractionServiceServiceDescriptor.Methods().ByName("UpdateRunnerEnvironmentStatus")
	runnerInteractionServiceUpdateRunnerStatusMethodDescriptor              = runnerInteractionServiceServiceDescriptor.Methods().ByName("UpdateRunnerStatus")
	runnerInteractionServiceUpdateRunnerConfigurationSchemaMethodDescriptor = runnerInteractionServiceServiceDescriptor.Methods().ByName("UpdateRunnerConfigurationSchema")
	runnerInteractionServiceGetHostAuthenticationTokenValueMethodDescriptor = runnerInteractionServiceServiceDescriptor.Methods().ByName("GetHostAuthenticationTokenValue")
	runnerInteractionServiceListRunnerEnvironmentClassesMethodDescriptor    = runnerInteractionServiceServiceDescriptor.Methods().ByName("ListRunnerEnvironmentClasses")
	runnerInteractionServiceListRunnerSCMIntegrationsMethodDescriptor       = runnerInteractionServiceServiceDescriptor.Methods().ByName("ListRunnerSCMIntegrations")
	runnerInteractionServiceWatchRequestsMethodDescriptor                   = runnerInteractionServiceServiceDescriptor.Methods().ByName("WatchRequests")
	runnerInteractionServiceSendResponseMethodDescriptor                    = runnerInteractionServiceServiceDescriptor.Methods().ByName("SendResponse")
	runnerInteractionServiceGetLatestVersionMethodDescriptor                = runnerInteractionServiceServiceDescriptor.Methods().ByName("GetLatestVersion")
)

// RunnerInteractionServiceClient is a client for the gitpod.v1.RunnerInteractionService service.
type RunnerInteractionServiceClient interface {
	// Signup is called by a runner to sign up with the backend. This is the first call a runner makes.
	Signup(context.Context, *connect.Request[v1.SignupRequest]) (*connect.Response[v1.SignupResponse], error)
	// MarkRunnerActive marks a runner as available. This must be called every 30 seconds
	// to keep the runner active.
	MarkRunnerActive(context.Context, *connect.Request[v1.MarkRunnerActiveRequest]) (*connect.Response[v1.MarkRunnerActiveResponse], error)
	// GetRunnerEnvironment returns the environment given it is owned by the runner.
	GetRunnerEnvironment(context.Context, *connect.Request[v1.GetRunnerEnvironmentRequest]) (*connect.Response[v1.GetRunnerEnvironmentResponse], error)
	// ListRunnerEnvironments returns the environments this runner is responsible for.
	ListRunnerEnvironments(context.Context, *connect.Request[v1.ListRunnerEnvironmentsRequest]) (*connect.Response[v1.ListRunnerEnvironmentsResponse], error)
	// UpdateRunnerEnvironmentStatus updates the status of an environment this runner is responsible for.
	UpdateRunnerEnvironmentStatus(context.Context, *connect.Request[v1.UpdateRunnerEnvironmentStatusRequest]) (*connect.Response[v1.UpdateRunnerEnvironmentStatusResponse], error)
	// UpdateRunnerStatus updates the status of the runner.
	UpdateRunnerStatus(context.Context, *connect.Request[v1.UpdateRunnerStatusRequest]) (*connect.Response[v1.UpdateRunnerStatusResponse], error)
	// UpdateRunnerConfigurationSchema updates the runner's configuration schema.
	UpdateRunnerConfigurationSchema(context.Context, *connect.Request[v1.UpdateRunnerConfigurationSchemaRequest]) (*connect.Response[v1.UpdateRunnerConfigurationSchemaResponse], error)
	// GetRunnerHostAuthenticationToken returns an authentication token for the given host.
	GetHostAuthenticationTokenValue(context.Context, *connect.Request[v1.GetHostAuthenticationTokenValueRequest]) (*connect.Response[v1.GetHostAuthenticationTokenValueResponse], error)
	// ListRunnerEnvironmentClasses returns the environment classes configured for the runner.
	ListRunnerEnvironmentClasses(context.Context, *connect.Request[v1.ListRunnerEnvironmentClassesRequest]) (*connect.Response[v1.ListRunnerEnvironmentClassesResponse], error)
	// ListRunnerSCMIntegrations returns the SCM integrations configured for the runner.
	// For local runners, this returns the SCM integrations configured on the organization's
	// local-configuration runner.
	ListRunnerSCMIntegrations(context.Context, *connect.Request[v1.ListRunnerSCMIntegrationsRequest]) (*connect.Response[v1.ListRunnerSCMIntegrationsResponse], error)
	// WatchRequests returns a stream of requests for this runner to handle.
	WatchRequests(context.Context, *connect.Request[v1.WatchRequestsRequest]) (*connect.ServerStreamForClient[v1.WatchRequestsResponse], error)
	// SendResponse sends a response to a request.
	SendResponse(context.Context, *connect.Request[v1.SendResponseRequest]) (*connect.Response[v1.SendResponseResponse], error)
	// GetLatestVersion returns the latest version of the runner.
	GetLatestVersion(context.Context, *connect.Request[v1.GetLatestVersionRequest]) (*connect.Response[v1.GetLatestVersionResponse], error)
}

// NewRunnerInteractionServiceClient constructs a client for the gitpod.v1.RunnerInteractionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRunnerInteractionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RunnerInteractionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runnerInteractionServiceClient{
		signup: connect.NewClient[v1.SignupRequest, v1.SignupResponse](
			httpClient,
			baseURL+RunnerInteractionServiceSignupProcedure,
			connect.WithSchema(runnerInteractionServiceSignupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		markRunnerActive: connect.NewClient[v1.MarkRunnerActiveRequest, v1.MarkRunnerActiveResponse](
			httpClient,
			baseURL+RunnerInteractionServiceMarkRunnerActiveProcedure,
			connect.WithSchema(runnerInteractionServiceMarkRunnerActiveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRunnerEnvironment: connect.NewClient[v1.GetRunnerEnvironmentRequest, v1.GetRunnerEnvironmentResponse](
			httpClient,
			baseURL+RunnerInteractionServiceGetRunnerEnvironmentProcedure,
			connect.WithSchema(runnerInteractionServiceGetRunnerEnvironmentMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listRunnerEnvironments: connect.NewClient[v1.ListRunnerEnvironmentsRequest, v1.ListRunnerEnvironmentsResponse](
			httpClient,
			baseURL+RunnerInteractionServiceListRunnerEnvironmentsProcedure,
			connect.WithSchema(runnerInteractionServiceListRunnerEnvironmentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRunnerEnvironmentStatus: connect.NewClient[v1.UpdateRunnerEnvironmentStatusRequest, v1.UpdateRunnerEnvironmentStatusResponse](
			httpClient,
			baseURL+RunnerInteractionServiceUpdateRunnerEnvironmentStatusProcedure,
			connect.WithSchema(runnerInteractionServiceUpdateRunnerEnvironmentStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRunnerStatus: connect.NewClient[v1.UpdateRunnerStatusRequest, v1.UpdateRunnerStatusResponse](
			httpClient,
			baseURL+RunnerInteractionServiceUpdateRunnerStatusProcedure,
			connect.WithSchema(runnerInteractionServiceUpdateRunnerStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRunnerConfigurationSchema: connect.NewClient[v1.UpdateRunnerConfigurationSchemaRequest, v1.UpdateRunnerConfigurationSchemaResponse](
			httpClient,
			baseURL+RunnerInteractionServiceUpdateRunnerConfigurationSchemaProcedure,
			connect.WithSchema(runnerInteractionServiceUpdateRunnerConfigurationSchemaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getHostAuthenticationTokenValue: connect.NewClient[v1.GetHostAuthenticationTokenValueRequest, v1.GetHostAuthenticationTokenValueResponse](
			httpClient,
			baseURL+RunnerInteractionServiceGetHostAuthenticationTokenValueProcedure,
			connect.WithSchema(runnerInteractionServiceGetHostAuthenticationTokenValueMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listRunnerEnvironmentClasses: connect.NewClient[v1.ListRunnerEnvironmentClassesRequest, v1.ListRunnerEnvironmentClassesResponse](
			httpClient,
			baseURL+RunnerInteractionServiceListRunnerEnvironmentClassesProcedure,
			connect.WithSchema(runnerInteractionServiceListRunnerEnvironmentClassesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRunnerSCMIntegrations: connect.NewClient[v1.ListRunnerSCMIntegrationsRequest, v1.ListRunnerSCMIntegrationsResponse](
			httpClient,
			baseURL+RunnerInteractionServiceListRunnerSCMIntegrationsProcedure,
			connect.WithSchema(runnerInteractionServiceListRunnerSCMIntegrationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		watchRequests: connect.NewClient[v1.WatchRequestsRequest, v1.WatchRequestsResponse](
			httpClient,
			baseURL+RunnerInteractionServiceWatchRequestsProcedure,
			connect.WithSchema(runnerInteractionServiceWatchRequestsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendResponse: connect.NewClient[v1.SendResponseRequest, v1.SendResponseResponse](
			httpClient,
			baseURL+RunnerInteractionServiceSendResponseProcedure,
			connect.WithSchema(runnerInteractionServiceSendResponseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLatestVersion: connect.NewClient[v1.GetLatestVersionRequest, v1.GetLatestVersionResponse](
			httpClient,
			baseURL+RunnerInteractionServiceGetLatestVersionProcedure,
			connect.WithSchema(runnerInteractionServiceGetLatestVersionMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// runnerInteractionServiceClient implements RunnerInteractionServiceClient.
type runnerInteractionServiceClient struct {
	signup                          *connect.Client[v1.SignupRequest, v1.SignupResponse]
	markRunnerActive                *connect.Client[v1.MarkRunnerActiveRequest, v1.MarkRunnerActiveResponse]
	getRunnerEnvironment            *connect.Client[v1.GetRunnerEnvironmentRequest, v1.GetRunnerEnvironmentResponse]
	listRunnerEnvironments          *connect.Client[v1.ListRunnerEnvironmentsRequest, v1.ListRunnerEnvironmentsResponse]
	updateRunnerEnvironmentStatus   *connect.Client[v1.UpdateRunnerEnvironmentStatusRequest, v1.UpdateRunnerEnvironmentStatusResponse]
	updateRunnerStatus              *connect.Client[v1.UpdateRunnerStatusRequest, v1.UpdateRunnerStatusResponse]
	updateRunnerConfigurationSchema *connect.Client[v1.UpdateRunnerConfigurationSchemaRequest, v1.UpdateRunnerConfigurationSchemaResponse]
	getHostAuthenticationTokenValue *connect.Client[v1.GetHostAuthenticationTokenValueRequest, v1.GetHostAuthenticationTokenValueResponse]
	listRunnerEnvironmentClasses    *connect.Client[v1.ListRunnerEnvironmentClassesRequest, v1.ListRunnerEnvironmentClassesResponse]
	listRunnerSCMIntegrations       *connect.Client[v1.ListRunnerSCMIntegrationsRequest, v1.ListRunnerSCMIntegrationsResponse]
	watchRequests                   *connect.Client[v1.WatchRequestsRequest, v1.WatchRequestsResponse]
	sendResponse                    *connect.Client[v1.SendResponseRequest, v1.SendResponseResponse]
	getLatestVersion                *connect.Client[v1.GetLatestVersionRequest, v1.GetLatestVersionResponse]
}

// Signup calls gitpod.v1.RunnerInteractionService.Signup.
func (c *runnerInteractionServiceClient) Signup(ctx context.Context, req *connect.Request[v1.SignupRequest]) (*connect.Response[v1.SignupResponse], error) {
	return c.signup.CallUnary(ctx, req)
}

// MarkRunnerActive calls gitpod.v1.RunnerInteractionService.MarkRunnerActive.
func (c *runnerInteractionServiceClient) MarkRunnerActive(ctx context.Context, req *connect.Request[v1.MarkRunnerActiveRequest]) (*connect.Response[v1.MarkRunnerActiveResponse], error) {
	return c.markRunnerActive.CallUnary(ctx, req)
}

// GetRunnerEnvironment calls gitpod.v1.RunnerInteractionService.GetRunnerEnvironment.
func (c *runnerInteractionServiceClient) GetRunnerEnvironment(ctx context.Context, req *connect.Request[v1.GetRunnerEnvironmentRequest]) (*connect.Response[v1.GetRunnerEnvironmentResponse], error) {
	return c.getRunnerEnvironment.CallUnary(ctx, req)
}

// ListRunnerEnvironments calls gitpod.v1.RunnerInteractionService.ListRunnerEnvironments.
func (c *runnerInteractionServiceClient) ListRunnerEnvironments(ctx context.Context, req *connect.Request[v1.ListRunnerEnvironmentsRequest]) (*connect.Response[v1.ListRunnerEnvironmentsResponse], error) {
	return c.listRunnerEnvironments.CallUnary(ctx, req)
}

// UpdateRunnerEnvironmentStatus calls
// gitpod.v1.RunnerInteractionService.UpdateRunnerEnvironmentStatus.
func (c *runnerInteractionServiceClient) UpdateRunnerEnvironmentStatus(ctx context.Context, req *connect.Request[v1.UpdateRunnerEnvironmentStatusRequest]) (*connect.Response[v1.UpdateRunnerEnvironmentStatusResponse], error) {
	return c.updateRunnerEnvironmentStatus.CallUnary(ctx, req)
}

// UpdateRunnerStatus calls gitpod.v1.RunnerInteractionService.UpdateRunnerStatus.
func (c *runnerInteractionServiceClient) UpdateRunnerStatus(ctx context.Context, req *connect.Request[v1.UpdateRunnerStatusRequest]) (*connect.Response[v1.UpdateRunnerStatusResponse], error) {
	return c.updateRunnerStatus.CallUnary(ctx, req)
}

// UpdateRunnerConfigurationSchema calls
// gitpod.v1.RunnerInteractionService.UpdateRunnerConfigurationSchema.
func (c *runnerInteractionServiceClient) UpdateRunnerConfigurationSchema(ctx context.Context, req *connect.Request[v1.UpdateRunnerConfigurationSchemaRequest]) (*connect.Response[v1.UpdateRunnerConfigurationSchemaResponse], error) {
	return c.updateRunnerConfigurationSchema.CallUnary(ctx, req)
}

// GetHostAuthenticationTokenValue calls
// gitpod.v1.RunnerInteractionService.GetHostAuthenticationTokenValue.
func (c *runnerInteractionServiceClient) GetHostAuthenticationTokenValue(ctx context.Context, req *connect.Request[v1.GetHostAuthenticationTokenValueRequest]) (*connect.Response[v1.GetHostAuthenticationTokenValueResponse], error) {
	return c.getHostAuthenticationTokenValue.CallUnary(ctx, req)
}

// ListRunnerEnvironmentClasses calls
// gitpod.v1.RunnerInteractionService.ListRunnerEnvironmentClasses.
func (c *runnerInteractionServiceClient) ListRunnerEnvironmentClasses(ctx context.Context, req *connect.Request[v1.ListRunnerEnvironmentClassesRequest]) (*connect.Response[v1.ListRunnerEnvironmentClassesResponse], error) {
	return c.listRunnerEnvironmentClasses.CallUnary(ctx, req)
}

// ListRunnerSCMIntegrations calls gitpod.v1.RunnerInteractionService.ListRunnerSCMIntegrations.
func (c *runnerInteractionServiceClient) ListRunnerSCMIntegrations(ctx context.Context, req *connect.Request[v1.ListRunnerSCMIntegrationsRequest]) (*connect.Response[v1.ListRunnerSCMIntegrationsResponse], error) {
	return c.listRunnerSCMIntegrations.CallUnary(ctx, req)
}

// WatchRequests calls gitpod.v1.RunnerInteractionService.WatchRequests.
func (c *runnerInteractionServiceClient) WatchRequests(ctx context.Context, req *connect.Request[v1.WatchRequestsRequest]) (*connect.ServerStreamForClient[v1.WatchRequestsResponse], error) {
	return c.watchRequests.CallServerStream(ctx, req)
}

// SendResponse calls gitpod.v1.RunnerInteractionService.SendResponse.
func (c *runnerInteractionServiceClient) SendResponse(ctx context.Context, req *connect.Request[v1.SendResponseRequest]) (*connect.Response[v1.SendResponseResponse], error) {
	return c.sendResponse.CallUnary(ctx, req)
}

// GetLatestVersion calls gitpod.v1.RunnerInteractionService.GetLatestVersion.
func (c *runnerInteractionServiceClient) GetLatestVersion(ctx context.Context, req *connect.Request[v1.GetLatestVersionRequest]) (*connect.Response[v1.GetLatestVersionResponse], error) {
	return c.getLatestVersion.CallUnary(ctx, req)
}

// RunnerInteractionServiceHandler is an implementation of the gitpod.v1.RunnerInteractionService
// service.
type RunnerInteractionServiceHandler interface {
	// Signup is called by a runner to sign up with the backend. This is the first call a runner makes.
	Signup(context.Context, *connect.Request[v1.SignupRequest]) (*connect.Response[v1.SignupResponse], error)
	// MarkRunnerActive marks a runner as available. This must be called every 30 seconds
	// to keep the runner active.
	MarkRunnerActive(context.Context, *connect.Request[v1.MarkRunnerActiveRequest]) (*connect.Response[v1.MarkRunnerActiveResponse], error)
	// GetRunnerEnvironment returns the environment given it is owned by the runner.
	GetRunnerEnvironment(context.Context, *connect.Request[v1.GetRunnerEnvironmentRequest]) (*connect.Response[v1.GetRunnerEnvironmentResponse], error)
	// ListRunnerEnvironments returns the environments this runner is responsible for.
	ListRunnerEnvironments(context.Context, *connect.Request[v1.ListRunnerEnvironmentsRequest]) (*connect.Response[v1.ListRunnerEnvironmentsResponse], error)
	// UpdateRunnerEnvironmentStatus updates the status of an environment this runner is responsible for.
	UpdateRunnerEnvironmentStatus(context.Context, *connect.Request[v1.UpdateRunnerEnvironmentStatusRequest]) (*connect.Response[v1.UpdateRunnerEnvironmentStatusResponse], error)
	// UpdateRunnerStatus updates the status of the runner.
	UpdateRunnerStatus(context.Context, *connect.Request[v1.UpdateRunnerStatusRequest]) (*connect.Response[v1.UpdateRunnerStatusResponse], error)
	// UpdateRunnerConfigurationSchema updates the runner's configuration schema.
	UpdateRunnerConfigurationSchema(context.Context, *connect.Request[v1.UpdateRunnerConfigurationSchemaRequest]) (*connect.Response[v1.UpdateRunnerConfigurationSchemaResponse], error)
	// GetRunnerHostAuthenticationToken returns an authentication token for the given host.
	GetHostAuthenticationTokenValue(context.Context, *connect.Request[v1.GetHostAuthenticationTokenValueRequest]) (*connect.Response[v1.GetHostAuthenticationTokenValueResponse], error)
	// ListRunnerEnvironmentClasses returns the environment classes configured for the runner.
	ListRunnerEnvironmentClasses(context.Context, *connect.Request[v1.ListRunnerEnvironmentClassesRequest]) (*connect.Response[v1.ListRunnerEnvironmentClassesResponse], error)
	// ListRunnerSCMIntegrations returns the SCM integrations configured for the runner.
	// For local runners, this returns the SCM integrations configured on the organization's
	// local-configuration runner.
	ListRunnerSCMIntegrations(context.Context, *connect.Request[v1.ListRunnerSCMIntegrationsRequest]) (*connect.Response[v1.ListRunnerSCMIntegrationsResponse], error)
	// WatchRequests returns a stream of requests for this runner to handle.
	WatchRequests(context.Context, *connect.Request[v1.WatchRequestsRequest], *connect.ServerStream[v1.WatchRequestsResponse]) error
	// SendResponse sends a response to a request.
	SendResponse(context.Context, *connect.Request[v1.SendResponseRequest]) (*connect.Response[v1.SendResponseResponse], error)
	// GetLatestVersion returns the latest version of the runner.
	GetLatestVersion(context.Context, *connect.Request[v1.GetLatestVersionRequest]) (*connect.Response[v1.GetLatestVersionResponse], error)
}

// NewRunnerInteractionServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRunnerInteractionServiceHandler(svc RunnerInteractionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	runnerInteractionServiceSignupHandler := connect.NewUnaryHandler(
		RunnerInteractionServiceSignupProcedure,
		svc.Signup,
		connect.WithSchema(runnerInteractionServiceSignupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerInteractionServiceMarkRunnerActiveHandler := connect.NewUnaryHandler(
		RunnerInteractionServiceMarkRunnerActiveProcedure,
		svc.MarkRunnerActive,
		connect.WithSchema(runnerInteractionServiceMarkRunnerActiveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerInteractionServiceGetRunnerEnvironmentHandler := connect.NewUnaryHandler(
		RunnerInteractionServiceGetRunnerEnvironmentProcedure,
		svc.GetRunnerEnvironment,
		connect.WithSchema(runnerInteractionServiceGetRunnerEnvironmentMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerInteractionServiceListRunnerEnvironmentsHandler := connect.NewUnaryHandler(
		RunnerInteractionServiceListRunnerEnvironmentsProcedure,
		svc.ListRunnerEnvironments,
		connect.WithSchema(runnerInteractionServiceListRunnerEnvironmentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerInteractionServiceUpdateRunnerEnvironmentStatusHandler := connect.NewUnaryHandler(
		RunnerInteractionServiceUpdateRunnerEnvironmentStatusProcedure,
		svc.UpdateRunnerEnvironmentStatus,
		connect.WithSchema(runnerInteractionServiceUpdateRunnerEnvironmentStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerInteractionServiceUpdateRunnerStatusHandler := connect.NewUnaryHandler(
		RunnerInteractionServiceUpdateRunnerStatusProcedure,
		svc.UpdateRunnerStatus,
		connect.WithSchema(runnerInteractionServiceUpdateRunnerStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerInteractionServiceUpdateRunnerConfigurationSchemaHandler := connect.NewUnaryHandler(
		RunnerInteractionServiceUpdateRunnerConfigurationSchemaProcedure,
		svc.UpdateRunnerConfigurationSchema,
		connect.WithSchema(runnerInteractionServiceUpdateRunnerConfigurationSchemaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerInteractionServiceGetHostAuthenticationTokenValueHandler := connect.NewUnaryHandler(
		RunnerInteractionServiceGetHostAuthenticationTokenValueProcedure,
		svc.GetHostAuthenticationTokenValue,
		connect.WithSchema(runnerInteractionServiceGetHostAuthenticationTokenValueMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runnerInteractionServiceListRunnerEnvironmentClassesHandler := connect.NewUnaryHandler(
		RunnerInteractionServiceListRunnerEnvironmentClassesProcedure,
		svc.ListRunnerEnvironmentClasses,
		connect.WithSchema(runnerInteractionServiceListRunnerEnvironmentClassesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerInteractionServiceListRunnerSCMIntegrationsHandler := connect.NewUnaryHandler(
		RunnerInteractionServiceListRunnerSCMIntegrationsProcedure,
		svc.ListRunnerSCMIntegrations,
		connect.WithSchema(runnerInteractionServiceListRunnerSCMIntegrationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerInteractionServiceWatchRequestsHandler := connect.NewServerStreamHandler(
		RunnerInteractionServiceWatchRequestsProcedure,
		svc.WatchRequests,
		connect.WithSchema(runnerInteractionServiceWatchRequestsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerInteractionServiceSendResponseHandler := connect.NewUnaryHandler(
		RunnerInteractionServiceSendResponseProcedure,
		svc.SendResponse,
		connect.WithSchema(runnerInteractionServiceSendResponseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerInteractionServiceGetLatestVersionHandler := connect.NewUnaryHandler(
		RunnerInteractionServiceGetLatestVersionProcedure,
		svc.GetLatestVersion,
		connect.WithSchema(runnerInteractionServiceGetLatestVersionMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.RunnerInteractionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RunnerInteractionServiceSignupProcedure:
			runnerInteractionServiceSignupHandler.ServeHTTP(w, r)
		case RunnerInteractionServiceMarkRunnerActiveProcedure:
			runnerInteractionServiceMarkRunnerActiveHandler.ServeHTTP(w, r)
		case RunnerInteractionServiceGetRunnerEnvironmentProcedure:
			runnerInteractionServiceGetRunnerEnvironmentHandler.ServeHTTP(w, r)
		case RunnerInteractionServiceListRunnerEnvironmentsProcedure:
			runnerInteractionServiceListRunnerEnvironmentsHandler.ServeHTTP(w, r)
		case RunnerInteractionServiceUpdateRunnerEnvironmentStatusProcedure:
			runnerInteractionServiceUpdateRunnerEnvironmentStatusHandler.ServeHTTP(w, r)
		case RunnerInteractionServiceUpdateRunnerStatusProcedure:
			runnerInteractionServiceUpdateRunnerStatusHandler.ServeHTTP(w, r)
		case RunnerInteractionServiceUpdateRunnerConfigurationSchemaProcedure:
			runnerInteractionServiceUpdateRunnerConfigurationSchemaHandler.ServeHTTP(w, r)
		case RunnerInteractionServiceGetHostAuthenticationTokenValueProcedure:
			runnerInteractionServiceGetHostAuthenticationTokenValueHandler.ServeHTTP(w, r)
		case RunnerInteractionServiceListRunnerEnvironmentClassesProcedure:
			runnerInteractionServiceListRunnerEnvironmentClassesHandler.ServeHTTP(w, r)
		case RunnerInteractionServiceListRunnerSCMIntegrationsProcedure:
			runnerInteractionServiceListRunnerSCMIntegrationsHandler.ServeHTTP(w, r)
		case RunnerInteractionServiceWatchRequestsProcedure:
			runnerInteractionServiceWatchRequestsHandler.ServeHTTP(w, r)
		case RunnerInteractionServiceSendResponseProcedure:
			runnerInteractionServiceSendResponseHandler.ServeHTTP(w, r)
		case RunnerInteractionServiceGetLatestVersionProcedure:
			runnerInteractionServiceGetLatestVersionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRunnerInteractionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRunnerInteractionServiceHandler struct{}

func (UnimplementedRunnerInteractionServiceHandler) Signup(context.Context, *connect.Request[v1.SignupRequest]) (*connect.Response[v1.SignupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.Signup is not implemented"))
}

func (UnimplementedRunnerInteractionServiceHandler) MarkRunnerActive(context.Context, *connect.Request[v1.MarkRunnerActiveRequest]) (*connect.Response[v1.MarkRunnerActiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.MarkRunnerActive is not implemented"))
}

func (UnimplementedRunnerInteractionServiceHandler) GetRunnerEnvironment(context.Context, *connect.Request[v1.GetRunnerEnvironmentRequest]) (*connect.Response[v1.GetRunnerEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.GetRunnerEnvironment is not implemented"))
}

func (UnimplementedRunnerInteractionServiceHandler) ListRunnerEnvironments(context.Context, *connect.Request[v1.ListRunnerEnvironmentsRequest]) (*connect.Response[v1.ListRunnerEnvironmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.ListRunnerEnvironments is not implemented"))
}

func (UnimplementedRunnerInteractionServiceHandler) UpdateRunnerEnvironmentStatus(context.Context, *connect.Request[v1.UpdateRunnerEnvironmentStatusRequest]) (*connect.Response[v1.UpdateRunnerEnvironmentStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.UpdateRunnerEnvironmentStatus is not implemented"))
}

func (UnimplementedRunnerInteractionServiceHandler) UpdateRunnerStatus(context.Context, *connect.Request[v1.UpdateRunnerStatusRequest]) (*connect.Response[v1.UpdateRunnerStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.UpdateRunnerStatus is not implemented"))
}

func (UnimplementedRunnerInteractionServiceHandler) UpdateRunnerConfigurationSchema(context.Context, *connect.Request[v1.UpdateRunnerConfigurationSchemaRequest]) (*connect.Response[v1.UpdateRunnerConfigurationSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.UpdateRunnerConfigurationSchema is not implemented"))
}

func (UnimplementedRunnerInteractionServiceHandler) GetHostAuthenticationTokenValue(context.Context, *connect.Request[v1.GetHostAuthenticationTokenValueRequest]) (*connect.Response[v1.GetHostAuthenticationTokenValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.GetHostAuthenticationTokenValue is not implemented"))
}

func (UnimplementedRunnerInteractionServiceHandler) ListRunnerEnvironmentClasses(context.Context, *connect.Request[v1.ListRunnerEnvironmentClassesRequest]) (*connect.Response[v1.ListRunnerEnvironmentClassesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.ListRunnerEnvironmentClasses is not implemented"))
}

func (UnimplementedRunnerInteractionServiceHandler) ListRunnerSCMIntegrations(context.Context, *connect.Request[v1.ListRunnerSCMIntegrationsRequest]) (*connect.Response[v1.ListRunnerSCMIntegrationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.ListRunnerSCMIntegrations is not implemented"))
}

func (UnimplementedRunnerInteractionServiceHandler) WatchRequests(context.Context, *connect.Request[v1.WatchRequestsRequest], *connect.ServerStream[v1.WatchRequestsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.WatchRequests is not implemented"))
}

func (UnimplementedRunnerInteractionServiceHandler) SendResponse(context.Context, *connect.Request[v1.SendResponseRequest]) (*connect.Response[v1.SendResponseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.SendResponse is not implemented"))
}

func (UnimplementedRunnerInteractionServiceHandler) GetLatestVersion(context.Context, *connect.Request[v1.GetLatestVersionRequest]) (*connect.Response[v1.GetLatestVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.RunnerInteractionService.GetLatestVersion is not implemented"))
}
