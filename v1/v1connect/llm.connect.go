// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/llm.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-api-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LLMServiceName is the fully-qualified name of the LLMService service.
	LLMServiceName = "gitpod.v1.LLMService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LLMServiceInvokeModelProcedure is the fully-qualified name of the LLMService's InvokeModel RPC.
	LLMServiceInvokeModelProcedure = "/gitpod.v1.LLMService/InvokeModel"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	lLMServiceServiceDescriptor           = v1.File_gitpod_v1_llm_proto.Services().ByName("LLMService")
	lLMServiceInvokeModelMethodDescriptor = lLMServiceServiceDescriptor.Methods().ByName("InvokeModel")
)

// LLMServiceClient is a client for the gitpod.v1.LLMService service.
type LLMServiceClient interface {
	InvokeModel(context.Context, *connect.Request[v1.InvokeModelRequest]) (*connect.Response[v1.InvokeModelResponse], error)
}

// NewLLMServiceClient constructs a client for the gitpod.v1.LLMService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLLMServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LLMServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &lLMServiceClient{
		invokeModel: connect.NewClient[v1.InvokeModelRequest, v1.InvokeModelResponse](
			httpClient,
			baseURL+LLMServiceInvokeModelProcedure,
			connect.WithSchema(lLMServiceInvokeModelMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// lLMServiceClient implements LLMServiceClient.
type lLMServiceClient struct {
	invokeModel *connect.Client[v1.InvokeModelRequest, v1.InvokeModelResponse]
}

// InvokeModel calls gitpod.v1.LLMService.InvokeModel.
func (c *lLMServiceClient) InvokeModel(ctx context.Context, req *connect.Request[v1.InvokeModelRequest]) (*connect.Response[v1.InvokeModelResponse], error) {
	return c.invokeModel.CallUnary(ctx, req)
}

// LLMServiceHandler is an implementation of the gitpod.v1.LLMService service.
type LLMServiceHandler interface {
	InvokeModel(context.Context, *connect.Request[v1.InvokeModelRequest]) (*connect.Response[v1.InvokeModelResponse], error)
}

// NewLLMServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLLMServiceHandler(svc LLMServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	lLMServiceInvokeModelHandler := connect.NewUnaryHandler(
		LLMServiceInvokeModelProcedure,
		svc.InvokeModel,
		connect.WithSchema(lLMServiceInvokeModelMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.LLMService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LLMServiceInvokeModelProcedure:
			lLMServiceInvokeModelHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLLMServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLLMServiceHandler struct{}

func (UnimplementedLLMServiceHandler) InvokeModel(context.Context, *connect.Request[v1.InvokeModelRequest]) (*connect.Response[v1.InvokeModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.LLMService.InvokeModel is not implemented"))
}
