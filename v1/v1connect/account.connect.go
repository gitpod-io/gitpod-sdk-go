// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/account.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "gitpod.v1.AccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountServiceGetAccountProcedure is the fully-qualified name of the AccountService's GetAccount
	// RPC.
	AccountServiceGetAccountProcedure = "/gitpod.v1.AccountService/GetAccount"
	// AccountServiceDeleteAccountProcedure is the fully-qualified name of the AccountService's
	// DeleteAccount RPC.
	AccountServiceDeleteAccountProcedure = "/gitpod.v1.AccountService/DeleteAccount"
	// AccountServiceGetSSOLoginURLProcedure is the fully-qualified name of the AccountService's
	// GetSSOLoginURL RPC.
	AccountServiceGetSSOLoginURLProcedure = "/gitpod.v1.AccountService/GetSSOLoginURL"
	// AccountServiceListLoginProvidersProcedure is the fully-qualified name of the AccountService's
	// ListLoginProviders RPC.
	AccountServiceListLoginProvidersProcedure = "/gitpod.v1.AccountService/ListLoginProviders"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	accountServiceServiceDescriptor                  = v1.File_gitpod_v1_account_proto.Services().ByName("AccountService")
	accountServiceGetAccountMethodDescriptor         = accountServiceServiceDescriptor.Methods().ByName("GetAccount")
	accountServiceDeleteAccountMethodDescriptor      = accountServiceServiceDescriptor.Methods().ByName("DeleteAccount")
	accountServiceGetSSOLoginURLMethodDescriptor     = accountServiceServiceDescriptor.Methods().ByName("GetSSOLoginURL")
	accountServiceListLoginProvidersMethodDescriptor = accountServiceServiceDescriptor.Methods().ByName("ListLoginProviders")
)

// AccountServiceClient is a client for the gitpod.v1.AccountService service.
type AccountServiceClient interface {
	// GetAccount retrieves a single Account.
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
	// DeleteAccount deletes an Account.
	// To Delete an Account, the Account must not be an active member of any Organization.
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	// GetSSOLoginURL returns the URL to redirect the user to for SSO login.
	GetSSOLoginURL(context.Context, *connect.Request[v1.GetSSOLoginURLRequest]) (*connect.Response[v1.GetSSOLoginURLResponse], error)
	// ListLoginProviders returns the list of login providers matching the provided filters.
	ListLoginProviders(context.Context, *connect.Request[v1.ListLoginProvidersRequest]) (*connect.Response[v1.ListLoginProvidersResponse], error)
}

// NewAccountServiceClient constructs a client for the gitpod.v1.AccountService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountServiceClient{
		getAccount: connect.NewClient[v1.GetAccountRequest, v1.GetAccountResponse](
			httpClient,
			baseURL+AccountServiceGetAccountProcedure,
			connect.WithSchema(accountServiceGetAccountMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteAccount: connect.NewClient[v1.DeleteAccountRequest, v1.DeleteAccountResponse](
			httpClient,
			baseURL+AccountServiceDeleteAccountProcedure,
			connect.WithSchema(accountServiceDeleteAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSSOLoginURL: connect.NewClient[v1.GetSSOLoginURLRequest, v1.GetSSOLoginURLResponse](
			httpClient,
			baseURL+AccountServiceGetSSOLoginURLProcedure,
			connect.WithSchema(accountServiceGetSSOLoginURLMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listLoginProviders: connect.NewClient[v1.ListLoginProvidersRequest, v1.ListLoginProvidersResponse](
			httpClient,
			baseURL+AccountServiceListLoginProvidersProcedure,
			connect.WithSchema(accountServiceListLoginProvidersMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	getAccount         *connect.Client[v1.GetAccountRequest, v1.GetAccountResponse]
	deleteAccount      *connect.Client[v1.DeleteAccountRequest, v1.DeleteAccountResponse]
	getSSOLoginURL     *connect.Client[v1.GetSSOLoginURLRequest, v1.GetSSOLoginURLResponse]
	listLoginProviders *connect.Client[v1.ListLoginProvidersRequest, v1.ListLoginProvidersResponse]
}

// GetAccount calls gitpod.v1.AccountService.GetAccount.
func (c *accountServiceClient) GetAccount(ctx context.Context, req *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// DeleteAccount calls gitpod.v1.AccountService.DeleteAccount.
func (c *accountServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// GetSSOLoginURL calls gitpod.v1.AccountService.GetSSOLoginURL.
func (c *accountServiceClient) GetSSOLoginURL(ctx context.Context, req *connect.Request[v1.GetSSOLoginURLRequest]) (*connect.Response[v1.GetSSOLoginURLResponse], error) {
	return c.getSSOLoginURL.CallUnary(ctx, req)
}

// ListLoginProviders calls gitpod.v1.AccountService.ListLoginProviders.
func (c *accountServiceClient) ListLoginProviders(ctx context.Context, req *connect.Request[v1.ListLoginProvidersRequest]) (*connect.Response[v1.ListLoginProvidersResponse], error) {
	return c.listLoginProviders.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the gitpod.v1.AccountService service.
type AccountServiceHandler interface {
	// GetAccount retrieves a single Account.
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
	// DeleteAccount deletes an Account.
	// To Delete an Account, the Account must not be an active member of any Organization.
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	// GetSSOLoginURL returns the URL to redirect the user to for SSO login.
	GetSSOLoginURL(context.Context, *connect.Request[v1.GetSSOLoginURLRequest]) (*connect.Response[v1.GetSSOLoginURLResponse], error)
	// ListLoginProviders returns the list of login providers matching the provided filters.
	ListLoginProviders(context.Context, *connect.Request[v1.ListLoginProvidersRequest]) (*connect.Response[v1.ListLoginProvidersResponse], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountServiceGetAccountHandler := connect.NewUnaryHandler(
		AccountServiceGetAccountProcedure,
		svc.GetAccount,
		connect.WithSchema(accountServiceGetAccountMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceDeleteAccountHandler := connect.NewUnaryHandler(
		AccountServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		connect.WithSchema(accountServiceDeleteAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetSSOLoginURLHandler := connect.NewUnaryHandler(
		AccountServiceGetSSOLoginURLProcedure,
		svc.GetSSOLoginURL,
		connect.WithSchema(accountServiceGetSSOLoginURLMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceListLoginProvidersHandler := connect.NewUnaryHandler(
		AccountServiceListLoginProvidersProcedure,
		svc.ListLoginProviders,
		connect.WithSchema(accountServiceListLoginProvidersMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.AccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountServiceGetAccountProcedure:
			accountServiceGetAccountHandler.ServeHTTP(w, r)
		case AccountServiceDeleteAccountProcedure:
			accountServiceDeleteAccountHandler.ServeHTTP(w, r)
		case AccountServiceGetSSOLoginURLProcedure:
			accountServiceGetSSOLoginURLHandler.ServeHTTP(w, r)
		case AccountServiceListLoginProvidersProcedure:
			accountServiceListLoginProvidersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.AccountService.GetAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.AccountService.DeleteAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetSSOLoginURL(context.Context, *connect.Request[v1.GetSSOLoginURLRequest]) (*connect.Response[v1.GetSSOLoginURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.AccountService.GetSSOLoginURL is not implemented"))
}

func (UnimplementedAccountServiceHandler) ListLoginProviders(context.Context, *connect.Request[v1.ListLoginProvidersRequest]) (*connect.Response[v1.ListLoginProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.AccountService.ListLoginProviders is not implemented"))
}
