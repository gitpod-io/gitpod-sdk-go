// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gitpod/v1/editor.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gitpod-io/flex-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EditorServiceName is the fully-qualified name of the EditorService service.
	EditorServiceName = "gitpod.v1.EditorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EditorServiceListEditorsProcedure is the fully-qualified name of the EditorService's ListEditors
	// RPC.
	EditorServiceListEditorsProcedure = "/gitpod.v1.EditorService/ListEditors"
	// EditorServiceGetEditorProcedure is the fully-qualified name of the EditorService's GetEditor RPC.
	EditorServiceGetEditorProcedure = "/gitpod.v1.EditorService/GetEditor"
	// EditorServiceResolveEditorURLProcedure is the fully-qualified name of the EditorService's
	// ResolveEditorURL RPC.
	EditorServiceResolveEditorURLProcedure = "/gitpod.v1.EditorService/ResolveEditorURL"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	editorServiceServiceDescriptor                = v1.File_gitpod_v1_editor_proto.Services().ByName("EditorService")
	editorServiceListEditorsMethodDescriptor      = editorServiceServiceDescriptor.Methods().ByName("ListEditors")
	editorServiceGetEditorMethodDescriptor        = editorServiceServiceDescriptor.Methods().ByName("GetEditor")
	editorServiceResolveEditorURLMethodDescriptor = editorServiceServiceDescriptor.Methods().ByName("ResolveEditorURL")
)

// EditorServiceClient is a client for the gitpod.v1.EditorService service.
type EditorServiceClient interface {
	// ListEditors lists all editors available to the caller
	ListEditors(context.Context, *connect.Request[v1.ListEditorsRequest]) (*connect.Response[v1.ListEditorsResponse], error)
	// GetEditor returns the editor with the given ID
	GetEditor(context.Context, *connect.Request[v1.GetEditorRequest]) (*connect.Response[v1.GetEditorResponse], error)
	// ResolveEditorURL resolves the editor's URL for an environment
	ResolveEditorURL(context.Context, *connect.Request[v1.ResolveEditorURLRequest]) (*connect.Response[v1.ResolveEditorURLResponse], error)
}

// NewEditorServiceClient constructs a client for the gitpod.v1.EditorService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEditorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EditorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &editorServiceClient{
		listEditors: connect.NewClient[v1.ListEditorsRequest, v1.ListEditorsResponse](
			httpClient,
			baseURL+EditorServiceListEditorsProcedure,
			connect.WithSchema(editorServiceListEditorsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getEditor: connect.NewClient[v1.GetEditorRequest, v1.GetEditorResponse](
			httpClient,
			baseURL+EditorServiceGetEditorProcedure,
			connect.WithSchema(editorServiceGetEditorMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		resolveEditorURL: connect.NewClient[v1.ResolveEditorURLRequest, v1.ResolveEditorURLResponse](
			httpClient,
			baseURL+EditorServiceResolveEditorURLProcedure,
			connect.WithSchema(editorServiceResolveEditorURLMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// editorServiceClient implements EditorServiceClient.
type editorServiceClient struct {
	listEditors      *connect.Client[v1.ListEditorsRequest, v1.ListEditorsResponse]
	getEditor        *connect.Client[v1.GetEditorRequest, v1.GetEditorResponse]
	resolveEditorURL *connect.Client[v1.ResolveEditorURLRequest, v1.ResolveEditorURLResponse]
}

// ListEditors calls gitpod.v1.EditorService.ListEditors.
func (c *editorServiceClient) ListEditors(ctx context.Context, req *connect.Request[v1.ListEditorsRequest]) (*connect.Response[v1.ListEditorsResponse], error) {
	return c.listEditors.CallUnary(ctx, req)
}

// GetEditor calls gitpod.v1.EditorService.GetEditor.
func (c *editorServiceClient) GetEditor(ctx context.Context, req *connect.Request[v1.GetEditorRequest]) (*connect.Response[v1.GetEditorResponse], error) {
	return c.getEditor.CallUnary(ctx, req)
}

// ResolveEditorURL calls gitpod.v1.EditorService.ResolveEditorURL.
func (c *editorServiceClient) ResolveEditorURL(ctx context.Context, req *connect.Request[v1.ResolveEditorURLRequest]) (*connect.Response[v1.ResolveEditorURLResponse], error) {
	return c.resolveEditorURL.CallUnary(ctx, req)
}

// EditorServiceHandler is an implementation of the gitpod.v1.EditorService service.
type EditorServiceHandler interface {
	// ListEditors lists all editors available to the caller
	ListEditors(context.Context, *connect.Request[v1.ListEditorsRequest]) (*connect.Response[v1.ListEditorsResponse], error)
	// GetEditor returns the editor with the given ID
	GetEditor(context.Context, *connect.Request[v1.GetEditorRequest]) (*connect.Response[v1.GetEditorResponse], error)
	// ResolveEditorURL resolves the editor's URL for an environment
	ResolveEditorURL(context.Context, *connect.Request[v1.ResolveEditorURLRequest]) (*connect.Response[v1.ResolveEditorURLResponse], error)
}

// NewEditorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEditorServiceHandler(svc EditorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	editorServiceListEditorsHandler := connect.NewUnaryHandler(
		EditorServiceListEditorsProcedure,
		svc.ListEditors,
		connect.WithSchema(editorServiceListEditorsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	editorServiceGetEditorHandler := connect.NewUnaryHandler(
		EditorServiceGetEditorProcedure,
		svc.GetEditor,
		connect.WithSchema(editorServiceGetEditorMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	editorServiceResolveEditorURLHandler := connect.NewUnaryHandler(
		EditorServiceResolveEditorURLProcedure,
		svc.ResolveEditorURL,
		connect.WithSchema(editorServiceResolveEditorURLMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gitpod.v1.EditorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EditorServiceListEditorsProcedure:
			editorServiceListEditorsHandler.ServeHTTP(w, r)
		case EditorServiceGetEditorProcedure:
			editorServiceGetEditorHandler.ServeHTTP(w, r)
		case EditorServiceResolveEditorURLProcedure:
			editorServiceResolveEditorURLHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEditorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEditorServiceHandler struct{}

func (UnimplementedEditorServiceHandler) ListEditors(context.Context, *connect.Request[v1.ListEditorsRequest]) (*connect.Response[v1.ListEditorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EditorService.ListEditors is not implemented"))
}

func (UnimplementedEditorServiceHandler) GetEditor(context.Context, *connect.Request[v1.GetEditorRequest]) (*connect.Response[v1.GetEditorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EditorService.GetEditor is not implemented"))
}

func (UnimplementedEditorServiceHandler) ResolveEditorURL(context.Context, *connect.Request[v1.ResolveEditorURLRequest]) (*connect.Response[v1.ResolveEditorURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gitpod.v1.EditorService.ResolveEditorURL is not implemented"))
}
