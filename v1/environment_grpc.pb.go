// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gitpod/v1/environment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnvironmentService_GetEnvironment_FullMethodName               = "/gitpod.v1.EnvironmentService/GetEnvironment"
	EnvironmentService_ListEnvironments_FullMethodName             = "/gitpod.v1.EnvironmentService/ListEnvironments"
	EnvironmentService_ListEnvironmentClasses_FullMethodName       = "/gitpod.v1.EnvironmentService/ListEnvironmentClasses"
	EnvironmentService_CreateEnvironment_FullMethodName            = "/gitpod.v1.EnvironmentService/CreateEnvironment"
	EnvironmentService_CreateEnvironmentFromProject_FullMethodName = "/gitpod.v1.EnvironmentService/CreateEnvironmentFromProject"
	EnvironmentService_StartEnvironment_FullMethodName             = "/gitpod.v1.EnvironmentService/StartEnvironment"
	EnvironmentService_StopEnvironment_FullMethodName              = "/gitpod.v1.EnvironmentService/StopEnvironment"
	EnvironmentService_UpdateEnvironment_FullMethodName            = "/gitpod.v1.EnvironmentService/UpdateEnvironment"
	EnvironmentService_DeleteEnvironment_FullMethodName            = "/gitpod.v1.EnvironmentService/DeleteEnvironment"
	EnvironmentService_CreateEnvironmentLogsToken_FullMethodName   = "/gitpod.v1.EnvironmentService/CreateEnvironmentLogsToken"
	EnvironmentService_MarkEnvironmentActive_FullMethodName        = "/gitpod.v1.EnvironmentService/MarkEnvironmentActive"
)

// EnvironmentServiceClient is the client API for EnvironmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentServiceClient interface {
	// GetEnvironment returns a single environment.
	//
	// +return NOT_FOUND User does not have access to an environment with the given
	// ID +return NOT_FOUND Environment does not exist
	GetEnvironment(ctx context.Context, in *GetEnvironmentRequest, opts ...grpc.CallOption) (*GetEnvironmentResponse, error)
	// ListEnvironments returns a list of environments that match the query.
	ListEnvironments(ctx context.Context, in *ListEnvironmentsRequest, opts ...grpc.CallOption) (*ListEnvironmentsResponse, error)
	// ListEnvironmentClasses returns the list of environment classes with runner details a user is able to use based on the
	// query
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ListEnvironmentClasses(ctx context.Context, in *ListEnvironmentClassesRequest, opts ...grpc.CallOption) (*ListEnvironmentClassesResponse, error)
	// CreateEnvironment creates a new environment and starts it.
	CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error)
	// CreateAbdStartEnvironmentFromProject creates a new environment from a project and starts it.
	CreateEnvironmentFromProject(ctx context.Context, in *CreateEnvironmentFromProjectRequest, opts ...grpc.CallOption) (*CreateEnvironmentFromProjectResponse, error)
	// StartEnvironment starts an environment. This function is idempotent, i.e. if
	// the environment is already running no error is returned.
	StartEnvironment(ctx context.Context, in *StartEnvironmentRequest, opts ...grpc.CallOption) (*StartEnvironmentResponse, error)
	// StopEnvironment stops a running environment.
	StopEnvironment(ctx context.Context, in *StopEnvironmentRequest, opts ...grpc.CallOption) (*StopEnvironmentResponse, error)
	// UpdateEnvironment updates the environment partially.
	UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*UpdateEnvironmentResponse, error)
	// DeleteEnvironment deletes an environment.
	// When the environment is running, it will be stopped as well.
	// Deleted environments cannot be started again.
	DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*DeleteEnvironmentResponse, error)
	// CreateEnvironmentLogsToken creates a token that can be used to access the logs of an environment.
	CreateEnvironmentLogsToken(ctx context.Context, in *CreateEnvironmentLogsTokenRequest, opts ...grpc.CallOption) (*CreateEnvironmentLogsTokenResponse, error)
	// MarkEnvironmentActive allows tools to signal activity for an environment.
	MarkEnvironmentActive(ctx context.Context, in *MarkEnvironmentActiveRequest, opts ...grpc.CallOption) (*MarkEnvironmentActiveResponse, error)
}

type environmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentServiceClient(cc grpc.ClientConnInterface) EnvironmentServiceClient {
	return &environmentServiceClient{cc}
}

func (c *environmentServiceClient) GetEnvironment(ctx context.Context, in *GetEnvironmentRequest, opts ...grpc.CallOption) (*GetEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnvironmentResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_GetEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) ListEnvironments(ctx context.Context, in *ListEnvironmentsRequest, opts ...grpc.CallOption) (*ListEnvironmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnvironmentsResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_ListEnvironments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) ListEnvironmentClasses(ctx context.Context, in *ListEnvironmentClassesRequest, opts ...grpc.CallOption) (*ListEnvironmentClassesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnvironmentClassesResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_ListEnvironmentClasses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnvironmentResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_CreateEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) CreateEnvironmentFromProject(ctx context.Context, in *CreateEnvironmentFromProjectRequest, opts ...grpc.CallOption) (*CreateEnvironmentFromProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnvironmentFromProjectResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_CreateEnvironmentFromProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) StartEnvironment(ctx context.Context, in *StartEnvironmentRequest, opts ...grpc.CallOption) (*StartEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartEnvironmentResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_StartEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) StopEnvironment(ctx context.Context, in *StopEnvironmentRequest, opts ...grpc.CallOption) (*StopEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopEnvironmentResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_StopEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*UpdateEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEnvironmentResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_UpdateEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*DeleteEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEnvironmentResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_DeleteEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) CreateEnvironmentLogsToken(ctx context.Context, in *CreateEnvironmentLogsTokenRequest, opts ...grpc.CallOption) (*CreateEnvironmentLogsTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnvironmentLogsTokenResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_CreateEnvironmentLogsToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentServiceClient) MarkEnvironmentActive(ctx context.Context, in *MarkEnvironmentActiveRequest, opts ...grpc.CallOption) (*MarkEnvironmentActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkEnvironmentActiveResponse)
	err := c.cc.Invoke(ctx, EnvironmentService_MarkEnvironmentActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentServiceServer is the server API for EnvironmentService service.
// All implementations must embed UnimplementedEnvironmentServiceServer
// for forward compatibility.
type EnvironmentServiceServer interface {
	// GetEnvironment returns a single environment.
	//
	// +return NOT_FOUND User does not have access to an environment with the given
	// ID +return NOT_FOUND Environment does not exist
	GetEnvironment(context.Context, *GetEnvironmentRequest) (*GetEnvironmentResponse, error)
	// ListEnvironments returns a list of environments that match the query.
	ListEnvironments(context.Context, *ListEnvironmentsRequest) (*ListEnvironmentsResponse, error)
	// ListEnvironmentClasses returns the list of environment classes with runner details a user is able to use based on the
	// query
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ListEnvironmentClasses(context.Context, *ListEnvironmentClassesRequest) (*ListEnvironmentClassesResponse, error)
	// CreateEnvironment creates a new environment and starts it.
	CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*CreateEnvironmentResponse, error)
	// CreateAbdStartEnvironmentFromProject creates a new environment from a project and starts it.
	CreateEnvironmentFromProject(context.Context, *CreateEnvironmentFromProjectRequest) (*CreateEnvironmentFromProjectResponse, error)
	// StartEnvironment starts an environment. This function is idempotent, i.e. if
	// the environment is already running no error is returned.
	StartEnvironment(context.Context, *StartEnvironmentRequest) (*StartEnvironmentResponse, error)
	// StopEnvironment stops a running environment.
	StopEnvironment(context.Context, *StopEnvironmentRequest) (*StopEnvironmentResponse, error)
	// UpdateEnvironment updates the environment partially.
	UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*UpdateEnvironmentResponse, error)
	// DeleteEnvironment deletes an environment.
	// When the environment is running, it will be stopped as well.
	// Deleted environments cannot be started again.
	DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*DeleteEnvironmentResponse, error)
	// CreateEnvironmentLogsToken creates a token that can be used to access the logs of an environment.
	CreateEnvironmentLogsToken(context.Context, *CreateEnvironmentLogsTokenRequest) (*CreateEnvironmentLogsTokenResponse, error)
	// MarkEnvironmentActive allows tools to signal activity for an environment.
	MarkEnvironmentActive(context.Context, *MarkEnvironmentActiveRequest) (*MarkEnvironmentActiveResponse, error)
	mustEmbedUnimplementedEnvironmentServiceServer()
}

// UnimplementedEnvironmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnvironmentServiceServer struct{}

func (UnimplementedEnvironmentServiceServer) GetEnvironment(context.Context, *GetEnvironmentRequest) (*GetEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironment not implemented")
}
func (UnimplementedEnvironmentServiceServer) ListEnvironments(context.Context, *ListEnvironmentsRequest) (*ListEnvironmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnvironments not implemented")
}
func (UnimplementedEnvironmentServiceServer) ListEnvironmentClasses(context.Context, *ListEnvironmentClassesRequest) (*ListEnvironmentClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnvironmentClasses not implemented")
}
func (UnimplementedEnvironmentServiceServer) CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*CreateEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (UnimplementedEnvironmentServiceServer) CreateEnvironmentFromProject(context.Context, *CreateEnvironmentFromProjectRequest) (*CreateEnvironmentFromProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironmentFromProject not implemented")
}
func (UnimplementedEnvironmentServiceServer) StartEnvironment(context.Context, *StartEnvironmentRequest) (*StartEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEnvironment not implemented")
}
func (UnimplementedEnvironmentServiceServer) StopEnvironment(context.Context, *StopEnvironmentRequest) (*StopEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopEnvironment not implemented")
}
func (UnimplementedEnvironmentServiceServer) UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*UpdateEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}
func (UnimplementedEnvironmentServiceServer) DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*DeleteEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironment not implemented")
}
func (UnimplementedEnvironmentServiceServer) CreateEnvironmentLogsToken(context.Context, *CreateEnvironmentLogsTokenRequest) (*CreateEnvironmentLogsTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironmentLogsToken not implemented")
}
func (UnimplementedEnvironmentServiceServer) MarkEnvironmentActive(context.Context, *MarkEnvironmentActiveRequest) (*MarkEnvironmentActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkEnvironmentActive not implemented")
}
func (UnimplementedEnvironmentServiceServer) mustEmbedUnimplementedEnvironmentServiceServer() {}
func (UnimplementedEnvironmentServiceServer) testEmbeddedByValue()                            {}

// UnsafeEnvironmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentServiceServer will
// result in compilation errors.
type UnsafeEnvironmentServiceServer interface {
	mustEmbedUnimplementedEnvironmentServiceServer()
}

func RegisterEnvironmentServiceServer(s grpc.ServiceRegistrar, srv EnvironmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnvironmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnvironmentService_ServiceDesc, srv)
}

func _EnvironmentService_GetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).GetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_GetEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).GetEnvironment(ctx, req.(*GetEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_ListEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvironmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).ListEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_ListEnvironments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).ListEnvironments(ctx, req.(*ListEnvironmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_ListEnvironmentClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvironmentClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).ListEnvironmentClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_ListEnvironmentClasses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).ListEnvironmentClasses(ctx, req.(*ListEnvironmentClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_CreateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).CreateEnvironment(ctx, req.(*CreateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_CreateEnvironmentFromProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentFromProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).CreateEnvironmentFromProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_CreateEnvironmentFromProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).CreateEnvironmentFromProject(ctx, req.(*CreateEnvironmentFromProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_StartEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).StartEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_StartEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).StartEnvironment(ctx, req.(*StartEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_StopEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).StopEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_StopEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).StopEnvironment(ctx, req.(*StopEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_UpdateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).UpdateEnvironment(ctx, req.(*UpdateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_DeleteEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).DeleteEnvironment(ctx, req.(*DeleteEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_CreateEnvironmentLogsToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentLogsTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).CreateEnvironmentLogsToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_CreateEnvironmentLogsToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).CreateEnvironmentLogsToken(ctx, req.(*CreateEnvironmentLogsTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentService_MarkEnvironmentActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkEnvironmentActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServiceServer).MarkEnvironmentActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentService_MarkEnvironmentActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServiceServer).MarkEnvironmentActive(ctx, req.(*MarkEnvironmentActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentService_ServiceDesc is the grpc.ServiceDesc for EnvironmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitpod.v1.EnvironmentService",
	HandlerType: (*EnvironmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnvironment",
			Handler:    _EnvironmentService_GetEnvironment_Handler,
		},
		{
			MethodName: "ListEnvironments",
			Handler:    _EnvironmentService_ListEnvironments_Handler,
		},
		{
			MethodName: "ListEnvironmentClasses",
			Handler:    _EnvironmentService_ListEnvironmentClasses_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _EnvironmentService_CreateEnvironment_Handler,
		},
		{
			MethodName: "CreateEnvironmentFromProject",
			Handler:    _EnvironmentService_CreateEnvironmentFromProject_Handler,
		},
		{
			MethodName: "StartEnvironment",
			Handler:    _EnvironmentService_StartEnvironment_Handler,
		},
		{
			MethodName: "StopEnvironment",
			Handler:    _EnvironmentService_StopEnvironment_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _EnvironmentService_UpdateEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _EnvironmentService_DeleteEnvironment_Handler,
		},
		{
			MethodName: "CreateEnvironmentLogsToken",
			Handler:    _EnvironmentService_CreateEnvironmentLogsToken_Handler,
		},
		{
			MethodName: "MarkEnvironmentActive",
			Handler:    _EnvironmentService_MarkEnvironmentActive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitpod/v1/environment.proto",
}
