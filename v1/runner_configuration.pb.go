// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: gitpod/v1/runner_configuration.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/gitpod-io/flex-go/tools/logfields"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HostAuthenticationTokenSource int32

const (
	HostAuthenticationTokenSource_HOST_AUTHENTICATION_TOKEN_SOURCE_UNSPECIFIED HostAuthenticationTokenSource = 0
	HostAuthenticationTokenSource_HOST_AUTHENTICATION_TOKEN_SOURCE_OAUTH       HostAuthenticationTokenSource = 1
	HostAuthenticationTokenSource_HOST_AUTHENTICATION_TOKEN_SOURCE_PAT         HostAuthenticationTokenSource = 2
)

// Enum value maps for HostAuthenticationTokenSource.
var (
	HostAuthenticationTokenSource_name = map[int32]string{
		0: "HOST_AUTHENTICATION_TOKEN_SOURCE_UNSPECIFIED",
		1: "HOST_AUTHENTICATION_TOKEN_SOURCE_OAUTH",
		2: "HOST_AUTHENTICATION_TOKEN_SOURCE_PAT",
	}
	HostAuthenticationTokenSource_value = map[string]int32{
		"HOST_AUTHENTICATION_TOKEN_SOURCE_UNSPECIFIED": 0,
		"HOST_AUTHENTICATION_TOKEN_SOURCE_OAUTH":       1,
		"HOST_AUTHENTICATION_TOKEN_SOURCE_PAT":         2,
	}
)

func (x HostAuthenticationTokenSource) Enum() *HostAuthenticationTokenSource {
	p := new(HostAuthenticationTokenSource)
	*p = x
	return p
}

func (x HostAuthenticationTokenSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostAuthenticationTokenSource) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_runner_configuration_proto_enumTypes[0].Descriptor()
}

func (HostAuthenticationTokenSource) Type() protoreflect.EnumType {
	return &file_gitpod_v1_runner_configuration_proto_enumTypes[0]
}

func (x HostAuthenticationTokenSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostAuthenticationTokenSource.Descriptor instead.
func (HostAuthenticationTokenSource) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{0}
}

type CreateHostAuthenticationTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId     string                        `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	UserId       string                        `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Host         string                        `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Token        string                        `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Source       HostAuthenticationTokenSource `protobuf:"varint,5,opt,name=source,proto3,enum=gitpod.v1.HostAuthenticationTokenSource" json:"source,omitempty"`
	ExpiresAt    *timestamppb.Timestamp        `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	RefreshToken string                        `protobuf:"bytes,7,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *CreateHostAuthenticationTokenRequest) Reset() {
	*x = CreateHostAuthenticationTokenRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHostAuthenticationTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostAuthenticationTokenRequest) ProtoMessage() {}

func (x *CreateHostAuthenticationTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostAuthenticationTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateHostAuthenticationTokenRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{0}
}

func (x *CreateHostAuthenticationTokenRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *CreateHostAuthenticationTokenRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateHostAuthenticationTokenRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CreateHostAuthenticationTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CreateHostAuthenticationTokenRequest) GetSource() HostAuthenticationTokenSource {
	if x != nil {
		return x.Source
	}
	return HostAuthenticationTokenSource_HOST_AUTHENTICATION_TOKEN_SOURCE_UNSPECIFIED
}

func (x *CreateHostAuthenticationTokenRequest) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *CreateHostAuthenticationTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type CreateHostAuthenticationTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *HostAuthenticationToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateHostAuthenticationTokenResponse) Reset() {
	*x = CreateHostAuthenticationTokenResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHostAuthenticationTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostAuthenticationTokenResponse) ProtoMessage() {}

func (x *CreateHostAuthenticationTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostAuthenticationTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateHostAuthenticationTokenResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{1}
}

func (x *CreateHostAuthenticationTokenResponse) GetToken() *HostAuthenticationToken {
	if x != nil {
		return x.Token
	}
	return nil
}

type HostAuthenticationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RunnerId  string                        `protobuf:"bytes,2,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	UserId    string                        `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Host      string                        `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Source    HostAuthenticationTokenSource `protobuf:"varint,5,opt,name=source,proto3,enum=gitpod.v1.HostAuthenticationTokenSource" json:"source,omitempty"`
	ExpiresAt *timestamppb.Timestamp        `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *HostAuthenticationToken) Reset() {
	*x = HostAuthenticationToken{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostAuthenticationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostAuthenticationToken) ProtoMessage() {}

func (x *HostAuthenticationToken) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostAuthenticationToken.ProtoReflect.Descriptor instead.
func (*HostAuthenticationToken) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{2}
}

func (x *HostAuthenticationToken) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HostAuthenticationToken) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *HostAuthenticationToken) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HostAuthenticationToken) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HostAuthenticationToken) GetSource() HostAuthenticationTokenSource {
	if x != nil {
		return x.Source
	}
	return HostAuthenticationTokenSource_HOST_AUTHENTICATION_TOKEN_SOURCE_UNSPECIFIED
}

func (x *HostAuthenticationToken) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type GetHostAuthenticationTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetHostAuthenticationTokenRequest) Reset() {
	*x = GetHostAuthenticationTokenRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHostAuthenticationTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostAuthenticationTokenRequest) ProtoMessage() {}

func (x *GetHostAuthenticationTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostAuthenticationTokenRequest.ProtoReflect.Descriptor instead.
func (*GetHostAuthenticationTokenRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{3}
}

func (x *GetHostAuthenticationTokenRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetHostAuthenticationTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *HostAuthenticationToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetHostAuthenticationTokenResponse) Reset() {
	*x = GetHostAuthenticationTokenResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHostAuthenticationTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostAuthenticationTokenResponse) ProtoMessage() {}

func (x *GetHostAuthenticationTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostAuthenticationTokenResponse.ProtoReflect.Descriptor instead.
func (*GetHostAuthenticationTokenResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{4}
}

func (x *GetHostAuthenticationTokenResponse) GetToken() *HostAuthenticationToken {
	if x != nil {
		return x.Token
	}
	return nil
}

type ListHostAuthenticationTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationRequest                          `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filter     *ListHostAuthenticationTokensRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListHostAuthenticationTokensRequest) Reset() {
	*x = ListHostAuthenticationTokensRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHostAuthenticationTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostAuthenticationTokensRequest) ProtoMessage() {}

func (x *ListHostAuthenticationTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostAuthenticationTokensRequest.ProtoReflect.Descriptor instead.
func (*ListHostAuthenticationTokensRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{5}
}

func (x *ListHostAuthenticationTokensRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListHostAuthenticationTokensRequest) GetFilter() *ListHostAuthenticationTokensRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListHostAuthenticationTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationResponse        `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Tokens     []*HostAuthenticationToken `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *ListHostAuthenticationTokensResponse) Reset() {
	*x = ListHostAuthenticationTokensResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHostAuthenticationTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostAuthenticationTokensResponse) ProtoMessage() {}

func (x *ListHostAuthenticationTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostAuthenticationTokensResponse.ProtoReflect.Descriptor instead.
func (*ListHostAuthenticationTokensResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{6}
}

func (x *ListHostAuthenticationTokensResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListHostAuthenticationTokensResponse) GetTokens() []*HostAuthenticationToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type UpdateHostAuthenticationTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Token        *string                `protobuf:"bytes,5,opt,name=token,proto3,oneof" json:"token,omitempty"`
	ExpiresAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
	RefreshToken *string                `protobuf:"bytes,7,opt,name=refresh_token,json=refreshToken,proto3,oneof" json:"refresh_token,omitempty"`
}

func (x *UpdateHostAuthenticationTokenRequest) Reset() {
	*x = UpdateHostAuthenticationTokenRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHostAuthenticationTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostAuthenticationTokenRequest) ProtoMessage() {}

func (x *UpdateHostAuthenticationTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostAuthenticationTokenRequest.ProtoReflect.Descriptor instead.
func (*UpdateHostAuthenticationTokenRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateHostAuthenticationTokenRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateHostAuthenticationTokenRequest) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *UpdateHostAuthenticationTokenRequest) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *UpdateHostAuthenticationTokenRequest) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

type UpdateHostAuthenticationTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateHostAuthenticationTokenResponse) Reset() {
	*x = UpdateHostAuthenticationTokenResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHostAuthenticationTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostAuthenticationTokenResponse) ProtoMessage() {}

func (x *UpdateHostAuthenticationTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostAuthenticationTokenResponse.ProtoReflect.Descriptor instead.
func (*UpdateHostAuthenticationTokenResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{8}
}

type DeleteHostAuthenticationTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteHostAuthenticationTokenRequest) Reset() {
	*x = DeleteHostAuthenticationTokenRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHostAuthenticationTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostAuthenticationTokenRequest) ProtoMessage() {}

func (x *DeleteHostAuthenticationTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostAuthenticationTokenRequest.ProtoReflect.Descriptor instead.
func (*DeleteHostAuthenticationTokenRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteHostAuthenticationTokenRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteHostAuthenticationTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteHostAuthenticationTokenResponse) Reset() {
	*x = DeleteHostAuthenticationTokenResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHostAuthenticationTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHostAuthenticationTokenResponse) ProtoMessage() {}

func (x *DeleteHostAuthenticationTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHostAuthenticationTokenResponse.ProtoReflect.Descriptor instead.
func (*DeleteHostAuthenticationTokenResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{10}
}

type FieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FieldValue) Reset() {
	*x = FieldValue{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValue) ProtoMessage() {}

func (x *FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValue.ProtoReflect.Descriptor instead.
func (*FieldValue) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{11}
}

func (x *FieldValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FieldValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type FieldValueUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the field key to update. If the field does not exist, it will be created.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value is the new value for the field. If value is empty, the field will be removed.
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *FieldValueUpdate) Reset() {
	*x = FieldValueUpdate{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldValueUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValueUpdate) ProtoMessage() {}

func (x *FieldValueUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValueUpdate.ProtoReflect.Descriptor instead.
func (*FieldValueUpdate) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{12}
}

func (x *FieldValueUpdate) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FieldValueUpdate) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type GetRunnerConfigurationSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
}

func (x *GetRunnerConfigurationSchemaRequest) Reset() {
	*x = GetRunnerConfigurationSchemaRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunnerConfigurationSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunnerConfigurationSchemaRequest) ProtoMessage() {}

func (x *GetRunnerConfigurationSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunnerConfigurationSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetRunnerConfigurationSchemaRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{13}
}

func (x *GetRunnerConfigurationSchemaRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

type GetRunnerConfigurationSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema *RunnerConfigurationSchema `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *GetRunnerConfigurationSchemaResponse) Reset() {
	*x = GetRunnerConfigurationSchemaResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunnerConfigurationSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunnerConfigurationSchemaResponse) ProtoMessage() {}

func (x *GetRunnerConfigurationSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunnerConfigurationSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetRunnerConfigurationSchemaResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{14}
}

func (x *GetRunnerConfigurationSchemaResponse) GetSchema() *RunnerConfigurationSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type CreateSCMIntegrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// scm_id references the scm_id in the runner's configuration schema that this integration is for
	ScmId string `protobuf:"bytes,2,opt,name=scm_id,json=scmId,proto3" json:"scm_id,omitempty"`
	Host  string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// oauth_client_id is the OAuth app's client ID, if OAuth is configured.
	// If configured, oauth_plaintext_client_secret must also be set.
	OauthClientId *string `protobuf:"bytes,4,opt,name=oauth_client_id,json=oauthClientId,proto3,oneof" json:"oauth_client_id,omitempty"`
	// oauth_plaintext_client_secret is the OAuth app's client secret in clear text.
	// This will first be encrypted with the runner's public key before being stored.
	OauthPlaintextClientSecret *string `protobuf:"bytes,5,opt,name=oauth_plaintext_client_secret,json=oauthPlaintextClientSecret,proto3,oneof" json:"oauth_plaintext_client_secret,omitempty"`
	Pat                        bool    `protobuf:"varint,6,opt,name=pat,proto3" json:"pat,omitempty"`
}

func (x *CreateSCMIntegrationRequest) Reset() {
	*x = CreateSCMIntegrationRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSCMIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSCMIntegrationRequest) ProtoMessage() {}

func (x *CreateSCMIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSCMIntegrationRequest.ProtoReflect.Descriptor instead.
func (*CreateSCMIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{15}
}

func (x *CreateSCMIntegrationRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *CreateSCMIntegrationRequest) GetScmId() string {
	if x != nil {
		return x.ScmId
	}
	return ""
}

func (x *CreateSCMIntegrationRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CreateSCMIntegrationRequest) GetOauthClientId() string {
	if x != nil && x.OauthClientId != nil {
		return *x.OauthClientId
	}
	return ""
}

func (x *CreateSCMIntegrationRequest) GetOauthPlaintextClientSecret() string {
	if x != nil && x.OauthPlaintextClientSecret != nil {
		return *x.OauthPlaintextClientSecret
	}
	return ""
}

func (x *CreateSCMIntegrationRequest) GetPat() bool {
	if x != nil {
		return x.Pat
	}
	return false
}

type CreateSCMIntegrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is a uniquely generated identifier for the SCM integration
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateSCMIntegrationResponse) Reset() {
	*x = CreateSCMIntegrationResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSCMIntegrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSCMIntegrationResponse) ProtoMessage() {}

func (x *CreateSCMIntegrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSCMIntegrationResponse.ProtoReflect.Descriptor instead.
func (*CreateSCMIntegrationResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{16}
}

func (x *CreateSCMIntegrationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SCMIntegrationOAuthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// client_id is the OAuth app's client ID in clear text.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// encrypted_client_secret is the OAuth app's secret encrypted with the runner's public key.
	EncryptedClientSecret []byte `protobuf:"bytes,2,opt,name=encrypted_client_secret,json=encryptedClientSecret,proto3" json:"encrypted_client_secret,omitempty"`
}

func (x *SCMIntegrationOAuthConfig) Reset() {
	*x = SCMIntegrationOAuthConfig{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCMIntegrationOAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCMIntegrationOAuthConfig) ProtoMessage() {}

func (x *SCMIntegrationOAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCMIntegrationOAuthConfig.ProtoReflect.Descriptor instead.
func (*SCMIntegrationOAuthConfig) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{17}
}

func (x *SCMIntegrationOAuthConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SCMIntegrationOAuthConfig) GetEncryptedClientSecret() []byte {
	if x != nil {
		return x.EncryptedClientSecret
	}
	return nil
}

type SCMIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier of the SCM integration
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// scm_id references the scm_id in the runner's configuration schema that this integration is for
	ScmId    string                     `protobuf:"bytes,2,opt,name=scm_id,json=scmId,proto3" json:"scm_id,omitempty"`
	Host     string                     `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Oauth    *SCMIntegrationOAuthConfig `protobuf:"bytes,4,opt,name=oauth,proto3,oneof" json:"oauth,omitempty"`
	Pat      bool                       `protobuf:"varint,5,opt,name=pat,proto3" json:"pat,omitempty"`
	RunnerId string                     `protobuf:"bytes,6,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
}

func (x *SCMIntegration) Reset() {
	*x = SCMIntegration{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCMIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCMIntegration) ProtoMessage() {}

func (x *SCMIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCMIntegration.ProtoReflect.Descriptor instead.
func (*SCMIntegration) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{18}
}

func (x *SCMIntegration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SCMIntegration) GetScmId() string {
	if x != nil {
		return x.ScmId
	}
	return ""
}

func (x *SCMIntegration) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SCMIntegration) GetOauth() *SCMIntegrationOAuthConfig {
	if x != nil {
		return x.Oauth
	}
	return nil
}

func (x *SCMIntegration) GetPat() bool {
	if x != nil {
		return x.Pat
	}
	return false
}

func (x *SCMIntegration) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

type GetSCMIntegrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSCMIntegrationRequest) Reset() {
	*x = GetSCMIntegrationRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSCMIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSCMIntegrationRequest) ProtoMessage() {}

func (x *GetSCMIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSCMIntegrationRequest.ProtoReflect.Descriptor instead.
func (*GetSCMIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{19}
}

func (x *GetSCMIntegrationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSCMIntegrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integration *SCMIntegration `protobuf:"bytes,1,opt,name=integration,proto3" json:"integration,omitempty"`
}

func (x *GetSCMIntegrationResponse) Reset() {
	*x = GetSCMIntegrationResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSCMIntegrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSCMIntegrationResponse) ProtoMessage() {}

func (x *GetSCMIntegrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSCMIntegrationResponse.ProtoReflect.Descriptor instead.
func (*GetSCMIntegrationResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{20}
}

func (x *GetSCMIntegrationResponse) GetIntegration() *SCMIntegration {
	if x != nil {
		return x.Integration
	}
	return nil
}

type ListSCMIntegrationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing scm integrations
	Pagination *PaginationRequest                 `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filter     *ListSCMIntegrationsRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListSCMIntegrationsRequest) Reset() {
	*x = ListSCMIntegrationsRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSCMIntegrationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSCMIntegrationsRequest) ProtoMessage() {}

func (x *ListSCMIntegrationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSCMIntegrationsRequest.ProtoReflect.Descriptor instead.
func (*ListSCMIntegrationsRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{21}
}

func (x *ListSCMIntegrationsRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListSCMIntegrationsRequest) GetFilter() *ListSCMIntegrationsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListSCMIntegrationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing scm integrations
	Pagination   *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Integrations []*SCMIntegration   `protobuf:"bytes,2,rep,name=integrations,proto3" json:"integrations,omitempty"`
}

func (x *ListSCMIntegrationsResponse) Reset() {
	*x = ListSCMIntegrationsResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSCMIntegrationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSCMIntegrationsResponse) ProtoMessage() {}

func (x *ListSCMIntegrationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSCMIntegrationsResponse.ProtoReflect.Descriptor instead.
func (*ListSCMIntegrationsResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{22}
}

func (x *ListSCMIntegrationsResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListSCMIntegrationsResponse) GetIntegrations() []*SCMIntegration {
	if x != nil {
		return x.Integrations
	}
	return nil
}

type UpdateSCMIntegrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// oauth_client_id can be set to update the OAuth app's client ID.
	// If an empty string is set, the OAuth configuration will be removed (regardless
	// of whether a client secret is set), and any existing Host Authentication Tokens for the
	// SCM integration's runner and host that were created using the OAuth app will be deleted.
	// This might lead to users being unable to access their repositories until they re-authenticate.
	OauthClientId *string `protobuf:"bytes,2,opt,name=oauth_client_id,json=oauthClientId,proto3,oneof" json:"oauth_client_id,omitempty"`
	// oauth_plaintext_client_secret can be set to update the OAuth app's client secret.
	// The cleartext secret will be encrypted with the runner's public key before being stored.
	OauthPlaintextClientSecret *string `protobuf:"bytes,3,opt,name=oauth_plaintext_client_secret,json=oauthPlaintextClientSecret,proto3,oneof" json:"oauth_plaintext_client_secret,omitempty"`
	// pat can be set to enable or disable Personal Access Tokens support.
	// When disabling PATs, any existing Host Authentication Tokens for the SCM integration's
	// runner and host that were created using a PAT will be deleted. This might lead to users
	// being unable to access their repositories until they re-authenticate.
	Pat *bool `protobuf:"varint,4,opt,name=pat,proto3,oneof" json:"pat,omitempty"`
}

func (x *UpdateSCMIntegrationRequest) Reset() {
	*x = UpdateSCMIntegrationRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSCMIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSCMIntegrationRequest) ProtoMessage() {}

func (x *UpdateSCMIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSCMIntegrationRequest.ProtoReflect.Descriptor instead.
func (*UpdateSCMIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateSCMIntegrationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSCMIntegrationRequest) GetOauthClientId() string {
	if x != nil && x.OauthClientId != nil {
		return *x.OauthClientId
	}
	return ""
}

func (x *UpdateSCMIntegrationRequest) GetOauthPlaintextClientSecret() string {
	if x != nil && x.OauthPlaintextClientSecret != nil {
		return *x.OauthPlaintextClientSecret
	}
	return ""
}

func (x *UpdateSCMIntegrationRequest) GetPat() bool {
	if x != nil && x.Pat != nil {
		return *x.Pat
	}
	return false
}

type UpdateSCMIntegrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSCMIntegrationResponse) Reset() {
	*x = UpdateSCMIntegrationResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSCMIntegrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSCMIntegrationResponse) ProtoMessage() {}

func (x *UpdateSCMIntegrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSCMIntegrationResponse.ProtoReflect.Descriptor instead.
func (*UpdateSCMIntegrationResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{24}
}

type DeleteSCMIntegrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSCMIntegrationRequest) Reset() {
	*x = DeleteSCMIntegrationRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSCMIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSCMIntegrationRequest) ProtoMessage() {}

func (x *DeleteSCMIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSCMIntegrationRequest.ProtoReflect.Descriptor instead.
func (*DeleteSCMIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteSCMIntegrationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSCMIntegrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSCMIntegrationResponse) Reset() {
	*x = DeleteSCMIntegrationResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSCMIntegrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSCMIntegrationResponse) ProtoMessage() {}

func (x *DeleteSCMIntegrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSCMIntegrationResponse.ProtoReflect.Descriptor instead.
func (*DeleteSCMIntegrationResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{26}
}

type EnvironmentClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier of the environment class
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// display_name is the human readable name of the environment class
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// description is a human readable description of the environment class
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// configuration describes the configuration of the environment class
	Configuration []*FieldValue `protobuf:"bytes,4,rep,name=configuration,proto3" json:"configuration,omitempty"`
	// runner_id is the unique identifier of the runner the environment class belongs to
	RunnerId string `protobuf:"bytes,5,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// enabled indicates whether the environment class can be used to create
	// new environments.
	Enabled bool `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *EnvironmentClass) Reset() {
	*x = EnvironmentClass{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentClass) ProtoMessage() {}

func (x *EnvironmentClass) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentClass.ProtoReflect.Descriptor instead.
func (*EnvironmentClass) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{27}
}

func (x *EnvironmentClass) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnvironmentClass) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *EnvironmentClass) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EnvironmentClass) GetConfiguration() []*FieldValue {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *EnvironmentClass) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *EnvironmentClass) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type CreateEnvironmentClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId      string        `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	DisplayName   string        `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description   string        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Configuration []*FieldValue `protobuf:"bytes,4,rep,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *CreateEnvironmentClassRequest) Reset() {
	*x = CreateEnvironmentClassRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEnvironmentClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnvironmentClassRequest) ProtoMessage() {}

func (x *CreateEnvironmentClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnvironmentClassRequest.ProtoReflect.Descriptor instead.
func (*CreateEnvironmentClassRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{28}
}

func (x *CreateEnvironmentClassRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *CreateEnvironmentClassRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateEnvironmentClassRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateEnvironmentClassRequest) GetConfiguration() []*FieldValue {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type CreateEnvironmentClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateEnvironmentClassResponse) Reset() {
	*x = CreateEnvironmentClassResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEnvironmentClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnvironmentClassResponse) ProtoMessage() {}

func (x *CreateEnvironmentClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnvironmentClassResponse.ProtoReflect.Descriptor instead.
func (*CreateEnvironmentClassResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{29}
}

func (x *CreateEnvironmentClassResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetEnvironmentClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentClassId string `protobuf:"bytes,2,opt,name=environment_class_id,json=environmentClassId,proto3" json:"environment_class_id,omitempty"`
}

func (x *GetEnvironmentClassRequest) Reset() {
	*x = GetEnvironmentClassRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnvironmentClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvironmentClassRequest) ProtoMessage() {}

func (x *GetEnvironmentClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvironmentClassRequest.ProtoReflect.Descriptor instead.
func (*GetEnvironmentClassRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{30}
}

func (x *GetEnvironmentClassRequest) GetEnvironmentClassId() string {
	if x != nil {
		return x.EnvironmentClassId
	}
	return ""
}

type GetEnvironmentClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentClass *EnvironmentClass `protobuf:"bytes,1,opt,name=environment_class,json=environmentClass,proto3" json:"environment_class,omitempty"`
}

func (x *GetEnvironmentClassResponse) Reset() {
	*x = GetEnvironmentClassResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnvironmentClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvironmentClassResponse) ProtoMessage() {}

func (x *GetEnvironmentClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvironmentClassResponse.ProtoReflect.Descriptor instead.
func (*GetEnvironmentClassResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{31}
}

func (x *GetEnvironmentClassResponse) GetEnvironmentClass() *EnvironmentClass {
	if x != nil {
		return x.EnvironmentClass
	}
	return nil
}

type ListEnvironmentClassesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing environment classes
	Pagination *PaginationRequest                    `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filter     *ListEnvironmentClassesRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListEnvironmentClassesRequest) Reset() {
	*x = ListEnvironmentClassesRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEnvironmentClassesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnvironmentClassesRequest) ProtoMessage() {}

func (x *ListEnvironmentClassesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnvironmentClassesRequest.ProtoReflect.Descriptor instead.
func (*ListEnvironmentClassesRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{32}
}

func (x *ListEnvironmentClassesRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListEnvironmentClassesRequest) GetFilter() *ListEnvironmentClassesRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListEnvironmentClassesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing environment classes
	Pagination         *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	EnvironmentClasses []*EnvironmentClass `protobuf:"bytes,2,rep,name=environment_classes,json=environmentClasses,proto3" json:"environment_classes,omitempty"`
}

func (x *ListEnvironmentClassesResponse) Reset() {
	*x = ListEnvironmentClassesResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEnvironmentClassesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnvironmentClassesResponse) ProtoMessage() {}

func (x *ListEnvironmentClassesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnvironmentClassesResponse.ProtoReflect.Descriptor instead.
func (*ListEnvironmentClassesResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{33}
}

func (x *ListEnvironmentClassesResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListEnvironmentClassesResponse) GetEnvironmentClasses() []*EnvironmentClass {
	if x != nil {
		return x.EnvironmentClasses
	}
	return nil
}

type UpdateEnvironmentClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentClassId string  `protobuf:"bytes,1,opt,name=environment_class_id,json=environmentClassId,proto3" json:"environment_class_id,omitempty"`
	DisplayName        *string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	Description        *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Enabled            *bool   `protobuf:"varint,4,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (x *UpdateEnvironmentClassRequest) Reset() {
	*x = UpdateEnvironmentClassRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentClassRequest) ProtoMessage() {}

func (x *UpdateEnvironmentClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentClassRequest.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentClassRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateEnvironmentClassRequest) GetEnvironmentClassId() string {
	if x != nil {
		return x.EnvironmentClassId
	}
	return ""
}

func (x *UpdateEnvironmentClassRequest) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *UpdateEnvironmentClassRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateEnvironmentClassRequest) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type UpdateEnvironmentClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateEnvironmentClassResponse) Reset() {
	*x = UpdateEnvironmentClassResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentClassResponse) ProtoMessage() {}

func (x *UpdateEnvironmentClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentClassResponse.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentClassResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{35}
}

type ValidateRunnerConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// Types that are assignable to Config:
	//
	//	*ValidateRunnerConfigurationRequest_EnvironmentClass
	//	*ValidateRunnerConfigurationRequest_ScmIntegration
	Config isValidateRunnerConfigurationRequest_Config `protobuf_oneof:"config"`
}

func (x *ValidateRunnerConfigurationRequest) Reset() {
	*x = ValidateRunnerConfigurationRequest{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateRunnerConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRunnerConfigurationRequest) ProtoMessage() {}

func (x *ValidateRunnerConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRunnerConfigurationRequest.ProtoReflect.Descriptor instead.
func (*ValidateRunnerConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{36}
}

func (x *ValidateRunnerConfigurationRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (m *ValidateRunnerConfigurationRequest) GetConfig() isValidateRunnerConfigurationRequest_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ValidateRunnerConfigurationRequest) GetEnvironmentClass() *EnvironmentClass {
	if x, ok := x.GetConfig().(*ValidateRunnerConfigurationRequest_EnvironmentClass); ok {
		return x.EnvironmentClass
	}
	return nil
}

func (x *ValidateRunnerConfigurationRequest) GetScmIntegration() *ValidateRunnerConfigurationRequest_ValidateSCMIntegration {
	if x, ok := x.GetConfig().(*ValidateRunnerConfigurationRequest_ScmIntegration); ok {
		return x.ScmIntegration
	}
	return nil
}

type isValidateRunnerConfigurationRequest_Config interface {
	isValidateRunnerConfigurationRequest_Config()
}

type ValidateRunnerConfigurationRequest_EnvironmentClass struct {
	EnvironmentClass *EnvironmentClass `protobuf:"bytes,2,opt,name=environment_class,json=environmentClass,proto3,oneof"`
}

type ValidateRunnerConfigurationRequest_ScmIntegration struct {
	ScmIntegration *ValidateRunnerConfigurationRequest_ValidateSCMIntegration `protobuf:"bytes,3,opt,name=scm_integration,json=scmIntegration,proto3,oneof"`
}

func (*ValidateRunnerConfigurationRequest_EnvironmentClass) isValidateRunnerConfigurationRequest_Config() {
}

func (*ValidateRunnerConfigurationRequest_ScmIntegration) isValidateRunnerConfigurationRequest_Config() {
}

type FieldValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FieldValidationError) Reset() {
	*x = FieldValidationError{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValidationError) ProtoMessage() {}

func (x *FieldValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValidationError.ProtoReflect.Descriptor instead.
func (*FieldValidationError) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{37}
}

func (x *FieldValidationError) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FieldValidationError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type EnvironmentClassValidationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid               bool                    `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	DisplayNameError    *string                 `protobuf:"bytes,2,opt,name=display_name_error,json=displayNameError,proto3,oneof" json:"display_name_error,omitempty"`
	DescriptionError    *string                 `protobuf:"bytes,3,opt,name=description_error,json=descriptionError,proto3,oneof" json:"description_error,omitempty"`
	ConfigurationErrors []*FieldValidationError `protobuf:"bytes,4,rep,name=configuration_errors,json=configurationErrors,proto3" json:"configuration_errors,omitempty"`
}

func (x *EnvironmentClassValidationResult) Reset() {
	*x = EnvironmentClassValidationResult{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentClassValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentClassValidationResult) ProtoMessage() {}

func (x *EnvironmentClassValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentClassValidationResult.ProtoReflect.Descriptor instead.
func (*EnvironmentClassValidationResult) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{38}
}

func (x *EnvironmentClassValidationResult) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *EnvironmentClassValidationResult) GetDisplayNameError() string {
	if x != nil && x.DisplayNameError != nil {
		return *x.DisplayNameError
	}
	return ""
}

func (x *EnvironmentClassValidationResult) GetDescriptionError() string {
	if x != nil && x.DescriptionError != nil {
		return *x.DescriptionError
	}
	return ""
}

func (x *EnvironmentClassValidationResult) GetConfigurationErrors() []*FieldValidationError {
	if x != nil {
		return x.ConfigurationErrors
	}
	return nil
}

type SCMIntegrationValidationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid      bool    `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ScmIdError *string `protobuf:"bytes,2,opt,name=scm_id_error,json=scmIdError,proto3,oneof" json:"scm_id_error,omitempty"`
	HostError  *string `protobuf:"bytes,3,opt,name=host_error,json=hostError,proto3,oneof" json:"host_error,omitempty"`
	OauthError *string `protobuf:"bytes,4,opt,name=oauth_error,json=oauthError,proto3,oneof" json:"oauth_error,omitempty"`
	PatError   *string `protobuf:"bytes,5,opt,name=pat_error,json=patError,proto3,oneof" json:"pat_error,omitempty"`
}

func (x *SCMIntegrationValidationResult) Reset() {
	*x = SCMIntegrationValidationResult{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCMIntegrationValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCMIntegrationValidationResult) ProtoMessage() {}

func (x *SCMIntegrationValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCMIntegrationValidationResult.ProtoReflect.Descriptor instead.
func (*SCMIntegrationValidationResult) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{39}
}

func (x *SCMIntegrationValidationResult) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *SCMIntegrationValidationResult) GetScmIdError() string {
	if x != nil && x.ScmIdError != nil {
		return *x.ScmIdError
	}
	return ""
}

func (x *SCMIntegrationValidationResult) GetHostError() string {
	if x != nil && x.HostError != nil {
		return *x.HostError
	}
	return ""
}

func (x *SCMIntegrationValidationResult) GetOauthError() string {
	if x != nil && x.OauthError != nil {
		return *x.OauthError
	}
	return ""
}

func (x *SCMIntegrationValidationResult) GetPatError() string {
	if x != nil && x.PatError != nil {
		return *x.PatError
	}
	return ""
}

type ValidateRunnerConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*ValidateRunnerConfigurationResponse_EnvironmentClass
	//	*ValidateRunnerConfigurationResponse_ScmIntegration
	Result isValidateRunnerConfigurationResponse_Result `protobuf_oneof:"result"`
}

func (x *ValidateRunnerConfigurationResponse) Reset() {
	*x = ValidateRunnerConfigurationResponse{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateRunnerConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRunnerConfigurationResponse) ProtoMessage() {}

func (x *ValidateRunnerConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRunnerConfigurationResponse.ProtoReflect.Descriptor instead.
func (*ValidateRunnerConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{40}
}

func (m *ValidateRunnerConfigurationResponse) GetResult() isValidateRunnerConfigurationResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ValidateRunnerConfigurationResponse) GetEnvironmentClass() *EnvironmentClassValidationResult {
	if x, ok := x.GetResult().(*ValidateRunnerConfigurationResponse_EnvironmentClass); ok {
		return x.EnvironmentClass
	}
	return nil
}

func (x *ValidateRunnerConfigurationResponse) GetScmIntegration() *SCMIntegrationValidationResult {
	if x, ok := x.GetResult().(*ValidateRunnerConfigurationResponse_ScmIntegration); ok {
		return x.ScmIntegration
	}
	return nil
}

type isValidateRunnerConfigurationResponse_Result interface {
	isValidateRunnerConfigurationResponse_Result()
}

type ValidateRunnerConfigurationResponse_EnvironmentClass struct {
	EnvironmentClass *EnvironmentClassValidationResult `protobuf:"bytes,1,opt,name=environment_class,json=environmentClass,proto3,oneof"`
}

type ValidateRunnerConfigurationResponse_ScmIntegration struct {
	ScmIntegration *SCMIntegrationValidationResult `protobuf:"bytes,2,opt,name=scm_integration,json=scmIntegration,proto3,oneof"`
}

func (*ValidateRunnerConfigurationResponse_EnvironmentClass) isValidateRunnerConfigurationResponse_Result() {
}

func (*ValidateRunnerConfigurationResponse_ScmIntegration) isValidateRunnerConfigurationResponse_Result() {
}

type RunnerConfigurationSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schema version
	Version            string                                       `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	RunnerConfig       []*RunnerConfigurationSchema_Field           `protobuf:"bytes,2,rep,name=runner_config,json=runnerConfig,proto3" json:"runner_config,omitempty"`
	EnvironmentClasses []*RunnerConfigurationSchema_Field           `protobuf:"bytes,3,rep,name=environment_classes,json=environmentClasses,proto3" json:"environment_classes,omitempty"`
	Scm                []*RunnerConfigurationSchema_SCMConfigSchema `protobuf:"bytes,4,rep,name=scm,proto3" json:"scm,omitempty"`
}

func (x *RunnerConfigurationSchema) Reset() {
	*x = RunnerConfigurationSchema{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerConfigurationSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigurationSchema) ProtoMessage() {}

func (x *RunnerConfigurationSchema) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigurationSchema.ProtoReflect.Descriptor instead.
func (*RunnerConfigurationSchema) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{41}
}

func (x *RunnerConfigurationSchema) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RunnerConfigurationSchema) GetRunnerConfig() []*RunnerConfigurationSchema_Field {
	if x != nil {
		return x.RunnerConfig
	}
	return nil
}

func (x *RunnerConfigurationSchema) GetEnvironmentClasses() []*RunnerConfigurationSchema_Field {
	if x != nil {
		return x.EnvironmentClasses
	}
	return nil
}

func (x *RunnerConfigurationSchema) GetScm() []*RunnerConfigurationSchema_SCMConfigSchema {
	if x != nil {
		return x.Scm
	}
	return nil
}

type ListHostAuthenticationTokensRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId *string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3,oneof" json:"runner_id,omitempty"`
	UserId   *string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
}

func (x *ListHostAuthenticationTokensRequest_Filter) Reset() {
	*x = ListHostAuthenticationTokensRequest_Filter{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHostAuthenticationTokensRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostAuthenticationTokensRequest_Filter) ProtoMessage() {}

func (x *ListHostAuthenticationTokensRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostAuthenticationTokensRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListHostAuthenticationTokensRequest_Filter) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListHostAuthenticationTokensRequest_Filter) GetRunnerId() string {
	if x != nil && x.RunnerId != nil {
		return *x.RunnerId
	}
	return ""
}

func (x *ListHostAuthenticationTokensRequest_Filter) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type ListSCMIntegrationsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// runner_ids filters the response to only SCM integrations of these Runner IDs
	RunnerIds []string `protobuf:"bytes,1,rep,name=runner_ids,json=runnerIds,proto3" json:"runner_ids,omitempty"`
}

func (x *ListSCMIntegrationsRequest_Filter) Reset() {
	*x = ListSCMIntegrationsRequest_Filter{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSCMIntegrationsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSCMIntegrationsRequest_Filter) ProtoMessage() {}

func (x *ListSCMIntegrationsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSCMIntegrationsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListSCMIntegrationsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{21, 0}
}

func (x *ListSCMIntegrationsRequest_Filter) GetRunnerIds() []string {
	if x != nil {
		return x.RunnerIds
	}
	return nil
}

type ListEnvironmentClassesRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// runner_ids filters the response to only EnvironmentClasses of these Runner IDs
	RunnerIds []string `protobuf:"bytes,1,rep,name=runner_ids,json=runnerIds,proto3" json:"runner_ids,omitempty"`
	// enabled filters the response to only enabled or disabled environment classes.
	// If not set, all environment classes are returned.
	Enabled *bool `protobuf:"varint,2,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (x *ListEnvironmentClassesRequest_Filter) Reset() {
	*x = ListEnvironmentClassesRequest_Filter{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEnvironmentClassesRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnvironmentClassesRequest_Filter) ProtoMessage() {}

func (x *ListEnvironmentClassesRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnvironmentClassesRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListEnvironmentClassesRequest_Filter) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{32, 0}
}

func (x *ListEnvironmentClassesRequest_Filter) GetRunnerIds() []string {
	if x != nil {
		return x.RunnerIds
	}
	return nil
}

func (x *ListEnvironmentClassesRequest_Filter) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type ValidateRunnerConfigurationRequest_ValidateSCMIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier of the SCM integration
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// scm_id references the scm_id in the runner's configuration schema that this integration is for
	ScmId string `protobuf:"bytes,2,opt,name=scm_id,json=scmId,proto3" json:"scm_id,omitempty"`
	Host  string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// oauth_client_id is the OAuth app's client ID, if OAuth is configured.
	// If configured, oauth_client_secret must also be set.
	OauthClientId *string `protobuf:"bytes,4,opt,name=oauth_client_id,json=oauthClientId,proto3,oneof" json:"oauth_client_id,omitempty"`
	// Types that are assignable to OauthClientSecret:
	//
	//	*ValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthPlaintextClientSecret
	//	*ValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthEncryptedClientSecret
	OauthClientSecret isValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthClientSecret `protobuf_oneof:"oauth_client_secret"`
	Pat               bool                                                                          `protobuf:"varint,7,opt,name=pat,proto3" json:"pat,omitempty"`
}

func (x *ValidateRunnerConfigurationRequest_ValidateSCMIntegration) Reset() {
	*x = ValidateRunnerConfigurationRequest_ValidateSCMIntegration{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateRunnerConfigurationRequest_ValidateSCMIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRunnerConfigurationRequest_ValidateSCMIntegration) ProtoMessage() {}

func (x *ValidateRunnerConfigurationRequest_ValidateSCMIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRunnerConfigurationRequest_ValidateSCMIntegration.ProtoReflect.Descriptor instead.
func (*ValidateRunnerConfigurationRequest_ValidateSCMIntegration) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{36, 0}
}

func (x *ValidateRunnerConfigurationRequest_ValidateSCMIntegration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ValidateRunnerConfigurationRequest_ValidateSCMIntegration) GetScmId() string {
	if x != nil {
		return x.ScmId
	}
	return ""
}

func (x *ValidateRunnerConfigurationRequest_ValidateSCMIntegration) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ValidateRunnerConfigurationRequest_ValidateSCMIntegration) GetOauthClientId() string {
	if x != nil && x.OauthClientId != nil {
		return *x.OauthClientId
	}
	return ""
}

func (m *ValidateRunnerConfigurationRequest_ValidateSCMIntegration) GetOauthClientSecret() isValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthClientSecret {
	if m != nil {
		return m.OauthClientSecret
	}
	return nil
}

func (x *ValidateRunnerConfigurationRequest_ValidateSCMIntegration) GetOauthPlaintextClientSecret() string {
	if x, ok := x.GetOauthClientSecret().(*ValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthPlaintextClientSecret); ok {
		return x.OauthPlaintextClientSecret
	}
	return ""
}

func (x *ValidateRunnerConfigurationRequest_ValidateSCMIntegration) GetOauthEncryptedClientSecret() []byte {
	if x, ok := x.GetOauthClientSecret().(*ValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthEncryptedClientSecret); ok {
		return x.OauthEncryptedClientSecret
	}
	return nil
}

func (x *ValidateRunnerConfigurationRequest_ValidateSCMIntegration) GetPat() bool {
	if x != nil {
		return x.Pat
	}
	return false
}

type isValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthClientSecret interface {
	isValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthClientSecret()
}

type ValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthPlaintextClientSecret struct {
	// oauth_plaintext_client_secret is the OAuth app's client secret in clear text, if OAuth is configured.
	// This can be set to validate any new client secret before it is encrypted and stored. This value will
	// not be stored and get encrypted with the runner's public key before passing it to the runner.
	OauthPlaintextClientSecret string `protobuf:"bytes,5,opt,name=oauth_plaintext_client_secret,json=oauthPlaintextClientSecret,proto3,oneof"`
}

type ValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthEncryptedClientSecret struct {
	// oauth_encrypted_client_secret is the OAuth app's client secret encrypted with the runner's public key,
	// if OAuth is configured.
	// This can be used to e.g. validate an already encrypted client secret of an existing SCM integration.
	OauthEncryptedClientSecret []byte `protobuf:"bytes,6,opt,name=oauth_encrypted_client_secret,json=oauthEncryptedClientSecret,proto3,oneof"`
}

func (*ValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthPlaintextClientSecret) isValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthClientSecret() {
}

func (*ValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthEncryptedClientSecret) isValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthClientSecret() {
}

type RunnerConfigurationSchema_StringField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default string `protobuf:"bytes,1,opt,name=default,proto3" json:"default,omitempty"`
	Pattern string `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *RunnerConfigurationSchema_StringField) Reset() {
	*x = RunnerConfigurationSchema_StringField{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerConfigurationSchema_StringField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigurationSchema_StringField) ProtoMessage() {}

func (x *RunnerConfigurationSchema_StringField) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigurationSchema_StringField.ProtoReflect.Descriptor instead.
func (*RunnerConfigurationSchema_StringField) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{41, 0}
}

func (x *RunnerConfigurationSchema_StringField) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *RunnerConfigurationSchema_StringField) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

type RunnerConfigurationSchema_BoolField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default bool `protobuf:"varint,1,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *RunnerConfigurationSchema_BoolField) Reset() {
	*x = RunnerConfigurationSchema_BoolField{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerConfigurationSchema_BoolField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigurationSchema_BoolField) ProtoMessage() {}

func (x *RunnerConfigurationSchema_BoolField) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigurationSchema_BoolField.ProtoReflect.Descriptor instead.
func (*RunnerConfigurationSchema_BoolField) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{41, 1}
}

func (x *RunnerConfigurationSchema_BoolField) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

type RunnerConfigurationSchema_IntField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default int32 `protobuf:"varint,1,opt,name=default,proto3" json:"default,omitempty"`
	Min     int32 `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`
	Max     int32 `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *RunnerConfigurationSchema_IntField) Reset() {
	*x = RunnerConfigurationSchema_IntField{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerConfigurationSchema_IntField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigurationSchema_IntField) ProtoMessage() {}

func (x *RunnerConfigurationSchema_IntField) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigurationSchema_IntField.ProtoReflect.Descriptor instead.
func (*RunnerConfigurationSchema_IntField) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{41, 2}
}

func (x *RunnerConfigurationSchema_IntField) GetDefault() int32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *RunnerConfigurationSchema_IntField) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RunnerConfigurationSchema_IntField) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type RunnerConfigurationSchema_EnumField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default string   `protobuf:"bytes,1,opt,name=default,proto3" json:"default,omitempty"`
	Values  []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RunnerConfigurationSchema_EnumField) Reset() {
	*x = RunnerConfigurationSchema_EnumField{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerConfigurationSchema_EnumField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigurationSchema_EnumField) ProtoMessage() {}

func (x *RunnerConfigurationSchema_EnumField) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigurationSchema_EnumField.ProtoReflect.Descriptor instead.
func (*RunnerConfigurationSchema_EnumField) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{41, 3}
}

func (x *RunnerConfigurationSchema_EnumField) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *RunnerConfigurationSchema_EnumField) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type RunnerConfigurationSchema_DisplayField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default string `protobuf:"bytes,1,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *RunnerConfigurationSchema_DisplayField) Reset() {
	*x = RunnerConfigurationSchema_DisplayField{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerConfigurationSchema_DisplayField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigurationSchema_DisplayField) ProtoMessage() {}

func (x *RunnerConfigurationSchema_DisplayField) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigurationSchema_DisplayField.ProtoReflect.Descriptor instead.
func (*RunnerConfigurationSchema_DisplayField) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{41, 4}
}

func (x *RunnerConfigurationSchema_DisplayField) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

type RunnerConfigurationSchema_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Required    bool   `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	Secret      bool   `protobuf:"varint,5,opt,name=secret,proto3" json:"secret,omitempty"`
	// Types that are assignable to Type:
	//
	//	*RunnerConfigurationSchema_Field_String_
	//	*RunnerConfigurationSchema_Field_Bool
	//	*RunnerConfigurationSchema_Field_Int
	//	*RunnerConfigurationSchema_Field_Enum
	//	*RunnerConfigurationSchema_Field_Display
	Type isRunnerConfigurationSchema_Field_Type `protobuf_oneof:"type"`
}

func (x *RunnerConfigurationSchema_Field) Reset() {
	*x = RunnerConfigurationSchema_Field{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerConfigurationSchema_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigurationSchema_Field) ProtoMessage() {}

func (x *RunnerConfigurationSchema_Field) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigurationSchema_Field.ProtoReflect.Descriptor instead.
func (*RunnerConfigurationSchema_Field) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{41, 5}
}

func (x *RunnerConfigurationSchema_Field) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunnerConfigurationSchema_Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunnerConfigurationSchema_Field) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RunnerConfigurationSchema_Field) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *RunnerConfigurationSchema_Field) GetSecret() bool {
	if x != nil {
		return x.Secret
	}
	return false
}

func (m *RunnerConfigurationSchema_Field) GetType() isRunnerConfigurationSchema_Field_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RunnerConfigurationSchema_Field) GetString_() *RunnerConfigurationSchema_StringField {
	if x, ok := x.GetType().(*RunnerConfigurationSchema_Field_String_); ok {
		return x.String_
	}
	return nil
}

func (x *RunnerConfigurationSchema_Field) GetBool() *RunnerConfigurationSchema_BoolField {
	if x, ok := x.GetType().(*RunnerConfigurationSchema_Field_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *RunnerConfigurationSchema_Field) GetInt() *RunnerConfigurationSchema_IntField {
	if x, ok := x.GetType().(*RunnerConfigurationSchema_Field_Int); ok {
		return x.Int
	}
	return nil
}

func (x *RunnerConfigurationSchema_Field) GetEnum() *RunnerConfigurationSchema_EnumField {
	if x, ok := x.GetType().(*RunnerConfigurationSchema_Field_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *RunnerConfigurationSchema_Field) GetDisplay() *RunnerConfigurationSchema_DisplayField {
	if x, ok := x.GetType().(*RunnerConfigurationSchema_Field_Display); ok {
		return x.Display
	}
	return nil
}

type isRunnerConfigurationSchema_Field_Type interface {
	isRunnerConfigurationSchema_Field_Type()
}

type RunnerConfigurationSchema_Field_String_ struct {
	String_ *RunnerConfigurationSchema_StringField `protobuf:"bytes,6,opt,name=string,proto3,oneof"`
}

type RunnerConfigurationSchema_Field_Bool struct {
	Bool *RunnerConfigurationSchema_BoolField `protobuf:"bytes,7,opt,name=bool,proto3,oneof"`
}

type RunnerConfigurationSchema_Field_Int struct {
	Int *RunnerConfigurationSchema_IntField `protobuf:"bytes,8,opt,name=int,proto3,oneof"`
}

type RunnerConfigurationSchema_Field_Enum struct {
	Enum *RunnerConfigurationSchema_EnumField `protobuf:"bytes,9,opt,name=enum,proto3,oneof"`
}

type RunnerConfigurationSchema_Field_Display struct {
	Display *RunnerConfigurationSchema_DisplayField `protobuf:"bytes,10,opt,name=display,proto3,oneof"`
}

func (*RunnerConfigurationSchema_Field_String_) isRunnerConfigurationSchema_Field_Type() {}

func (*RunnerConfigurationSchema_Field_Bool) isRunnerConfigurationSchema_Field_Type() {}

func (*RunnerConfigurationSchema_Field_Int) isRunnerConfigurationSchema_Field_Type() {}

func (*RunnerConfigurationSchema_Field_Enum) isRunnerConfigurationSchema_Field_Type() {}

func (*RunnerConfigurationSchema_Field_Display) isRunnerConfigurationSchema_Field_Type() {}

type RunnerConfigurationSchema_OAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// callback_url is the URL the OAuth app will redirect to after the user has authenticated.
	CallbackUrl string `protobuf:"bytes,1,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
}

func (x *RunnerConfigurationSchema_OAuth) Reset() {
	*x = RunnerConfigurationSchema_OAuth{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerConfigurationSchema_OAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigurationSchema_OAuth) ProtoMessage() {}

func (x *RunnerConfigurationSchema_OAuth) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigurationSchema_OAuth.ProtoReflect.Descriptor instead.
func (*RunnerConfigurationSchema_OAuth) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{41, 6}
}

func (x *RunnerConfigurationSchema_OAuth) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

type RunnerConfigurationSchema_PersonalAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// description is a human-readable description of the PAT.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// docs_link is a link to the documentation on how to create a PAT for this SCM system.
	DocsLink string `protobuf:"bytes,2,opt,name=docs_link,json=docsLink,proto3" json:"docs_link,omitempty"`
}

func (x *RunnerConfigurationSchema_PersonalAccessToken) Reset() {
	*x = RunnerConfigurationSchema_PersonalAccessToken{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerConfigurationSchema_PersonalAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigurationSchema_PersonalAccessToken) ProtoMessage() {}

func (x *RunnerConfigurationSchema_PersonalAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigurationSchema_PersonalAccessToken.ProtoReflect.Descriptor instead.
func (*RunnerConfigurationSchema_PersonalAccessToken) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{41, 7}
}

func (x *RunnerConfigurationSchema_PersonalAccessToken) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RunnerConfigurationSchema_PersonalAccessToken) GetDocsLink() string {
	if x != nil {
		return x.DocsLink
	}
	return ""
}

type RunnerConfigurationSchema_SCMConfigSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScmId        string                                         `protobuf:"bytes,1,opt,name=scm_id,json=scmId,proto3" json:"scm_id,omitempty"`
	Name         string                                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DefaultHosts []string                                       `protobuf:"bytes,3,rep,name=default_hosts,json=defaultHosts,proto3" json:"default_hosts,omitempty"`
	Oauth        *RunnerConfigurationSchema_OAuth               `protobuf:"bytes,4,opt,name=oauth,proto3" json:"oauth,omitempty"`
	Pat          *RunnerConfigurationSchema_PersonalAccessToken `protobuf:"bytes,5,opt,name=pat,proto3" json:"pat,omitempty"`
}

func (x *RunnerConfigurationSchema_SCMConfigSchema) Reset() {
	*x = RunnerConfigurationSchema_SCMConfigSchema{}
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerConfigurationSchema_SCMConfigSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfigurationSchema_SCMConfigSchema) ProtoMessage() {}

func (x *RunnerConfigurationSchema_SCMConfigSchema) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_configuration_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfigurationSchema_SCMConfigSchema.ProtoReflect.Descriptor instead.
func (*RunnerConfigurationSchema_SCMConfigSchema) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_configuration_proto_rawDescGZIP(), []int{41, 8}
}

func (x *RunnerConfigurationSchema_SCMConfigSchema) GetScmId() string {
	if x != nil {
		return x.ScmId
	}
	return ""
}

func (x *RunnerConfigurationSchema_SCMConfigSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunnerConfigurationSchema_SCMConfigSchema) GetDefaultHosts() []string {
	if x != nil {
		return x.DefaultHosts
	}
	return nil
}

func (x *RunnerConfigurationSchema_SCMConfigSchema) GetOauth() *RunnerConfigurationSchema_OAuth {
	if x != nil {
		return x.Oauth
	}
	return nil
}

func (x *RunnerConfigurationSchema_SCMConfigSchema) GetPat() *RunnerConfigurationSchema_PersonalAccessToken {
	if x != nil {
		return x.Pat
	}
	return nil
}

var File_gitpod_v1_runner_configuration_proto protoreflect.FileDescriptor

var file_gitpod_v1_runner_configuration_proto_rawDesc = []byte{
	0x0a, 0x24, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x6f, 0x67, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x02, 0x0a,
	0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69,
	0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x09, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x69, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x61, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf0, 0x01, 0x0a, 0x17, 0x48, 0x6f, 0x73, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x3d, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xaa, 0x02, 0x0a, 0x23, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x76, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x01,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x24, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x01, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x27, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40,
	0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x27, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x49, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab,
	0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xc9, 0x02,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x63, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xa2, 0xab, 0x1e, 0x08, 0x0a, 0x06, 0x73, 0x63, 0x6d, 0x2e, 0x69,
	0x64, 0x52, 0x05, 0x73, 0x63, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0f,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x1a, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x70, 0x61, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x4f, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2,
	0xab, 0x1e, 0x13, 0x0a, 0x11, 0x73, 0x63, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x19, 0x53, 0x43,
	0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xfd, 0x01, 0x0a,
	0x0e, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xa2, 0xab, 0x1e,
	0x13, 0x0a, 0x11, 0x73, 0x63, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x63, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa2, 0xab, 0x1e, 0x08, 0x0a, 0x06,
	0x73, 0x63, 0x6d, 0x2e, 0x69, 0x64, 0x52, 0x05, 0x73, 0x63, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x4d,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x70, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x22, 0x4b, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab,
	0x1e, 0x13, 0x0a, 0x11, 0x73, 0x63, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x43, 0x4d, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x51, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x47, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x28, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19,
	0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x13, 0x0a, 0x11, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x09,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x4d, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e,
	0x13, 0x0a, 0x11, 0x73, 0x63, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x1a,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x70, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x03, 0x70, 0x61,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70,
	0x61, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x4d, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4e, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x43, 0x4d, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x13, 0x0a, 0x11, 0x73, 0x63, 0x6d,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x69, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x43, 0x4d, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0xa2, 0xab, 0x1e, 0x0d, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x2e, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x7f, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba,
	0x48, 0x07, 0x72, 0x05, 0x10, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04,
	0x10, 0x03, 0x18, 0x7f, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x72,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x14,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x16, 0x0a, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x69, 0x64, 0x52, 0x12,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x22, 0x67, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x11, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x92, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x28, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x13, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x09, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x14, 0xa2, 0xab, 0x1e, 0x10, 0x0a,
	0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x14, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x16, 0x0a, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x69, 0x64, 0x52, 0x12, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x03,
	0x18, 0x7f, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05,
	0x10, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x05, 0x0a, 0x22, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x00, 0x52, 0x10, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x6f,
	0x0a, 0x0f, 0x73, 0x63, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x63, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xee, 0x02, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x4d, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xa2, 0xab, 0x1e, 0x13, 0x0a, 0x11, 0x73, 0x63,
	0x6d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x63, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xa2, 0xab, 0x1e, 0x08, 0x0a, 0x06, 0x73, 0x63, 0x6d, 0x2e, 0x69,
	0x64, 0x52, 0x05, 0x73, 0x63, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0f,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1d, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x1a, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x43,
	0x0a, 0x1d, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x1a, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x70, 0x61, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x3a, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x3e, 0x0a, 0x14, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x9e, 0x02, 0x0a, 0x20, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x12,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x87, 0x02, 0x0a, 0x1e, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x73,
	0x63, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x6d, 0x49, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x61, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe1, 0x01, 0x0a,
	0x23, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x54, 0x0a, 0x0f, 0x73, 0x63, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xb2, 0x0b, 0x0a, 0x19, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a, 0x13, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x03, 0x73, 0x63, 0x6d, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x43, 0x4d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x03, 0x73, 0x63, 0x6d, 0x1a, 0x41,
	0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x1a, 0x25, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x48, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x1a, 0x3d, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x28, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0xf3, 0x03, 0x0a, 0x05,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x4a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x04, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x12, 0x41, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52,
	0x03, 0x69, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x4d, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00,
	0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0x2a, 0x0a, 0x05, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x1a, 0x54, 0x0a,
	0x13, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x73, 0x4c,
	0x69, 0x6e, 0x6b, 0x1a, 0xef, 0x01, 0x0a, 0x0f, 0x53, 0x43, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x63, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6d, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x03, 0x70, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x03, 0x70, 0x61, 0x74, 0x2a, 0xa7, 0x01, 0x0a, 0x1d, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x2c, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x41,
	0x55, 0x54, 0x48, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x10, 0x02, 0x32,
	0x91, 0x0f, 0x0a, 0x1a, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84,
	0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x84, 0x01, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2e, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x69, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x43, 0x4d, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x43, 0x4d, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x69, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x69, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x43, 0x4d, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6f, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x28, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x25, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x72,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90,
	0x02, 0x01, 0x12, 0x6f, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x28, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitpod_v1_runner_configuration_proto_rawDescOnce sync.Once
	file_gitpod_v1_runner_configuration_proto_rawDescData = file_gitpod_v1_runner_configuration_proto_rawDesc
)

func file_gitpod_v1_runner_configuration_proto_rawDescGZIP() []byte {
	file_gitpod_v1_runner_configuration_proto_rawDescOnce.Do(func() {
		file_gitpod_v1_runner_configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitpod_v1_runner_configuration_proto_rawDescData)
	})
	return file_gitpod_v1_runner_configuration_proto_rawDescData
}

var file_gitpod_v1_runner_configuration_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gitpod_v1_runner_configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_gitpod_v1_runner_configuration_proto_goTypes = []any{
	(HostAuthenticationTokenSource)(0),                                // 0: gitpod.v1.HostAuthenticationTokenSource
	(*CreateHostAuthenticationTokenRequest)(nil),                      // 1: gitpod.v1.CreateHostAuthenticationTokenRequest
	(*CreateHostAuthenticationTokenResponse)(nil),                     // 2: gitpod.v1.CreateHostAuthenticationTokenResponse
	(*HostAuthenticationToken)(nil),                                   // 3: gitpod.v1.HostAuthenticationToken
	(*GetHostAuthenticationTokenRequest)(nil),                         // 4: gitpod.v1.GetHostAuthenticationTokenRequest
	(*GetHostAuthenticationTokenResponse)(nil),                        // 5: gitpod.v1.GetHostAuthenticationTokenResponse
	(*ListHostAuthenticationTokensRequest)(nil),                       // 6: gitpod.v1.ListHostAuthenticationTokensRequest
	(*ListHostAuthenticationTokensResponse)(nil),                      // 7: gitpod.v1.ListHostAuthenticationTokensResponse
	(*UpdateHostAuthenticationTokenRequest)(nil),                      // 8: gitpod.v1.UpdateHostAuthenticationTokenRequest
	(*UpdateHostAuthenticationTokenResponse)(nil),                     // 9: gitpod.v1.UpdateHostAuthenticationTokenResponse
	(*DeleteHostAuthenticationTokenRequest)(nil),                      // 10: gitpod.v1.DeleteHostAuthenticationTokenRequest
	(*DeleteHostAuthenticationTokenResponse)(nil),                     // 11: gitpod.v1.DeleteHostAuthenticationTokenResponse
	(*FieldValue)(nil),                                                // 12: gitpod.v1.FieldValue
	(*FieldValueUpdate)(nil),                                          // 13: gitpod.v1.FieldValueUpdate
	(*GetRunnerConfigurationSchemaRequest)(nil),                       // 14: gitpod.v1.GetRunnerConfigurationSchemaRequest
	(*GetRunnerConfigurationSchemaResponse)(nil),                      // 15: gitpod.v1.GetRunnerConfigurationSchemaResponse
	(*CreateSCMIntegrationRequest)(nil),                               // 16: gitpod.v1.CreateSCMIntegrationRequest
	(*CreateSCMIntegrationResponse)(nil),                              // 17: gitpod.v1.CreateSCMIntegrationResponse
	(*SCMIntegrationOAuthConfig)(nil),                                 // 18: gitpod.v1.SCMIntegrationOAuthConfig
	(*SCMIntegration)(nil),                                            // 19: gitpod.v1.SCMIntegration
	(*GetSCMIntegrationRequest)(nil),                                  // 20: gitpod.v1.GetSCMIntegrationRequest
	(*GetSCMIntegrationResponse)(nil),                                 // 21: gitpod.v1.GetSCMIntegrationResponse
	(*ListSCMIntegrationsRequest)(nil),                                // 22: gitpod.v1.ListSCMIntegrationsRequest
	(*ListSCMIntegrationsResponse)(nil),                               // 23: gitpod.v1.ListSCMIntegrationsResponse
	(*UpdateSCMIntegrationRequest)(nil),                               // 24: gitpod.v1.UpdateSCMIntegrationRequest
	(*UpdateSCMIntegrationResponse)(nil),                              // 25: gitpod.v1.UpdateSCMIntegrationResponse
	(*DeleteSCMIntegrationRequest)(nil),                               // 26: gitpod.v1.DeleteSCMIntegrationRequest
	(*DeleteSCMIntegrationResponse)(nil),                              // 27: gitpod.v1.DeleteSCMIntegrationResponse
	(*EnvironmentClass)(nil),                                          // 28: gitpod.v1.EnvironmentClass
	(*CreateEnvironmentClassRequest)(nil),                             // 29: gitpod.v1.CreateEnvironmentClassRequest
	(*CreateEnvironmentClassResponse)(nil),                            // 30: gitpod.v1.CreateEnvironmentClassResponse
	(*GetEnvironmentClassRequest)(nil),                                // 31: gitpod.v1.GetEnvironmentClassRequest
	(*GetEnvironmentClassResponse)(nil),                               // 32: gitpod.v1.GetEnvironmentClassResponse
	(*ListEnvironmentClassesRequest)(nil),                             // 33: gitpod.v1.ListEnvironmentClassesRequest
	(*ListEnvironmentClassesResponse)(nil),                            // 34: gitpod.v1.ListEnvironmentClassesResponse
	(*UpdateEnvironmentClassRequest)(nil),                             // 35: gitpod.v1.UpdateEnvironmentClassRequest
	(*UpdateEnvironmentClassResponse)(nil),                            // 36: gitpod.v1.UpdateEnvironmentClassResponse
	(*ValidateRunnerConfigurationRequest)(nil),                        // 37: gitpod.v1.ValidateRunnerConfigurationRequest
	(*FieldValidationError)(nil),                                      // 38: gitpod.v1.FieldValidationError
	(*EnvironmentClassValidationResult)(nil),                          // 39: gitpod.v1.EnvironmentClassValidationResult
	(*SCMIntegrationValidationResult)(nil),                            // 40: gitpod.v1.SCMIntegrationValidationResult
	(*ValidateRunnerConfigurationResponse)(nil),                       // 41: gitpod.v1.ValidateRunnerConfigurationResponse
	(*RunnerConfigurationSchema)(nil),                                 // 42: gitpod.v1.RunnerConfigurationSchema
	(*ListHostAuthenticationTokensRequest_Filter)(nil),                // 43: gitpod.v1.ListHostAuthenticationTokensRequest.Filter
	(*ListSCMIntegrationsRequest_Filter)(nil),                         // 44: gitpod.v1.ListSCMIntegrationsRequest.Filter
	(*ListEnvironmentClassesRequest_Filter)(nil),                      // 45: gitpod.v1.ListEnvironmentClassesRequest.Filter
	(*ValidateRunnerConfigurationRequest_ValidateSCMIntegration)(nil), // 46: gitpod.v1.ValidateRunnerConfigurationRequest.ValidateSCMIntegration
	(*RunnerConfigurationSchema_StringField)(nil),                     // 47: gitpod.v1.RunnerConfigurationSchema.StringField
	(*RunnerConfigurationSchema_BoolField)(nil),                       // 48: gitpod.v1.RunnerConfigurationSchema.BoolField
	(*RunnerConfigurationSchema_IntField)(nil),                        // 49: gitpod.v1.RunnerConfigurationSchema.IntField
	(*RunnerConfigurationSchema_EnumField)(nil),                       // 50: gitpod.v1.RunnerConfigurationSchema.EnumField
	(*RunnerConfigurationSchema_DisplayField)(nil),                    // 51: gitpod.v1.RunnerConfigurationSchema.DisplayField
	(*RunnerConfigurationSchema_Field)(nil),                           // 52: gitpod.v1.RunnerConfigurationSchema.Field
	(*RunnerConfigurationSchema_OAuth)(nil),                           // 53: gitpod.v1.RunnerConfigurationSchema.OAuth
	(*RunnerConfigurationSchema_PersonalAccessToken)(nil),             // 54: gitpod.v1.RunnerConfigurationSchema.PersonalAccessToken
	(*RunnerConfigurationSchema_SCMConfigSchema)(nil),                 // 55: gitpod.v1.RunnerConfigurationSchema.SCMConfigSchema
	(*timestamppb.Timestamp)(nil),                                     // 56: google.protobuf.Timestamp
	(*PaginationRequest)(nil),                                         // 57: gitpod.v1.PaginationRequest
	(*PaginationResponse)(nil),                                        // 58: gitpod.v1.PaginationResponse
}
var file_gitpod_v1_runner_configuration_proto_depIdxs = []int32{
	0,  // 0: gitpod.v1.CreateHostAuthenticationTokenRequest.source:type_name -> gitpod.v1.HostAuthenticationTokenSource
	56, // 1: gitpod.v1.CreateHostAuthenticationTokenRequest.expires_at:type_name -> google.protobuf.Timestamp
	3,  // 2: gitpod.v1.CreateHostAuthenticationTokenResponse.token:type_name -> gitpod.v1.HostAuthenticationToken
	0,  // 3: gitpod.v1.HostAuthenticationToken.source:type_name -> gitpod.v1.HostAuthenticationTokenSource
	56, // 4: gitpod.v1.HostAuthenticationToken.expires_at:type_name -> google.protobuf.Timestamp
	3,  // 5: gitpod.v1.GetHostAuthenticationTokenResponse.token:type_name -> gitpod.v1.HostAuthenticationToken
	57, // 6: gitpod.v1.ListHostAuthenticationTokensRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	43, // 7: gitpod.v1.ListHostAuthenticationTokensRequest.filter:type_name -> gitpod.v1.ListHostAuthenticationTokensRequest.Filter
	58, // 8: gitpod.v1.ListHostAuthenticationTokensResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	3,  // 9: gitpod.v1.ListHostAuthenticationTokensResponse.tokens:type_name -> gitpod.v1.HostAuthenticationToken
	56, // 10: gitpod.v1.UpdateHostAuthenticationTokenRequest.expires_at:type_name -> google.protobuf.Timestamp
	42, // 11: gitpod.v1.GetRunnerConfigurationSchemaResponse.schema:type_name -> gitpod.v1.RunnerConfigurationSchema
	18, // 12: gitpod.v1.SCMIntegration.oauth:type_name -> gitpod.v1.SCMIntegrationOAuthConfig
	19, // 13: gitpod.v1.GetSCMIntegrationResponse.integration:type_name -> gitpod.v1.SCMIntegration
	57, // 14: gitpod.v1.ListSCMIntegrationsRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	44, // 15: gitpod.v1.ListSCMIntegrationsRequest.filter:type_name -> gitpod.v1.ListSCMIntegrationsRequest.Filter
	58, // 16: gitpod.v1.ListSCMIntegrationsResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	19, // 17: gitpod.v1.ListSCMIntegrationsResponse.integrations:type_name -> gitpod.v1.SCMIntegration
	12, // 18: gitpod.v1.EnvironmentClass.configuration:type_name -> gitpod.v1.FieldValue
	12, // 19: gitpod.v1.CreateEnvironmentClassRequest.configuration:type_name -> gitpod.v1.FieldValue
	28, // 20: gitpod.v1.GetEnvironmentClassResponse.environment_class:type_name -> gitpod.v1.EnvironmentClass
	57, // 21: gitpod.v1.ListEnvironmentClassesRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	45, // 22: gitpod.v1.ListEnvironmentClassesRequest.filter:type_name -> gitpod.v1.ListEnvironmentClassesRequest.Filter
	58, // 23: gitpod.v1.ListEnvironmentClassesResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	28, // 24: gitpod.v1.ListEnvironmentClassesResponse.environment_classes:type_name -> gitpod.v1.EnvironmentClass
	28, // 25: gitpod.v1.ValidateRunnerConfigurationRequest.environment_class:type_name -> gitpod.v1.EnvironmentClass
	46, // 26: gitpod.v1.ValidateRunnerConfigurationRequest.scm_integration:type_name -> gitpod.v1.ValidateRunnerConfigurationRequest.ValidateSCMIntegration
	38, // 27: gitpod.v1.EnvironmentClassValidationResult.configuration_errors:type_name -> gitpod.v1.FieldValidationError
	39, // 28: gitpod.v1.ValidateRunnerConfigurationResponse.environment_class:type_name -> gitpod.v1.EnvironmentClassValidationResult
	40, // 29: gitpod.v1.ValidateRunnerConfigurationResponse.scm_integration:type_name -> gitpod.v1.SCMIntegrationValidationResult
	52, // 30: gitpod.v1.RunnerConfigurationSchema.runner_config:type_name -> gitpod.v1.RunnerConfigurationSchema.Field
	52, // 31: gitpod.v1.RunnerConfigurationSchema.environment_classes:type_name -> gitpod.v1.RunnerConfigurationSchema.Field
	55, // 32: gitpod.v1.RunnerConfigurationSchema.scm:type_name -> gitpod.v1.RunnerConfigurationSchema.SCMConfigSchema
	47, // 33: gitpod.v1.RunnerConfigurationSchema.Field.string:type_name -> gitpod.v1.RunnerConfigurationSchema.StringField
	48, // 34: gitpod.v1.RunnerConfigurationSchema.Field.bool:type_name -> gitpod.v1.RunnerConfigurationSchema.BoolField
	49, // 35: gitpod.v1.RunnerConfigurationSchema.Field.int:type_name -> gitpod.v1.RunnerConfigurationSchema.IntField
	50, // 36: gitpod.v1.RunnerConfigurationSchema.Field.enum:type_name -> gitpod.v1.RunnerConfigurationSchema.EnumField
	51, // 37: gitpod.v1.RunnerConfigurationSchema.Field.display:type_name -> gitpod.v1.RunnerConfigurationSchema.DisplayField
	53, // 38: gitpod.v1.RunnerConfigurationSchema.SCMConfigSchema.oauth:type_name -> gitpod.v1.RunnerConfigurationSchema.OAuth
	54, // 39: gitpod.v1.RunnerConfigurationSchema.SCMConfigSchema.pat:type_name -> gitpod.v1.RunnerConfigurationSchema.PersonalAccessToken
	1,  // 40: gitpod.v1.RunnerConfigurationService.CreateHostAuthenticationToken:input_type -> gitpod.v1.CreateHostAuthenticationTokenRequest
	4,  // 41: gitpod.v1.RunnerConfigurationService.GetHostAuthenticationToken:input_type -> gitpod.v1.GetHostAuthenticationTokenRequest
	6,  // 42: gitpod.v1.RunnerConfigurationService.ListHostAuthenticationTokens:input_type -> gitpod.v1.ListHostAuthenticationTokensRequest
	8,  // 43: gitpod.v1.RunnerConfigurationService.UpdateHostAuthenticationToken:input_type -> gitpod.v1.UpdateHostAuthenticationTokenRequest
	10, // 44: gitpod.v1.RunnerConfigurationService.DeleteHostAuthenticationToken:input_type -> gitpod.v1.DeleteHostAuthenticationTokenRequest
	14, // 45: gitpod.v1.RunnerConfigurationService.GetRunnerConfigurationSchema:input_type -> gitpod.v1.GetRunnerConfigurationSchemaRequest
	16, // 46: gitpod.v1.RunnerConfigurationService.CreateSCMIntegration:input_type -> gitpod.v1.CreateSCMIntegrationRequest
	20, // 47: gitpod.v1.RunnerConfigurationService.GetSCMIntegration:input_type -> gitpod.v1.GetSCMIntegrationRequest
	22, // 48: gitpod.v1.RunnerConfigurationService.ListSCMIntegrations:input_type -> gitpod.v1.ListSCMIntegrationsRequest
	24, // 49: gitpod.v1.RunnerConfigurationService.UpdateSCMIntegration:input_type -> gitpod.v1.UpdateSCMIntegrationRequest
	26, // 50: gitpod.v1.RunnerConfigurationService.DeleteSCMIntegration:input_type -> gitpod.v1.DeleteSCMIntegrationRequest
	29, // 51: gitpod.v1.RunnerConfigurationService.CreateEnvironmentClass:input_type -> gitpod.v1.CreateEnvironmentClassRequest
	31, // 52: gitpod.v1.RunnerConfigurationService.GetEnvironmentClass:input_type -> gitpod.v1.GetEnvironmentClassRequest
	33, // 53: gitpod.v1.RunnerConfigurationService.ListEnvironmentClasses:input_type -> gitpod.v1.ListEnvironmentClassesRequest
	35, // 54: gitpod.v1.RunnerConfigurationService.UpdateEnvironmentClass:input_type -> gitpod.v1.UpdateEnvironmentClassRequest
	37, // 55: gitpod.v1.RunnerConfigurationService.ValidateRunnerConfiguration:input_type -> gitpod.v1.ValidateRunnerConfigurationRequest
	2,  // 56: gitpod.v1.RunnerConfigurationService.CreateHostAuthenticationToken:output_type -> gitpod.v1.CreateHostAuthenticationTokenResponse
	5,  // 57: gitpod.v1.RunnerConfigurationService.GetHostAuthenticationToken:output_type -> gitpod.v1.GetHostAuthenticationTokenResponse
	7,  // 58: gitpod.v1.RunnerConfigurationService.ListHostAuthenticationTokens:output_type -> gitpod.v1.ListHostAuthenticationTokensResponse
	9,  // 59: gitpod.v1.RunnerConfigurationService.UpdateHostAuthenticationToken:output_type -> gitpod.v1.UpdateHostAuthenticationTokenResponse
	11, // 60: gitpod.v1.RunnerConfigurationService.DeleteHostAuthenticationToken:output_type -> gitpod.v1.DeleteHostAuthenticationTokenResponse
	15, // 61: gitpod.v1.RunnerConfigurationService.GetRunnerConfigurationSchema:output_type -> gitpod.v1.GetRunnerConfigurationSchemaResponse
	17, // 62: gitpod.v1.RunnerConfigurationService.CreateSCMIntegration:output_type -> gitpod.v1.CreateSCMIntegrationResponse
	21, // 63: gitpod.v1.RunnerConfigurationService.GetSCMIntegration:output_type -> gitpod.v1.GetSCMIntegrationResponse
	23, // 64: gitpod.v1.RunnerConfigurationService.ListSCMIntegrations:output_type -> gitpod.v1.ListSCMIntegrationsResponse
	25, // 65: gitpod.v1.RunnerConfigurationService.UpdateSCMIntegration:output_type -> gitpod.v1.UpdateSCMIntegrationResponse
	27, // 66: gitpod.v1.RunnerConfigurationService.DeleteSCMIntegration:output_type -> gitpod.v1.DeleteSCMIntegrationResponse
	30, // 67: gitpod.v1.RunnerConfigurationService.CreateEnvironmentClass:output_type -> gitpod.v1.CreateEnvironmentClassResponse
	32, // 68: gitpod.v1.RunnerConfigurationService.GetEnvironmentClass:output_type -> gitpod.v1.GetEnvironmentClassResponse
	34, // 69: gitpod.v1.RunnerConfigurationService.ListEnvironmentClasses:output_type -> gitpod.v1.ListEnvironmentClassesResponse
	36, // 70: gitpod.v1.RunnerConfigurationService.UpdateEnvironmentClass:output_type -> gitpod.v1.UpdateEnvironmentClassResponse
	41, // 71: gitpod.v1.RunnerConfigurationService.ValidateRunnerConfiguration:output_type -> gitpod.v1.ValidateRunnerConfigurationResponse
	56, // [56:72] is the sub-list for method output_type
	40, // [40:56] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_gitpod_v1_runner_configuration_proto_init() }
func file_gitpod_v1_runner_configuration_proto_init() {
	if File_gitpod_v1_runner_configuration_proto != nil {
		return
	}
	file_gitpod_v1_pagination_proto_init()
	file_gitpod_v1_runner_configuration_proto_msgTypes[7].OneofWrappers = []any{}
	file_gitpod_v1_runner_configuration_proto_msgTypes[12].OneofWrappers = []any{}
	file_gitpod_v1_runner_configuration_proto_msgTypes[15].OneofWrappers = []any{}
	file_gitpod_v1_runner_configuration_proto_msgTypes[18].OneofWrappers = []any{}
	file_gitpod_v1_runner_configuration_proto_msgTypes[23].OneofWrappers = []any{}
	file_gitpod_v1_runner_configuration_proto_msgTypes[34].OneofWrappers = []any{}
	file_gitpod_v1_runner_configuration_proto_msgTypes[36].OneofWrappers = []any{
		(*ValidateRunnerConfigurationRequest_EnvironmentClass)(nil),
		(*ValidateRunnerConfigurationRequest_ScmIntegration)(nil),
	}
	file_gitpod_v1_runner_configuration_proto_msgTypes[38].OneofWrappers = []any{}
	file_gitpod_v1_runner_configuration_proto_msgTypes[39].OneofWrappers = []any{}
	file_gitpod_v1_runner_configuration_proto_msgTypes[40].OneofWrappers = []any{
		(*ValidateRunnerConfigurationResponse_EnvironmentClass)(nil),
		(*ValidateRunnerConfigurationResponse_ScmIntegration)(nil),
	}
	file_gitpod_v1_runner_configuration_proto_msgTypes[42].OneofWrappers = []any{}
	file_gitpod_v1_runner_configuration_proto_msgTypes[44].OneofWrappers = []any{}
	file_gitpod_v1_runner_configuration_proto_msgTypes[45].OneofWrappers = []any{
		(*ValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthPlaintextClientSecret)(nil),
		(*ValidateRunnerConfigurationRequest_ValidateSCMIntegration_OauthEncryptedClientSecret)(nil),
	}
	file_gitpod_v1_runner_configuration_proto_msgTypes[51].OneofWrappers = []any{
		(*RunnerConfigurationSchema_Field_String_)(nil),
		(*RunnerConfigurationSchema_Field_Bool)(nil),
		(*RunnerConfigurationSchema_Field_Int)(nil),
		(*RunnerConfigurationSchema_Field_Enum)(nil),
		(*RunnerConfigurationSchema_Field_Display)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitpod_v1_runner_configuration_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitpod_v1_runner_configuration_proto_goTypes,
		DependencyIndexes: file_gitpod_v1_runner_configuration_proto_depIdxs,
		EnumInfos:         file_gitpod_v1_runner_configuration_proto_enumTypes,
		MessageInfos:      file_gitpod_v1_runner_configuration_proto_msgTypes,
	}.Build()
	File_gitpod_v1_runner_configuration_proto = out.File
	file_gitpod_v1_runner_configuration_proto_rawDesc = nil
	file_gitpod_v1_runner_configuration_proto_goTypes = nil
	file_gitpod_v1_runner_configuration_proto_depIdxs = nil
}
