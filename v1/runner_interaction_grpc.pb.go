// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gitpod/v1/runner_interaction.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RunnerInteractionService_Signup_FullMethodName                          = "/gitpod.v1.RunnerInteractionService/Signup"
	RunnerInteractionService_MarkRunnerActive_FullMethodName                = "/gitpod.v1.RunnerInteractionService/MarkRunnerActive"
	RunnerInteractionService_GetRunnerEnvironment_FullMethodName            = "/gitpod.v1.RunnerInteractionService/GetRunnerEnvironment"
	RunnerInteractionService_ListRunnerEnvironments_FullMethodName          = "/gitpod.v1.RunnerInteractionService/ListRunnerEnvironments"
	RunnerInteractionService_UpdateRunnerEnvironmentStatus_FullMethodName   = "/gitpod.v1.RunnerInteractionService/UpdateRunnerEnvironmentStatus"
	RunnerInteractionService_UpdateRunnerStatus_FullMethodName              = "/gitpod.v1.RunnerInteractionService/UpdateRunnerStatus"
	RunnerInteractionService_UpdateRunnerConfigurationSchema_FullMethodName = "/gitpod.v1.RunnerInteractionService/UpdateRunnerConfigurationSchema"
	RunnerInteractionService_GetHostAuthenticationTokenValue_FullMethodName = "/gitpod.v1.RunnerInteractionService/GetHostAuthenticationTokenValue"
	RunnerInteractionService_ListRunnerEnvironmentClasses_FullMethodName    = "/gitpod.v1.RunnerInteractionService/ListRunnerEnvironmentClasses"
	RunnerInteractionService_ListRunnerSCMIntegrations_FullMethodName       = "/gitpod.v1.RunnerInteractionService/ListRunnerSCMIntegrations"
	RunnerInteractionService_WatchRequests_FullMethodName                   = "/gitpod.v1.RunnerInteractionService/WatchRequests"
	RunnerInteractionService_SendResponse_FullMethodName                    = "/gitpod.v1.RunnerInteractionService/SendResponse"
	RunnerInteractionService_GetLatestVersion_FullMethodName                = "/gitpod.v1.RunnerInteractionService/GetLatestVersion"
)

// RunnerInteractionServiceClient is the client API for RunnerInteractionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RunnerInteractionService provides a way for the backend to interact with environment runners.
type RunnerInteractionServiceClient interface {
	// Signup is called by a runner to sign up with the backend. This is the first call a runner makes.
	Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error)
	// MarkRunnerActive marks a runner as available. This must be called every 30 seconds
	// to keep the runner active.
	MarkRunnerActive(ctx context.Context, in *MarkRunnerActiveRequest, opts ...grpc.CallOption) (*MarkRunnerActiveResponse, error)
	// GetRunnerEnvironment returns the environment given it is owned by the runner.
	GetRunnerEnvironment(ctx context.Context, in *GetRunnerEnvironmentRequest, opts ...grpc.CallOption) (*GetRunnerEnvironmentResponse, error)
	// ListRunnerEnvironments returns the environments this runner is responsible for.
	ListRunnerEnvironments(ctx context.Context, in *ListRunnerEnvironmentsRequest, opts ...grpc.CallOption) (*ListRunnerEnvironmentsResponse, error)
	// UpdateRunnerEnvironmentStatus updates the status of an environment this runner is responsible for.
	UpdateRunnerEnvironmentStatus(ctx context.Context, in *UpdateRunnerEnvironmentStatusRequest, opts ...grpc.CallOption) (*UpdateRunnerEnvironmentStatusResponse, error)
	// UpdateRunnerStatus updates the status of the runner.
	UpdateRunnerStatus(ctx context.Context, in *UpdateRunnerStatusRequest, opts ...grpc.CallOption) (*UpdateRunnerStatusResponse, error)
	// UpdateRunnerConfigurationSchema updates the runner's configuration schema.
	UpdateRunnerConfigurationSchema(ctx context.Context, in *UpdateRunnerConfigurationSchemaRequest, opts ...grpc.CallOption) (*UpdateRunnerConfigurationSchemaResponse, error)
	// GetRunnerHostAuthenticationToken returns an authentication token for the given host.
	GetHostAuthenticationTokenValue(ctx context.Context, in *GetHostAuthenticationTokenValueRequest, opts ...grpc.CallOption) (*GetHostAuthenticationTokenValueResponse, error)
	// ListRunnerEnvironmentClasses returns the environment classes configured for the runner.
	ListRunnerEnvironmentClasses(ctx context.Context, in *ListRunnerEnvironmentClassesRequest, opts ...grpc.CallOption) (*ListRunnerEnvironmentClassesResponse, error)
	// ListRunnerSCMIntegrations returns the SCM integrations configured for the runner.
	// For local runners, this returns the SCM integrations configured on the organization's
	// local-configuration runner.
	ListRunnerSCMIntegrations(ctx context.Context, in *ListRunnerSCMIntegrationsRequest, opts ...grpc.CallOption) (*ListRunnerSCMIntegrationsResponse, error)
	// WatchRequests returns a stream of requests for this runner to handle.
	WatchRequests(ctx context.Context, in *WatchRequestsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchRequestsResponse], error)
	// SendResponse sends a response to a request.
	SendResponse(ctx context.Context, in *SendResponseRequest, opts ...grpc.CallOption) (*SendResponseResponse, error)
	// GetLatestVersion returns the latest version of the runner.
	GetLatestVersion(ctx context.Context, in *GetLatestVersionRequest, opts ...grpc.CallOption) (*GetLatestVersionResponse, error)
}

type runnerInteractionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerInteractionServiceClient(cc grpc.ClientConnInterface) RunnerInteractionServiceClient {
	return &runnerInteractionServiceClient{cc}
}

func (c *runnerInteractionServiceClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, RunnerInteractionService_Signup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerInteractionServiceClient) MarkRunnerActive(ctx context.Context, in *MarkRunnerActiveRequest, opts ...grpc.CallOption) (*MarkRunnerActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkRunnerActiveResponse)
	err := c.cc.Invoke(ctx, RunnerInteractionService_MarkRunnerActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerInteractionServiceClient) GetRunnerEnvironment(ctx context.Context, in *GetRunnerEnvironmentRequest, opts ...grpc.CallOption) (*GetRunnerEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRunnerEnvironmentResponse)
	err := c.cc.Invoke(ctx, RunnerInteractionService_GetRunnerEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerInteractionServiceClient) ListRunnerEnvironments(ctx context.Context, in *ListRunnerEnvironmentsRequest, opts ...grpc.CallOption) (*ListRunnerEnvironmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRunnerEnvironmentsResponse)
	err := c.cc.Invoke(ctx, RunnerInteractionService_ListRunnerEnvironments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerInteractionServiceClient) UpdateRunnerEnvironmentStatus(ctx context.Context, in *UpdateRunnerEnvironmentStatusRequest, opts ...grpc.CallOption) (*UpdateRunnerEnvironmentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRunnerEnvironmentStatusResponse)
	err := c.cc.Invoke(ctx, RunnerInteractionService_UpdateRunnerEnvironmentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerInteractionServiceClient) UpdateRunnerStatus(ctx context.Context, in *UpdateRunnerStatusRequest, opts ...grpc.CallOption) (*UpdateRunnerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRunnerStatusResponse)
	err := c.cc.Invoke(ctx, RunnerInteractionService_UpdateRunnerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerInteractionServiceClient) UpdateRunnerConfigurationSchema(ctx context.Context, in *UpdateRunnerConfigurationSchemaRequest, opts ...grpc.CallOption) (*UpdateRunnerConfigurationSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRunnerConfigurationSchemaResponse)
	err := c.cc.Invoke(ctx, RunnerInteractionService_UpdateRunnerConfigurationSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerInteractionServiceClient) GetHostAuthenticationTokenValue(ctx context.Context, in *GetHostAuthenticationTokenValueRequest, opts ...grpc.CallOption) (*GetHostAuthenticationTokenValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHostAuthenticationTokenValueResponse)
	err := c.cc.Invoke(ctx, RunnerInteractionService_GetHostAuthenticationTokenValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerInteractionServiceClient) ListRunnerEnvironmentClasses(ctx context.Context, in *ListRunnerEnvironmentClassesRequest, opts ...grpc.CallOption) (*ListRunnerEnvironmentClassesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRunnerEnvironmentClassesResponse)
	err := c.cc.Invoke(ctx, RunnerInteractionService_ListRunnerEnvironmentClasses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerInteractionServiceClient) ListRunnerSCMIntegrations(ctx context.Context, in *ListRunnerSCMIntegrationsRequest, opts ...grpc.CallOption) (*ListRunnerSCMIntegrationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRunnerSCMIntegrationsResponse)
	err := c.cc.Invoke(ctx, RunnerInteractionService_ListRunnerSCMIntegrations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerInteractionServiceClient) WatchRequests(ctx context.Context, in *WatchRequestsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchRequestsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RunnerInteractionService_ServiceDesc.Streams[0], RunnerInteractionService_WatchRequests_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchRequestsRequest, WatchRequestsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RunnerInteractionService_WatchRequestsClient = grpc.ServerStreamingClient[WatchRequestsResponse]

func (c *runnerInteractionServiceClient) SendResponse(ctx context.Context, in *SendResponseRequest, opts ...grpc.CallOption) (*SendResponseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponseResponse)
	err := c.cc.Invoke(ctx, RunnerInteractionService_SendResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerInteractionServiceClient) GetLatestVersion(ctx context.Context, in *GetLatestVersionRequest, opts ...grpc.CallOption) (*GetLatestVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestVersionResponse)
	err := c.cc.Invoke(ctx, RunnerInteractionService_GetLatestVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerInteractionServiceServer is the server API for RunnerInteractionService service.
// All implementations must embed UnimplementedRunnerInteractionServiceServer
// for forward compatibility.
//
// RunnerInteractionService provides a way for the backend to interact with environment runners.
type RunnerInteractionServiceServer interface {
	// Signup is called by a runner to sign up with the backend. This is the first call a runner makes.
	Signup(context.Context, *SignupRequest) (*SignupResponse, error)
	// MarkRunnerActive marks a runner as available. This must be called every 30 seconds
	// to keep the runner active.
	MarkRunnerActive(context.Context, *MarkRunnerActiveRequest) (*MarkRunnerActiveResponse, error)
	// GetRunnerEnvironment returns the environment given it is owned by the runner.
	GetRunnerEnvironment(context.Context, *GetRunnerEnvironmentRequest) (*GetRunnerEnvironmentResponse, error)
	// ListRunnerEnvironments returns the environments this runner is responsible for.
	ListRunnerEnvironments(context.Context, *ListRunnerEnvironmentsRequest) (*ListRunnerEnvironmentsResponse, error)
	// UpdateRunnerEnvironmentStatus updates the status of an environment this runner is responsible for.
	UpdateRunnerEnvironmentStatus(context.Context, *UpdateRunnerEnvironmentStatusRequest) (*UpdateRunnerEnvironmentStatusResponse, error)
	// UpdateRunnerStatus updates the status of the runner.
	UpdateRunnerStatus(context.Context, *UpdateRunnerStatusRequest) (*UpdateRunnerStatusResponse, error)
	// UpdateRunnerConfigurationSchema updates the runner's configuration schema.
	UpdateRunnerConfigurationSchema(context.Context, *UpdateRunnerConfigurationSchemaRequest) (*UpdateRunnerConfigurationSchemaResponse, error)
	// GetRunnerHostAuthenticationToken returns an authentication token for the given host.
	GetHostAuthenticationTokenValue(context.Context, *GetHostAuthenticationTokenValueRequest) (*GetHostAuthenticationTokenValueResponse, error)
	// ListRunnerEnvironmentClasses returns the environment classes configured for the runner.
	ListRunnerEnvironmentClasses(context.Context, *ListRunnerEnvironmentClassesRequest) (*ListRunnerEnvironmentClassesResponse, error)
	// ListRunnerSCMIntegrations returns the SCM integrations configured for the runner.
	// For local runners, this returns the SCM integrations configured on the organization's
	// local-configuration runner.
	ListRunnerSCMIntegrations(context.Context, *ListRunnerSCMIntegrationsRequest) (*ListRunnerSCMIntegrationsResponse, error)
	// WatchRequests returns a stream of requests for this runner to handle.
	WatchRequests(*WatchRequestsRequest, grpc.ServerStreamingServer[WatchRequestsResponse]) error
	// SendResponse sends a response to a request.
	SendResponse(context.Context, *SendResponseRequest) (*SendResponseResponse, error)
	// GetLatestVersion returns the latest version of the runner.
	GetLatestVersion(context.Context, *GetLatestVersionRequest) (*GetLatestVersionResponse, error)
	mustEmbedUnimplementedRunnerInteractionServiceServer()
}

// UnimplementedRunnerInteractionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRunnerInteractionServiceServer struct{}

func (UnimplementedRunnerInteractionServiceServer) Signup(context.Context, *SignupRequest) (*SignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) MarkRunnerActive(context.Context, *MarkRunnerActiveRequest) (*MarkRunnerActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkRunnerActive not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) GetRunnerEnvironment(context.Context, *GetRunnerEnvironmentRequest) (*GetRunnerEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunnerEnvironment not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) ListRunnerEnvironments(context.Context, *ListRunnerEnvironmentsRequest) (*ListRunnerEnvironmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunnerEnvironments not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) UpdateRunnerEnvironmentStatus(context.Context, *UpdateRunnerEnvironmentStatusRequest) (*UpdateRunnerEnvironmentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunnerEnvironmentStatus not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) UpdateRunnerStatus(context.Context, *UpdateRunnerStatusRequest) (*UpdateRunnerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunnerStatus not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) UpdateRunnerConfigurationSchema(context.Context, *UpdateRunnerConfigurationSchemaRequest) (*UpdateRunnerConfigurationSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunnerConfigurationSchema not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) GetHostAuthenticationTokenValue(context.Context, *GetHostAuthenticationTokenValueRequest) (*GetHostAuthenticationTokenValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostAuthenticationTokenValue not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) ListRunnerEnvironmentClasses(context.Context, *ListRunnerEnvironmentClassesRequest) (*ListRunnerEnvironmentClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunnerEnvironmentClasses not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) ListRunnerSCMIntegrations(context.Context, *ListRunnerSCMIntegrationsRequest) (*ListRunnerSCMIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunnerSCMIntegrations not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) WatchRequests(*WatchRequestsRequest, grpc.ServerStreamingServer[WatchRequestsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WatchRequests not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) SendResponse(context.Context, *SendResponseRequest) (*SendResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResponse not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) GetLatestVersion(context.Context, *GetLatestVersionRequest) (*GetLatestVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestVersion not implemented")
}
func (UnimplementedRunnerInteractionServiceServer) mustEmbedUnimplementedRunnerInteractionServiceServer() {
}
func (UnimplementedRunnerInteractionServiceServer) testEmbeddedByValue() {}

// UnsafeRunnerInteractionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerInteractionServiceServer will
// result in compilation errors.
type UnsafeRunnerInteractionServiceServer interface {
	mustEmbedUnimplementedRunnerInteractionServiceServer()
}

func RegisterRunnerInteractionServiceServer(s grpc.ServiceRegistrar, srv RunnerInteractionServiceServer) {
	// If the following call pancis, it indicates UnimplementedRunnerInteractionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RunnerInteractionService_ServiceDesc, srv)
}

func _RunnerInteractionService_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerInteractionServiceServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerInteractionService_Signup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerInteractionServiceServer).Signup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerInteractionService_MarkRunnerActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkRunnerActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerInteractionServiceServer).MarkRunnerActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerInteractionService_MarkRunnerActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerInteractionServiceServer).MarkRunnerActive(ctx, req.(*MarkRunnerActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerInteractionService_GetRunnerEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerInteractionServiceServer).GetRunnerEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerInteractionService_GetRunnerEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerInteractionServiceServer).GetRunnerEnvironment(ctx, req.(*GetRunnerEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerInteractionService_ListRunnerEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnerEnvironmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerInteractionServiceServer).ListRunnerEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerInteractionService_ListRunnerEnvironments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerInteractionServiceServer).ListRunnerEnvironments(ctx, req.(*ListRunnerEnvironmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerInteractionService_UpdateRunnerEnvironmentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunnerEnvironmentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerInteractionServiceServer).UpdateRunnerEnvironmentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerInteractionService_UpdateRunnerEnvironmentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerInteractionServiceServer).UpdateRunnerEnvironmentStatus(ctx, req.(*UpdateRunnerEnvironmentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerInteractionService_UpdateRunnerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunnerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerInteractionServiceServer).UpdateRunnerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerInteractionService_UpdateRunnerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerInteractionServiceServer).UpdateRunnerStatus(ctx, req.(*UpdateRunnerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerInteractionService_UpdateRunnerConfigurationSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunnerConfigurationSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerInteractionServiceServer).UpdateRunnerConfigurationSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerInteractionService_UpdateRunnerConfigurationSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerInteractionServiceServer).UpdateRunnerConfigurationSchema(ctx, req.(*UpdateRunnerConfigurationSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerInteractionService_GetHostAuthenticationTokenValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostAuthenticationTokenValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerInteractionServiceServer).GetHostAuthenticationTokenValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerInteractionService_GetHostAuthenticationTokenValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerInteractionServiceServer).GetHostAuthenticationTokenValue(ctx, req.(*GetHostAuthenticationTokenValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerInteractionService_ListRunnerEnvironmentClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnerEnvironmentClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerInteractionServiceServer).ListRunnerEnvironmentClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerInteractionService_ListRunnerEnvironmentClasses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerInteractionServiceServer).ListRunnerEnvironmentClasses(ctx, req.(*ListRunnerEnvironmentClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerInteractionService_ListRunnerSCMIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnerSCMIntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerInteractionServiceServer).ListRunnerSCMIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerInteractionService_ListRunnerSCMIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerInteractionServiceServer).ListRunnerSCMIntegrations(ctx, req.(*ListRunnerSCMIntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerInteractionService_WatchRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequestsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunnerInteractionServiceServer).WatchRequests(m, &grpc.GenericServerStream[WatchRequestsRequest, WatchRequestsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RunnerInteractionService_WatchRequestsServer = grpc.ServerStreamingServer[WatchRequestsResponse]

func _RunnerInteractionService_SendResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerInteractionServiceServer).SendResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerInteractionService_SendResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerInteractionServiceServer).SendResponse(ctx, req.(*SendResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerInteractionService_GetLatestVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerInteractionServiceServer).GetLatestVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerInteractionService_GetLatestVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerInteractionServiceServer).GetLatestVersion(ctx, req.(*GetLatestVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunnerInteractionService_ServiceDesc is the grpc.ServiceDesc for RunnerInteractionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerInteractionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitpod.v1.RunnerInteractionService",
	HandlerType: (*RunnerInteractionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _RunnerInteractionService_Signup_Handler,
		},
		{
			MethodName: "MarkRunnerActive",
			Handler:    _RunnerInteractionService_MarkRunnerActive_Handler,
		},
		{
			MethodName: "GetRunnerEnvironment",
			Handler:    _RunnerInteractionService_GetRunnerEnvironment_Handler,
		},
		{
			MethodName: "ListRunnerEnvironments",
			Handler:    _RunnerInteractionService_ListRunnerEnvironments_Handler,
		},
		{
			MethodName: "UpdateRunnerEnvironmentStatus",
			Handler:    _RunnerInteractionService_UpdateRunnerEnvironmentStatus_Handler,
		},
		{
			MethodName: "UpdateRunnerStatus",
			Handler:    _RunnerInteractionService_UpdateRunnerStatus_Handler,
		},
		{
			MethodName: "UpdateRunnerConfigurationSchema",
			Handler:    _RunnerInteractionService_UpdateRunnerConfigurationSchema_Handler,
		},
		{
			MethodName: "GetHostAuthenticationTokenValue",
			Handler:    _RunnerInteractionService_GetHostAuthenticationTokenValue_Handler,
		},
		{
			MethodName: "ListRunnerEnvironmentClasses",
			Handler:    _RunnerInteractionService_ListRunnerEnvironmentClasses_Handler,
		},
		{
			MethodName: "ListRunnerSCMIntegrations",
			Handler:    _RunnerInteractionService_ListRunnerSCMIntegrations_Handler,
		},
		{
			MethodName: "SendResponse",
			Handler:    _RunnerInteractionService_SendResponse_Handler,
		},
		{
			MethodName: "GetLatestVersion",
			Handler:    _RunnerInteractionService_GetLatestVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchRequests",
			Handler:       _RunnerInteractionService_WatchRequests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gitpod/v1/runner_interaction.proto",
}
