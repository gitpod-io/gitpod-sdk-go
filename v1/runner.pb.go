// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: gitpod/v1/runner.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/gitpod-io/flex-go/tools/logfields"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RunnerKind represents the kind of a runner
type RunnerKind int32

const (
	// Invalid kind
	RunnerKind_RUNNER_KIND_UNSPECIFIED RunnerKind = 0
	// The runner is a local runner
	RunnerKind_RUNNER_KIND_LOCAL RunnerKind = 1
	// The runner is a remote runner
	RunnerKind_RUNNER_KIND_REMOTE RunnerKind = 2
	// The runner is a system-managed runner that holds shared configuration for local runners.
	// Every organization automatically has one of these runners, and it cannot be deleted nor
	// can new runners of this kind be created.
	// Organization admins can update this runner to change the shared configuration, including:
	// - SCM Integrations. All local runners will use these integrations.
	// - DesiredPhase. Can be set to STOPPED to disable all local runners.
	// This runner cannot be used to run environments.
	RunnerKind_RUNNER_KIND_LOCAL_CONFIGURATION RunnerKind = 3
)

// Enum value maps for RunnerKind.
var (
	RunnerKind_name = map[int32]string{
		0: "RUNNER_KIND_UNSPECIFIED",
		1: "RUNNER_KIND_LOCAL",
		2: "RUNNER_KIND_REMOTE",
		3: "RUNNER_KIND_LOCAL_CONFIGURATION",
	}
	RunnerKind_value = map[string]int32{
		"RUNNER_KIND_UNSPECIFIED":         0,
		"RUNNER_KIND_LOCAL":               1,
		"RUNNER_KIND_REMOTE":              2,
		"RUNNER_KIND_LOCAL_CONFIGURATION": 3,
	}
)

func (x RunnerKind) Enum() *RunnerKind {
	p := new(RunnerKind)
	*p = x
	return p
}

func (x RunnerKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunnerKind) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_runner_proto_enumTypes[0].Descriptor()
}

func (RunnerKind) Type() protoreflect.EnumType {
	return &file_gitpod_v1_runner_proto_enumTypes[0]
}

func (x RunnerKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunnerKind.Descriptor instead.
func (RunnerKind) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{0}
}

type RunnerReleaseChannel int32

const (
	// Invalid release channel
	RunnerReleaseChannel_RUNNER_RELEASE_CHANNEL_UNSPECIFIED RunnerReleaseChannel = 0
	// The runner is on the stable release channel
	RunnerReleaseChannel_RUNNER_RELEASE_CHANNEL_STABLE RunnerReleaseChannel = 1
	// The runner is on the latest release channel
	RunnerReleaseChannel_RUNNER_RELEASE_CHANNEL_LATEST RunnerReleaseChannel = 2
)

// Enum value maps for RunnerReleaseChannel.
var (
	RunnerReleaseChannel_name = map[int32]string{
		0: "RUNNER_RELEASE_CHANNEL_UNSPECIFIED",
		1: "RUNNER_RELEASE_CHANNEL_STABLE",
		2: "RUNNER_RELEASE_CHANNEL_LATEST",
	}
	RunnerReleaseChannel_value = map[string]int32{
		"RUNNER_RELEASE_CHANNEL_UNSPECIFIED": 0,
		"RUNNER_RELEASE_CHANNEL_STABLE":      1,
		"RUNNER_RELEASE_CHANNEL_LATEST":      2,
	}
)

func (x RunnerReleaseChannel) Enum() *RunnerReleaseChannel {
	p := new(RunnerReleaseChannel)
	*p = x
	return p
}

func (x RunnerReleaseChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunnerReleaseChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_runner_proto_enumTypes[1].Descriptor()
}

func (RunnerReleaseChannel) Type() protoreflect.EnumType {
	return &file_gitpod_v1_runner_proto_enumTypes[1]
}

func (x RunnerReleaseChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunnerReleaseChannel.Descriptor instead.
func (RunnerReleaseChannel) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{1}
}

// RunnerPhase represents the phase a runner is in
type RunnerPhase int32

const (
	// Invalid phase
	RunnerPhase_RUNNER_PHASE_UNSPECIFIED RunnerPhase = 0
	// The runner was created but not yet signed up
	RunnerPhase_RUNNER_PHASE_CREATED RunnerPhase = 1
	// The runner was signed up and is ready to be used, but has not communicated with us yet
	RunnerPhase_RUNNER_PHASE_INACTIVE RunnerPhase = 2
	// The runner was signed up and is ready to be used
	RunnerPhase_RUNNER_PHASE_ACTIVE RunnerPhase = 3
	// The runner is in the process of being deleted.
	RunnerPhase_RUNNER_PHASE_DELETING RunnerPhase = 4
	// The runner has been deleted.
	RunnerPhase_RUNNER_PHASE_DELETED RunnerPhase = 5
	// The runner is in a degraded state.
	RunnerPhase_RUNNER_PHASE_DEGRADED RunnerPhase = 6
)

// Enum value maps for RunnerPhase.
var (
	RunnerPhase_name = map[int32]string{
		0: "RUNNER_PHASE_UNSPECIFIED",
		1: "RUNNER_PHASE_CREATED",
		2: "RUNNER_PHASE_INACTIVE",
		3: "RUNNER_PHASE_ACTIVE",
		4: "RUNNER_PHASE_DELETING",
		5: "RUNNER_PHASE_DELETED",
		6: "RUNNER_PHASE_DEGRADED",
	}
	RunnerPhase_value = map[string]int32{
		"RUNNER_PHASE_UNSPECIFIED": 0,
		"RUNNER_PHASE_CREATED":     1,
		"RUNNER_PHASE_INACTIVE":    2,
		"RUNNER_PHASE_ACTIVE":      3,
		"RUNNER_PHASE_DELETING":    4,
		"RUNNER_PHASE_DELETED":     5,
		"RUNNER_PHASE_DEGRADED":    6,
	}
)

func (x RunnerPhase) Enum() *RunnerPhase {
	p := new(RunnerPhase)
	*p = x
	return p
}

func (x RunnerPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunnerPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_runner_proto_enumTypes[2].Descriptor()
}

func (RunnerPhase) Type() protoreflect.EnumType {
	return &file_gitpod_v1_runner_proto_enumTypes[2]
}

func (x RunnerPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunnerPhase.Descriptor instead.
func (RunnerPhase) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{2}
}

type RunnerCapability int32

const (
	RunnerCapability_RUNNER_CAPABILITY_UNSPECIFIED RunnerCapability = 0
	// RUNNER_CAPABILITY_FETCH_LOCAL_SCM_INTEGRATIONS is used by local runners to indicate they support fetching SCM Integrations.
	RunnerCapability_RUNNER_CAPABILITY_FETCH_LOCAL_SCM_INTEGRATIONS RunnerCapability = 1
)

// Enum value maps for RunnerCapability.
var (
	RunnerCapability_name = map[int32]string{
		0: "RUNNER_CAPABILITY_UNSPECIFIED",
		1: "RUNNER_CAPABILITY_FETCH_LOCAL_SCM_INTEGRATIONS",
	}
	RunnerCapability_value = map[string]int32{
		"RUNNER_CAPABILITY_UNSPECIFIED":                  0,
		"RUNNER_CAPABILITY_FETCH_LOCAL_SCM_INTEGRATIONS": 1,
	}
)

func (x RunnerCapability) Enum() *RunnerCapability {
	p := new(RunnerCapability)
	*p = x
	return p
}

func (x RunnerCapability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunnerCapability) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_runner_proto_enumTypes[3].Descriptor()
}

func (RunnerCapability) Type() protoreflect.EnumType {
	return &file_gitpod_v1_runner_proto_enumTypes[3]
}

func (x RunnerCapability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunnerCapability.Descriptor instead.
func (RunnerCapability) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{3}
}

type RunnerRole int32

const (
	RunnerRole_RUNNER_ROLE_UNSPECIFIED RunnerRole = 0
	RunnerRole_RUNNER_ROLE_ADMIN       RunnerRole = 1
	RunnerRole_RUNNER_ROLE_USER        RunnerRole = 2
)

// Enum value maps for RunnerRole.
var (
	RunnerRole_name = map[int32]string{
		0: "RUNNER_ROLE_UNSPECIFIED",
		1: "RUNNER_ROLE_ADMIN",
		2: "RUNNER_ROLE_USER",
	}
	RunnerRole_value = map[string]int32{
		"RUNNER_ROLE_UNSPECIFIED": 0,
		"RUNNER_ROLE_ADMIN":       1,
		"RUNNER_ROLE_USER":        2,
	}
)

func (x RunnerRole) Enum() *RunnerRole {
	p := new(RunnerRole)
	*p = x
	return p
}

func (x RunnerRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunnerRole) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_runner_proto_enumTypes[4].Descriptor()
}

func (RunnerRole) Type() protoreflect.EnumType {
	return &file_gitpod_v1_runner_proto_enumTypes[4]
}

func (x RunnerRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunnerRole.Descriptor instead.
func (RunnerRole) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{4}
}

type CreateRunnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runner name for humans
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The runner's kind
	//
	// We deliberately do not validate the input just yet to maintain backwards compatibility
	// with existing local apps.
	Kind RunnerKind  `protobuf:"varint,2,opt,name=kind,proto3,enum=gitpod.v1.RunnerKind" json:"kind,omitempty"`
	Spec *RunnerSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *CreateRunnerRequest) Reset() {
	*x = CreateRunnerRequest{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRunnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunnerRequest) ProtoMessage() {}

func (x *CreateRunnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunnerRequest.ProtoReflect.Descriptor instead.
func (*CreateRunnerRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRunnerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRunnerRequest) GetKind() RunnerKind {
	if x != nil {
		return x.Kind
	}
	return RunnerKind_RUNNER_KIND_UNSPECIFIED
}

func (x *CreateRunnerRequest) GetSpec() *RunnerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type CreateRunnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runner      *Runner `protobuf:"bytes,1,opt,name=runner,proto3" json:"runner,omitempty"`
	AccessToken string  `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *CreateRunnerResponse) Reset() {
	*x = CreateRunnerResponse{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRunnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunnerResponse) ProtoMessage() {}

func (x *CreateRunnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunnerResponse.ProtoReflect.Descriptor instead.
func (*CreateRunnerResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRunnerResponse) GetRunner() *Runner {
	if x != nil {
		return x.Runner
	}
	return nil
}

func (x *CreateRunnerResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type GetRunnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
}

func (x *GetRunnerRequest) Reset() {
	*x = GetRunnerRequest{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunnerRequest) ProtoMessage() {}

func (x *GetRunnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunnerRequest.ProtoReflect.Descriptor instead.
func (*GetRunnerRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{2}
}

func (x *GetRunnerRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

type GetRunnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runner *Runner `protobuf:"bytes,1,opt,name=runner,proto3" json:"runner,omitempty"`
}

func (x *GetRunnerResponse) Reset() {
	*x = GetRunnerResponse{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunnerResponse) ProtoMessage() {}

func (x *GetRunnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunnerResponse.ProtoReflect.Descriptor instead.
func (*GetRunnerResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{3}
}

func (x *GetRunnerResponse) GetRunner() *Runner {
	if x != nil {
		return x.Runner
	}
	return nil
}

type ListRunnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing runners
	Pagination *PaginationRequest         `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filter     *ListRunnersRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListRunnersRequest) Reset() {
	*x = ListRunnersRequest{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnersRequest) ProtoMessage() {}

func (x *ListRunnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnersRequest.ProtoReflect.Descriptor instead.
func (*ListRunnersRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{4}
}

func (x *ListRunnersRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRunnersRequest) GetFilter() *ListRunnersRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListRunnersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing runners
	Pagination *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The runners registered in the scope
	Runners []*Runner `protobuf:"bytes,2,rep,name=runners,proto3" json:"runners,omitempty"`
}

func (x *ListRunnersResponse) Reset() {
	*x = ListRunnersResponse{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnersResponse) ProtoMessage() {}

func (x *ListRunnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnersResponse.ProtoReflect.Descriptor instead.
func (*ListRunnersResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{5}
}

func (x *ListRunnersResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRunnersResponse) GetRunners() []*Runner {
	if x != nil {
		return x.Runners
	}
	return nil
}

type UpdateRunnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// runner_id specifies which runner to be updated.
	//
	// +required
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// The runner's name which is shown to users
	Name *string                   `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Spec *UpdateRunnerRequest_Spec `protobuf:"bytes,3,opt,name=spec,proto3,oneof" json:"spec,omitempty"`
}

func (x *UpdateRunnerRequest) Reset() {
	*x = UpdateRunnerRequest{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRunnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerRequest) ProtoMessage() {}

func (x *UpdateRunnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerRequest.ProtoReflect.Descriptor instead.
func (*UpdateRunnerRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRunnerRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *UpdateRunnerRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateRunnerRequest) GetSpec() *UpdateRunnerRequest_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type UpdateRunnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRunnerResponse) Reset() {
	*x = UpdateRunnerResponse{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRunnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerResponse) ProtoMessage() {}

func (x *UpdateRunnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerResponse.ProtoReflect.Descriptor instead.
func (*UpdateRunnerResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{7}
}

type DeleteRunnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// force indicates whether the runner should be deleted forcefully.
	// When force deleting a Runner, all Environments on the runner are also force deleted and
	// regular Runner lifecycle is not respected.
	// Force deleting can result in data loss.
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteRunnerRequest) Reset() {
	*x = DeleteRunnerRequest{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRunnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRunnerRequest) ProtoMessage() {}

func (x *DeleteRunnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRunnerRequest.ProtoReflect.Descriptor instead.
func (*DeleteRunnerRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRunnerRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *DeleteRunnerRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteRunnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRunnerResponse) Reset() {
	*x = DeleteRunnerResponse{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRunnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRunnerResponse) ProtoMessage() {}

func (x *DeleteRunnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRunnerResponse.ProtoReflect.Descriptor instead.
func (*DeleteRunnerResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{9}
}

type CreateRunnerTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
}

func (x *CreateRunnerTokenRequest) Reset() {
	*x = CreateRunnerTokenRequest{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRunnerTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunnerTokenRequest) ProtoMessage() {}

func (x *CreateRunnerTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunnerTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateRunnerTokenRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{10}
}

func (x *CreateRunnerTokenRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

type CreateRunnerTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *CreateRunnerTokenResponse) Reset() {
	*x = CreateRunnerTokenResponse{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRunnerTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunnerTokenResponse) ProtoMessage() {}

func (x *CreateRunnerTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunnerTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateRunnerTokenResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{11}
}

func (x *CreateRunnerTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type ParseContextURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId   string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	ContextUrl string `protobuf:"bytes,2,opt,name=context_url,json=contextUrl,proto3" json:"context_url,omitempty"`
}

func (x *ParseContextURLRequest) Reset() {
	*x = ParseContextURLRequest{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseContextURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseContextURLRequest) ProtoMessage() {}

func (x *ParseContextURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseContextURLRequest.ProtoReflect.Descriptor instead.
func (*ParseContextURLRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{12}
}

func (x *ParseContextURLRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *ParseContextURLRequest) GetContextUrl() string {
	if x != nil {
		return x.ContextUrl
	}
	return ""
}

type ParseContextURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalContextUrl string                              `protobuf:"bytes,1,opt,name=original_context_url,json=originalContextUrl,proto3" json:"original_context_url,omitempty"`
	Git                *ParseContextURLResponse_GitContext `protobuf:"bytes,2,opt,name=git,proto3" json:"git,omitempty"`
}

func (x *ParseContextURLResponse) Reset() {
	*x = ParseContextURLResponse{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseContextURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseContextURLResponse) ProtoMessage() {}

func (x *ParseContextURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseContextURLResponse.ProtoReflect.Descriptor instead.
func (*ParseContextURLResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{13}
}

func (x *ParseContextURLResponse) GetOriginalContextUrl() string {
	if x != nil {
		return x.OriginalContextUrl
	}
	return ""
}

func (x *ParseContextURLResponse) GetGit() *ParseContextURLResponse_GitContext {
	if x != nil {
		return x.Git
	}
	return nil
}

type ParseContextURLPreconditionFailureDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticationRequiredUrl string `protobuf:"bytes,1,opt,name=authentication_required_url,json=authenticationRequiredUrl,proto3" json:"authentication_required_url,omitempty"`
	ScmId                     string `protobuf:"bytes,2,opt,name=scm_id,json=scmId,proto3" json:"scm_id,omitempty"`
}

func (x *ParseContextURLPreconditionFailureDetails) Reset() {
	*x = ParseContextURLPreconditionFailureDetails{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseContextURLPreconditionFailureDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseContextURLPreconditionFailureDetails) ProtoMessage() {}

func (x *ParseContextURLPreconditionFailureDetails) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseContextURLPreconditionFailureDetails.ProtoReflect.Descriptor instead.
func (*ParseContextURLPreconditionFailureDetails) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{14}
}

func (x *ParseContextURLPreconditionFailureDetails) GetAuthenticationRequiredUrl() string {
	if x != nil {
		return x.AuthenticationRequiredUrl
	}
	return ""
}

func (x *ParseContextURLPreconditionFailureDetails) GetScmId() string {
	if x != nil {
		return x.ScmId
	}
	return ""
}

type CheckAuthenticationForHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	Host     string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *CheckAuthenticationForHostRequest) Reset() {
	*x = CheckAuthenticationForHostRequest{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckAuthenticationForHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAuthenticationForHostRequest) ProtoMessage() {}

func (x *CheckAuthenticationForHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAuthenticationForHostRequest.ProtoReflect.Descriptor instead.
func (*CheckAuthenticationForHostRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{15}
}

func (x *CheckAuthenticationForHostRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *CheckAuthenticationForHostRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type CheckAuthenticationForHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authenticated     bool   `protobuf:"varint,1,opt,name=authenticated,proto3" json:"authenticated,omitempty"`
	AuthenticationUrl string `protobuf:"bytes,2,opt,name=authentication_url,json=authenticationUrl,proto3" json:"authentication_url,omitempty"`
	PatSupported      bool   `protobuf:"varint,3,opt,name=pat_supported,json=patSupported,proto3" json:"pat_supported,omitempty"`
	ScmId             string `protobuf:"bytes,4,opt,name=scm_id,json=scmId,proto3" json:"scm_id,omitempty"`
}

func (x *CheckAuthenticationForHostResponse) Reset() {
	*x = CheckAuthenticationForHostResponse{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckAuthenticationForHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAuthenticationForHostResponse) ProtoMessage() {}

func (x *CheckAuthenticationForHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAuthenticationForHostResponse.ProtoReflect.Descriptor instead.
func (*CheckAuthenticationForHostResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{16}
}

func (x *CheckAuthenticationForHostResponse) GetAuthenticated() bool {
	if x != nil {
		return x.Authenticated
	}
	return false
}

func (x *CheckAuthenticationForHostResponse) GetAuthenticationUrl() string {
	if x != nil {
		return x.AuthenticationUrl
	}
	return ""
}

func (x *CheckAuthenticationForHostResponse) GetPatSupported() bool {
	if x != nil {
		return x.PatSupported
	}
	return false
}

func (x *CheckAuthenticationForHostResponse) GetScmId() string {
	if x != nil {
		return x.ScmId
	}
	return ""
}

// ListRunnerPoliciesRequest lists policies for a project.
type ListRunnerPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing project policies
	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// runner_id specifies the project identifier
	RunnerId string `protobuf:"bytes,2,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
}

func (x *ListRunnerPoliciesRequest) Reset() {
	*x = ListRunnerPoliciesRequest{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnerPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerPoliciesRequest) ProtoMessage() {}

func (x *ListRunnerPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListRunnerPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{17}
}

func (x *ListRunnerPoliciesRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRunnerPoliciesRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

type ListRunnerPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Policies   []*RunnerPolicy     `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *ListRunnerPoliciesResponse) Reset() {
	*x = ListRunnerPoliciesResponse{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnerPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnerPoliciesResponse) ProtoMessage() {}

func (x *ListRunnerPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnerPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListRunnerPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{18}
}

func (x *ListRunnerPoliciesResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRunnerPoliciesResponse) GetPolicies() []*RunnerPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// CreateRunnerPolicyRequest creates a Runner Policy.
type CreateRunnerPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// runner_id specifies the project identifier
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// group_id specifies the group_id identifier
	GroupId string     `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Role    RunnerRole `protobuf:"varint,3,opt,name=role,proto3,enum=gitpod.v1.RunnerRole" json:"role,omitempty"`
}

func (x *CreateRunnerPolicyRequest) Reset() {
	*x = CreateRunnerPolicyRequest{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRunnerPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunnerPolicyRequest) ProtoMessage() {}

func (x *CreateRunnerPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunnerPolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateRunnerPolicyRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{19}
}

func (x *CreateRunnerPolicyRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *CreateRunnerPolicyRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateRunnerPolicyRequest) GetRole() RunnerRole {
	if x != nil {
		return x.Role
	}
	return RunnerRole_RUNNER_ROLE_UNSPECIFIED
}

type CreateRunnerPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *RunnerPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *CreateRunnerPolicyResponse) Reset() {
	*x = CreateRunnerPolicyResponse{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRunnerPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunnerPolicyResponse) ProtoMessage() {}

func (x *CreateRunnerPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunnerPolicyResponse.ProtoReflect.Descriptor instead.
func (*CreateRunnerPolicyResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{20}
}

func (x *CreateRunnerPolicyResponse) GetPolicy() *RunnerPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

// UpdateRunnerPolicyRequest updates a Project Policy.
type UpdateRunnerPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// runner_id specifies the project identifier
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// group_id specifies the group_id identifier
	GroupId string     `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Role    RunnerRole `protobuf:"varint,3,opt,name=role,proto3,enum=gitpod.v1.RunnerRole" json:"role,omitempty"`
}

func (x *UpdateRunnerPolicyRequest) Reset() {
	*x = UpdateRunnerPolicyRequest{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRunnerPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerPolicyRequest) ProtoMessage() {}

func (x *UpdateRunnerPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateRunnerPolicyRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateRunnerPolicyRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *UpdateRunnerPolicyRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UpdateRunnerPolicyRequest) GetRole() RunnerRole {
	if x != nil {
		return x.Role
	}
	return RunnerRole_RUNNER_ROLE_UNSPECIFIED
}

type UpdateRunnerPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *RunnerPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *UpdateRunnerPolicyResponse) Reset() {
	*x = UpdateRunnerPolicyResponse{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRunnerPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerPolicyResponse) ProtoMessage() {}

func (x *UpdateRunnerPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateRunnerPolicyResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateRunnerPolicyResponse) GetPolicy() *RunnerPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

// DeleteRunnerPolicyRequest deletes a Project Policy.
type DeleteRunnerPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// runner_id specifies the project identifier
	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// group_id specifies the group_id identifier
	GroupId string `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *DeleteRunnerPolicyRequest) Reset() {
	*x = DeleteRunnerPolicyRequest{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRunnerPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRunnerPolicyRequest) ProtoMessage() {}

func (x *DeleteRunnerPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRunnerPolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteRunnerPolicyRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteRunnerPolicyRequest) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *DeleteRunnerPolicyRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type DeleteRunnerPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRunnerPolicyResponse) Reset() {
	*x = DeleteRunnerPolicyResponse{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRunnerPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRunnerPolicyResponse) ProtoMessage() {}

func (x *DeleteRunnerPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRunnerPolicyResponse.ProtoReflect.Descriptor instead.
func (*DeleteRunnerPolicyResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{24}
}

type Runner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerId string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// Time when the Runner was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Time when the Runner was last udpated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The runner's name which is shown to users
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The runner's specification
	Spec *RunnerSpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	// The runner's status
	Status *RunnerStatus `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// creator is the identity of the creator of the environment
	Creator *Subject `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	// The runner's kind
	Kind RunnerKind `protobuf:"varint,8,opt,name=kind,proto3,enum=gitpod.v1.RunnerKind" json:"kind,omitempty"`
}

func (x *Runner) Reset() {
	*x = Runner{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Runner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runner) ProtoMessage() {}

func (x *Runner) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runner.ProtoReflect.Descriptor instead.
func (*Runner) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{25}
}

func (x *Runner) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *Runner) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Runner) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Runner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Runner) GetSpec() *RunnerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Runner) GetStatus() *RunnerStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Runner) GetCreator() *Subject {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *Runner) GetKind() RunnerKind {
	if x != nil {
		return x.Kind
	}
	return RunnerKind_RUNNER_KIND_UNSPECIFIED
}

type RunnerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredPhase RunnerPhase `protobuf:"varint,1,opt,name=desired_phase,json=desiredPhase,proto3,enum=gitpod.v1.RunnerPhase" json:"desired_phase,omitempty"`
	// The runner's configuration
	Configuration *RunnerConfiguration `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *RunnerSpec) Reset() {
	*x = RunnerSpec{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerSpec) ProtoMessage() {}

func (x *RunnerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerSpec.ProtoReflect.Descriptor instead.
func (*RunnerSpec) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{26}
}

func (x *RunnerSpec) GetDesiredPhase() RunnerPhase {
	if x != nil {
		return x.DesiredPhase
	}
	return RunnerPhase_RUNNER_PHASE_UNSPECIFIED
}

func (x *RunnerSpec) GetConfiguration() *RunnerConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type RunnerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Region to deploy the runner in, if applicable.
	// This is mainly used for remote runners, and is only a hint. The runner may be
	// deployed in a different region. See the runner's status for the actual region.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// The release channel the runner is on
	ReleaseChannel RunnerReleaseChannel `protobuf:"varint,2,opt,name=release_channel,json=releaseChannel,proto3,enum=gitpod.v1.RunnerReleaseChannel" json:"release_channel,omitempty"`
	// auto_update indicates whether the runner should automatically update itself.
	AutoUpdate bool `protobuf:"varint,3,opt,name=auto_update,json=autoUpdate,proto3" json:"auto_update,omitempty"`
}

func (x *RunnerConfiguration) Reset() {
	*x = RunnerConfiguration{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerConfiguration) ProtoMessage() {}

func (x *RunnerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerConfiguration.ProtoReflect.Descriptor instead.
func (*RunnerConfiguration) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{27}
}

func (x *RunnerConfiguration) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RunnerConfiguration) GetReleaseChannel() RunnerReleaseChannel {
	if x != nil {
		return x.ReleaseChannel
	}
	return RunnerReleaseChannel_RUNNER_RELEASE_CHANNEL_UNSPECIFIED
}

func (x *RunnerConfiguration) GetAutoUpdate() bool {
	if x != nil {
		return x.AutoUpdate
	}
	return false
}

// RunnerStatus represents the status of a runner
type RunnerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time when the status was last udpated.
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	SystemDetails string                 `protobuf:"bytes,3,opt,name=system_details,json=systemDetails,proto3" json:"system_details,omitempty"`
	// The runner's reported phase
	Phase  RunnerPhase `protobuf:"varint,4,opt,name=phase,proto3,enum=gitpod.v1.RunnerPhase" json:"phase,omitempty"`
	LogUrl string      `protobuf:"bytes,5,opt,name=log_url,json=logUrl,proto3" json:"log_url,omitempty"`
	// The runner's reported message which is shown to users.
	// This message adds more context to the runner's phase.
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// region is the region the runner is running in, if applicable.
	Region string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	// additional_info contains additional information about the runner,
	// e.g. a CloudFormation stack URL.
	AdditionalInfo []*FieldValue `protobuf:"bytes,8,rep,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
	// capabilities is a list of capabilities the runner supports.
	Capabilities []RunnerCapability `protobuf:"varint,9,rep,packed,name=capabilities,proto3,enum=gitpod.v1.RunnerCapability" json:"capabilities,omitempty"`
}

func (x *RunnerStatus) Reset() {
	*x = RunnerStatus{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerStatus) ProtoMessage() {}

func (x *RunnerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerStatus.ProtoReflect.Descriptor instead.
func (*RunnerStatus) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{28}
}

func (x *RunnerStatus) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *RunnerStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RunnerStatus) GetSystemDetails() string {
	if x != nil {
		return x.SystemDetails
	}
	return ""
}

func (x *RunnerStatus) GetPhase() RunnerPhase {
	if x != nil {
		return x.Phase
	}
	return RunnerPhase_RUNNER_PHASE_UNSPECIFIED
}

func (x *RunnerStatus) GetLogUrl() string {
	if x != nil {
		return x.LogUrl
	}
	return ""
}

func (x *RunnerStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RunnerStatus) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RunnerStatus) GetAdditionalInfo() []*FieldValue {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

func (x *RunnerStatus) GetCapabilities() []RunnerCapability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type RunnerPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// role is the role assigned to the group
	Role RunnerRole `protobuf:"varint,2,opt,name=role,proto3,enum=gitpod.v1.RunnerRole" json:"role,omitempty"`
}

func (x *RunnerPolicy) Reset() {
	*x = RunnerPolicy{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerPolicy) ProtoMessage() {}

func (x *RunnerPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerPolicy.ProtoReflect.Descriptor instead.
func (*RunnerPolicy) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{29}
}

func (x *RunnerPolicy) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RunnerPolicy) GetRole() RunnerRole {
	if x != nil {
		return x.Role
	}
	return RunnerRole_RUNNER_ROLE_UNSPECIFIED
}

type ListRunnersRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// creator_ids filters the response to only runner created by specified users
	CreatorIds []string `protobuf:"bytes,1,rep,name=creator_ids,json=creatorIds,proto3" json:"creator_ids,omitempty"`
	// kinds filters the response to only runners of the specified kinds
	Kinds []RunnerKind `protobuf:"varint,2,rep,packed,name=kinds,proto3,enum=gitpod.v1.RunnerKind" json:"kinds,omitempty"`
}

func (x *ListRunnersRequest_Filter) Reset() {
	*x = ListRunnersRequest_Filter{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunnersRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunnersRequest_Filter) ProtoMessage() {}

func (x *ListRunnersRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunnersRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListRunnersRequest_Filter) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListRunnersRequest_Filter) GetCreatorIds() []string {
	if x != nil {
		return x.CreatorIds
	}
	return nil
}

func (x *ListRunnersRequest_Filter) GetKinds() []RunnerKind {
	if x != nil {
		return x.Kinds
	}
	return nil
}

type UpdateRunnerRequest_RunnerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The release channel the runner is on
	ReleaseChannel *RunnerReleaseChannel `protobuf:"varint,1,opt,name=release_channel,json=releaseChannel,proto3,enum=gitpod.v1.RunnerReleaseChannel,oneof" json:"release_channel,omitempty"`
	// auto_update indicates whether the runner should automatically update itself.
	AutoUpdate *bool `protobuf:"varint,2,opt,name=auto_update,json=autoUpdate,proto3,oneof" json:"auto_update,omitempty"`
}

func (x *UpdateRunnerRequest_RunnerConfiguration) Reset() {
	*x = UpdateRunnerRequest_RunnerConfiguration{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRunnerRequest_RunnerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerRequest_RunnerConfiguration) ProtoMessage() {}

func (x *UpdateRunnerRequest_RunnerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerRequest_RunnerConfiguration.ProtoReflect.Descriptor instead.
func (*UpdateRunnerRequest_RunnerConfiguration) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UpdateRunnerRequest_RunnerConfiguration) GetReleaseChannel() RunnerReleaseChannel {
	if x != nil && x.ReleaseChannel != nil {
		return *x.ReleaseChannel
	}
	return RunnerReleaseChannel_RUNNER_RELEASE_CHANNEL_UNSPECIFIED
}

func (x *UpdateRunnerRequest_RunnerConfiguration) GetAutoUpdate() bool {
	if x != nil && x.AutoUpdate != nil {
		return *x.AutoUpdate
	}
	return false
}

type UpdateRunnerRequest_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration *UpdateRunnerRequest_RunnerConfiguration `protobuf:"bytes,1,opt,name=configuration,proto3,oneof" json:"configuration,omitempty"`
	// desired_phase can currently only be updated on local-configuration runners,
	// to toggle whether local runners are allowed for running environments in the
	// organization.
	// Set to:
	//   - ACTIVE to enable local runners.
	//   - INACTIVE to disable all local runners. Existing local runners and their
	//     environments will stop, and cannot be started again until the desired_phase
	//     is set to ACTIVE. Use this carefully, as it will affect all users in the
	//     organization who use local runners.
	DesiredPhase *RunnerPhase `protobuf:"varint,2,opt,name=desired_phase,json=desiredPhase,proto3,enum=gitpod.v1.RunnerPhase,oneof" json:"desired_phase,omitempty"`
}

func (x *UpdateRunnerRequest_Spec) Reset() {
	*x = UpdateRunnerRequest_Spec{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRunnerRequest_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRunnerRequest_Spec) ProtoMessage() {}

func (x *UpdateRunnerRequest_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRunnerRequest_Spec.ProtoReflect.Descriptor instead.
func (*UpdateRunnerRequest_Spec) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{6, 1}
}

func (x *UpdateRunnerRequest_Spec) GetConfiguration() *UpdateRunnerRequest_RunnerConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *UpdateRunnerRequest_Spec) GetDesiredPhase() RunnerPhase {
	if x != nil && x.DesiredPhase != nil {
		return *x.DesiredPhase
	}
	return RunnerPhase_RUNNER_PHASE_UNSPECIFIED
}

type ParseContextURLResponse_GitContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloneUrl          string `protobuf:"bytes,1,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	Branch            string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit            string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	Host              string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Owner             string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Repo              string `protobuf:"bytes,6,opt,name=repo,proto3" json:"repo,omitempty"`
	UpstreamRemoteUrl string `protobuf:"bytes,7,opt,name=upstream_remote_url,json=upstreamRemoteUrl,proto3" json:"upstream_remote_url,omitempty"`
}

func (x *ParseContextURLResponse_GitContext) Reset() {
	*x = ParseContextURLResponse_GitContext{}
	mi := &file_gitpod_v1_runner_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseContextURLResponse_GitContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseContextURLResponse_GitContext) ProtoMessage() {}

func (x *ParseContextURLResponse_GitContext) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_runner_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseContextURLResponse_GitContext.ProtoReflect.Descriptor instead.
func (*ParseContextURLResponse_GitContext) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_runner_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ParseContextURLResponse_GitContext) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *ParseContextURLResponse_GitContext) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ParseContextURLResponse_GitContext) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *ParseContextURLResponse_GitContext) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ParseContextURLResponse_GitContext) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ParseContextURLResponse_GitContext) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *ParseContextURLResponse_GitContext) GetUpstreamRemoteUrl() string {
	if x != nil {
		return x.UpstreamRemoteUrl
	}
	return ""
}

var File_gitpod_v1_runner_proto protoreflect.FileDescriptor

var file_gitpod_v1_runner_proto_rawDesc = []byte{
	0x0a, 0x16, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a,
	0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x7f, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x29, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x64, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x48, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69,
	0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xb9, 0x02, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xa6,
	0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x29,
	0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0xa2, 0xab, 0x1e, 0x14, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x05, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x23, 0xba, 0x48, 0x0e,
	0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0xa2, 0xab,
	0x1e, 0x0e, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x73,
	0x52, 0x05, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xbe, 0x04, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52,
	0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x03,
	0x18, 0x7f, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x48, 0x01, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x88, 0x01, 0x01, 0x1a, 0xae, 0x01, 0x0a, 0x13,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0xcb, 0x01, 0x0a,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x48, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22, 0x16, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x50, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x3e, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x79, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xd6, 0x02, 0x0a,
	0x17, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x52, 0x4c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x03, 0x67, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x67, 0x69, 0x74, 0x1a, 0xc7, 0x01, 0x0a, 0x0a,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x29, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x52, 0x4c, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x63, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6d, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x21, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b,
	0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x22, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x61,
	0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x63,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6d, 0x49,
	0x64, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64,
	0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x69, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xaf, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69,
	0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0a, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x69, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0a, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x69, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf5, 0x02,
	0x0a, 0x06, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xa2, 0xab, 0x1e,
	0x0b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x84, 0x03, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x6f, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x0c, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x0a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x69, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x2a, 0x7d, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x55, 0x4e,
	0x4e, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x84, 0x01, 0x0a, 0x14, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x26, 0x0a, 0x22, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x55, 0x4e, 0x4e, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x55,
	0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10, 0x02, 0x2a, 0xc9, 0x01,
	0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x55, 0x4e,
	0x4e, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x44,
	0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x69, 0x0a, 0x10, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x1d, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x32, 0x0a, 0x2e, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x5f, 0x53, 0x43, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x32, 0xfa, 0x08, 0x0a,
	0x0d, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1e,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1b,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x51,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x51, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x21, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x63, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x69,
	0x6f, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitpod_v1_runner_proto_rawDescOnce sync.Once
	file_gitpod_v1_runner_proto_rawDescData = file_gitpod_v1_runner_proto_rawDesc
)

func file_gitpod_v1_runner_proto_rawDescGZIP() []byte {
	file_gitpod_v1_runner_proto_rawDescOnce.Do(func() {
		file_gitpod_v1_runner_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitpod_v1_runner_proto_rawDescData)
	})
	return file_gitpod_v1_runner_proto_rawDescData
}

var file_gitpod_v1_runner_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_gitpod_v1_runner_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_gitpod_v1_runner_proto_goTypes = []any{
	(RunnerKind)(0),                                   // 0: gitpod.v1.RunnerKind
	(RunnerReleaseChannel)(0),                         // 1: gitpod.v1.RunnerReleaseChannel
	(RunnerPhase)(0),                                  // 2: gitpod.v1.RunnerPhase
	(RunnerCapability)(0),                             // 3: gitpod.v1.RunnerCapability
	(RunnerRole)(0),                                   // 4: gitpod.v1.RunnerRole
	(*CreateRunnerRequest)(nil),                       // 5: gitpod.v1.CreateRunnerRequest
	(*CreateRunnerResponse)(nil),                      // 6: gitpod.v1.CreateRunnerResponse
	(*GetRunnerRequest)(nil),                          // 7: gitpod.v1.GetRunnerRequest
	(*GetRunnerResponse)(nil),                         // 8: gitpod.v1.GetRunnerResponse
	(*ListRunnersRequest)(nil),                        // 9: gitpod.v1.ListRunnersRequest
	(*ListRunnersResponse)(nil),                       // 10: gitpod.v1.ListRunnersResponse
	(*UpdateRunnerRequest)(nil),                       // 11: gitpod.v1.UpdateRunnerRequest
	(*UpdateRunnerResponse)(nil),                      // 12: gitpod.v1.UpdateRunnerResponse
	(*DeleteRunnerRequest)(nil),                       // 13: gitpod.v1.DeleteRunnerRequest
	(*DeleteRunnerResponse)(nil),                      // 14: gitpod.v1.DeleteRunnerResponse
	(*CreateRunnerTokenRequest)(nil),                  // 15: gitpod.v1.CreateRunnerTokenRequest
	(*CreateRunnerTokenResponse)(nil),                 // 16: gitpod.v1.CreateRunnerTokenResponse
	(*ParseContextURLRequest)(nil),                    // 17: gitpod.v1.ParseContextURLRequest
	(*ParseContextURLResponse)(nil),                   // 18: gitpod.v1.ParseContextURLResponse
	(*ParseContextURLPreconditionFailureDetails)(nil), // 19: gitpod.v1.ParseContextURLPreconditionFailureDetails
	(*CheckAuthenticationForHostRequest)(nil),         // 20: gitpod.v1.CheckAuthenticationForHostRequest
	(*CheckAuthenticationForHostResponse)(nil),        // 21: gitpod.v1.CheckAuthenticationForHostResponse
	(*ListRunnerPoliciesRequest)(nil),                 // 22: gitpod.v1.ListRunnerPoliciesRequest
	(*ListRunnerPoliciesResponse)(nil),                // 23: gitpod.v1.ListRunnerPoliciesResponse
	(*CreateRunnerPolicyRequest)(nil),                 // 24: gitpod.v1.CreateRunnerPolicyRequest
	(*CreateRunnerPolicyResponse)(nil),                // 25: gitpod.v1.CreateRunnerPolicyResponse
	(*UpdateRunnerPolicyRequest)(nil),                 // 26: gitpod.v1.UpdateRunnerPolicyRequest
	(*UpdateRunnerPolicyResponse)(nil),                // 27: gitpod.v1.UpdateRunnerPolicyResponse
	(*DeleteRunnerPolicyRequest)(nil),                 // 28: gitpod.v1.DeleteRunnerPolicyRequest
	(*DeleteRunnerPolicyResponse)(nil),                // 29: gitpod.v1.DeleteRunnerPolicyResponse
	(*Runner)(nil),                                    // 30: gitpod.v1.Runner
	(*RunnerSpec)(nil),                                // 31: gitpod.v1.RunnerSpec
	(*RunnerConfiguration)(nil),                       // 32: gitpod.v1.RunnerConfiguration
	(*RunnerStatus)(nil),                              // 33: gitpod.v1.RunnerStatus
	(*RunnerPolicy)(nil),                              // 34: gitpod.v1.RunnerPolicy
	(*ListRunnersRequest_Filter)(nil),                 // 35: gitpod.v1.ListRunnersRequest.Filter
	(*UpdateRunnerRequest_RunnerConfiguration)(nil),   // 36: gitpod.v1.UpdateRunnerRequest.RunnerConfiguration
	(*UpdateRunnerRequest_Spec)(nil),                  // 37: gitpod.v1.UpdateRunnerRequest.Spec
	(*ParseContextURLResponse_GitContext)(nil),        // 38: gitpod.v1.ParseContextURLResponse.GitContext
	(*PaginationRequest)(nil),                         // 39: gitpod.v1.PaginationRequest
	(*PaginationResponse)(nil),                        // 40: gitpod.v1.PaginationResponse
	(*timestamppb.Timestamp)(nil),                     // 41: google.protobuf.Timestamp
	(*Subject)(nil),                                   // 42: gitpod.v1.Subject
	(*FieldValue)(nil),                                // 43: gitpod.v1.FieldValue
}
var file_gitpod_v1_runner_proto_depIdxs = []int32{
	0,  // 0: gitpod.v1.CreateRunnerRequest.kind:type_name -> gitpod.v1.RunnerKind
	31, // 1: gitpod.v1.CreateRunnerRequest.spec:type_name -> gitpod.v1.RunnerSpec
	30, // 2: gitpod.v1.CreateRunnerResponse.runner:type_name -> gitpod.v1.Runner
	30, // 3: gitpod.v1.GetRunnerResponse.runner:type_name -> gitpod.v1.Runner
	39, // 4: gitpod.v1.ListRunnersRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	35, // 5: gitpod.v1.ListRunnersRequest.filter:type_name -> gitpod.v1.ListRunnersRequest.Filter
	40, // 6: gitpod.v1.ListRunnersResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	30, // 7: gitpod.v1.ListRunnersResponse.runners:type_name -> gitpod.v1.Runner
	37, // 8: gitpod.v1.UpdateRunnerRequest.spec:type_name -> gitpod.v1.UpdateRunnerRequest.Spec
	38, // 9: gitpod.v1.ParseContextURLResponse.git:type_name -> gitpod.v1.ParseContextURLResponse.GitContext
	39, // 10: gitpod.v1.ListRunnerPoliciesRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	40, // 11: gitpod.v1.ListRunnerPoliciesResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	34, // 12: gitpod.v1.ListRunnerPoliciesResponse.policies:type_name -> gitpod.v1.RunnerPolicy
	4,  // 13: gitpod.v1.CreateRunnerPolicyRequest.role:type_name -> gitpod.v1.RunnerRole
	34, // 14: gitpod.v1.CreateRunnerPolicyResponse.policy:type_name -> gitpod.v1.RunnerPolicy
	4,  // 15: gitpod.v1.UpdateRunnerPolicyRequest.role:type_name -> gitpod.v1.RunnerRole
	34, // 16: gitpod.v1.UpdateRunnerPolicyResponse.policy:type_name -> gitpod.v1.RunnerPolicy
	41, // 17: gitpod.v1.Runner.created_at:type_name -> google.protobuf.Timestamp
	41, // 18: gitpod.v1.Runner.updated_at:type_name -> google.protobuf.Timestamp
	31, // 19: gitpod.v1.Runner.spec:type_name -> gitpod.v1.RunnerSpec
	33, // 20: gitpod.v1.Runner.status:type_name -> gitpod.v1.RunnerStatus
	42, // 21: gitpod.v1.Runner.creator:type_name -> gitpod.v1.Subject
	0,  // 22: gitpod.v1.Runner.kind:type_name -> gitpod.v1.RunnerKind
	2,  // 23: gitpod.v1.RunnerSpec.desired_phase:type_name -> gitpod.v1.RunnerPhase
	32, // 24: gitpod.v1.RunnerSpec.configuration:type_name -> gitpod.v1.RunnerConfiguration
	1,  // 25: gitpod.v1.RunnerConfiguration.release_channel:type_name -> gitpod.v1.RunnerReleaseChannel
	41, // 26: gitpod.v1.RunnerStatus.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 27: gitpod.v1.RunnerStatus.phase:type_name -> gitpod.v1.RunnerPhase
	43, // 28: gitpod.v1.RunnerStatus.additional_info:type_name -> gitpod.v1.FieldValue
	3,  // 29: gitpod.v1.RunnerStatus.capabilities:type_name -> gitpod.v1.RunnerCapability
	4,  // 30: gitpod.v1.RunnerPolicy.role:type_name -> gitpod.v1.RunnerRole
	0,  // 31: gitpod.v1.ListRunnersRequest.Filter.kinds:type_name -> gitpod.v1.RunnerKind
	1,  // 32: gitpod.v1.UpdateRunnerRequest.RunnerConfiguration.release_channel:type_name -> gitpod.v1.RunnerReleaseChannel
	36, // 33: gitpod.v1.UpdateRunnerRequest.Spec.configuration:type_name -> gitpod.v1.UpdateRunnerRequest.RunnerConfiguration
	2,  // 34: gitpod.v1.UpdateRunnerRequest.Spec.desired_phase:type_name -> gitpod.v1.RunnerPhase
	5,  // 35: gitpod.v1.RunnerService.CreateRunner:input_type -> gitpod.v1.CreateRunnerRequest
	7,  // 36: gitpod.v1.RunnerService.GetRunner:input_type -> gitpod.v1.GetRunnerRequest
	9,  // 37: gitpod.v1.RunnerService.ListRunners:input_type -> gitpod.v1.ListRunnersRequest
	11, // 38: gitpod.v1.RunnerService.UpdateRunner:input_type -> gitpod.v1.UpdateRunnerRequest
	13, // 39: gitpod.v1.RunnerService.DeleteRunner:input_type -> gitpod.v1.DeleteRunnerRequest
	15, // 40: gitpod.v1.RunnerService.CreateRunnerToken:input_type -> gitpod.v1.CreateRunnerTokenRequest
	17, // 41: gitpod.v1.RunnerService.ParseContextURL:input_type -> gitpod.v1.ParseContextURLRequest
	20, // 42: gitpod.v1.RunnerService.CheckAuthenticationForHost:input_type -> gitpod.v1.CheckAuthenticationForHostRequest
	22, // 43: gitpod.v1.RunnerService.ListRunnerPolicies:input_type -> gitpod.v1.ListRunnerPoliciesRequest
	24, // 44: gitpod.v1.RunnerService.CreateRunnerPolicy:input_type -> gitpod.v1.CreateRunnerPolicyRequest
	26, // 45: gitpod.v1.RunnerService.UpdateRunnerPolicy:input_type -> gitpod.v1.UpdateRunnerPolicyRequest
	28, // 46: gitpod.v1.RunnerService.DeleteRunnerPolicy:input_type -> gitpod.v1.DeleteRunnerPolicyRequest
	6,  // 47: gitpod.v1.RunnerService.CreateRunner:output_type -> gitpod.v1.CreateRunnerResponse
	8,  // 48: gitpod.v1.RunnerService.GetRunner:output_type -> gitpod.v1.GetRunnerResponse
	10, // 49: gitpod.v1.RunnerService.ListRunners:output_type -> gitpod.v1.ListRunnersResponse
	12, // 50: gitpod.v1.RunnerService.UpdateRunner:output_type -> gitpod.v1.UpdateRunnerResponse
	14, // 51: gitpod.v1.RunnerService.DeleteRunner:output_type -> gitpod.v1.DeleteRunnerResponse
	16, // 52: gitpod.v1.RunnerService.CreateRunnerToken:output_type -> gitpod.v1.CreateRunnerTokenResponse
	18, // 53: gitpod.v1.RunnerService.ParseContextURL:output_type -> gitpod.v1.ParseContextURLResponse
	21, // 54: gitpod.v1.RunnerService.CheckAuthenticationForHost:output_type -> gitpod.v1.CheckAuthenticationForHostResponse
	23, // 55: gitpod.v1.RunnerService.ListRunnerPolicies:output_type -> gitpod.v1.ListRunnerPoliciesResponse
	25, // 56: gitpod.v1.RunnerService.CreateRunnerPolicy:output_type -> gitpod.v1.CreateRunnerPolicyResponse
	27, // 57: gitpod.v1.RunnerService.UpdateRunnerPolicy:output_type -> gitpod.v1.UpdateRunnerPolicyResponse
	29, // 58: gitpod.v1.RunnerService.DeleteRunnerPolicy:output_type -> gitpod.v1.DeleteRunnerPolicyResponse
	47, // [47:59] is the sub-list for method output_type
	35, // [35:47] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_gitpod_v1_runner_proto_init() }
func file_gitpod_v1_runner_proto_init() {
	if File_gitpod_v1_runner_proto != nil {
		return
	}
	file_gitpod_v1_identity_proto_init()
	file_gitpod_v1_pagination_proto_init()
	file_gitpod_v1_runner_configuration_proto_init()
	file_gitpod_v1_runner_proto_msgTypes[6].OneofWrappers = []any{}
	file_gitpod_v1_runner_proto_msgTypes[31].OneofWrappers = []any{}
	file_gitpod_v1_runner_proto_msgTypes[32].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitpod_v1_runner_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitpod_v1_runner_proto_goTypes,
		DependencyIndexes: file_gitpod_v1_runner_proto_depIdxs,
		EnumInfos:         file_gitpod_v1_runner_proto_enumTypes,
		MessageInfos:      file_gitpod_v1_runner_proto_msgTypes,
	}.Build()
	File_gitpod_v1_runner_proto = out.File
	file_gitpod_v1_runner_proto_rawDesc = nil
	file_gitpod_v1_runner_proto_goTypes = nil
	file_gitpod_v1_runner_proto_depIdxs = nil
}
