// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: gitpod/v1/environment.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/gitpod-io/flex-go/tools/logfields"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Admission level describes who can access an environment instance and its ports.
type AdmissionLevel int32

const (
	AdmissionLevel_ADMISSION_LEVEL_UNSPECIFIED AdmissionLevel = 0
	// ADMISSION_LEVEL_OWNER_ONLY means the environment can only be accessed using
	// the owner token
	AdmissionLevel_ADMISSION_LEVEL_OWNER_ONLY AdmissionLevel = 1
	// ADMISSION_LEVEL_EVERYONE means the environment (including ports) can be
	// accessed by everyone.
	AdmissionLevel_ADMISSION_LEVEL_EVERYONE AdmissionLevel = 2
)

// Enum value maps for AdmissionLevel.
var (
	AdmissionLevel_name = map[int32]string{
		0: "ADMISSION_LEVEL_UNSPECIFIED",
		1: "ADMISSION_LEVEL_OWNER_ONLY",
		2: "ADMISSION_LEVEL_EVERYONE",
	}
	AdmissionLevel_value = map[string]int32{
		"ADMISSION_LEVEL_UNSPECIFIED": 0,
		"ADMISSION_LEVEL_OWNER_ONLY":  1,
		"ADMISSION_LEVEL_EVERYONE":    2,
	}
)

func (x AdmissionLevel) Enum() *AdmissionLevel {
	p := new(AdmissionLevel)
	*p = x
	return p
}

func (x AdmissionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdmissionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_environment_proto_enumTypes[0].Descriptor()
}

func (AdmissionLevel) Type() protoreflect.EnumType {
	return &file_gitpod_v1_environment_proto_enumTypes[0]
}

func (x AdmissionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdmissionLevel.Descriptor instead.
func (AdmissionLevel) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{0}
}

type EnvironmentPhase int32

const (
	// Unknown indicates an issue within the environment manager in that it cannot
	// determine the actual phase of an environment. This phase is usually
	// accompanied by an error.
	EnvironmentPhase_ENVIRONMENT_PHASE_UNSPECIFIED EnvironmentPhase = 0
	// Creating means that the environment is first created. We organise the SCM credentials,
	// parse context URL if need be, and allocate the unit of compute.
	EnvironmentPhase_ENVIRONMENT_PHASE_CREATING EnvironmentPhase = 10
	// Starting means that the environment is currently being started. This includes
	// starting the unit of compute (machine), resolving secrets, setting up the Git config,
	// initiaing the content, and starting the devcontainer.
	EnvironmentPhase_ENVIRONMENT_PHASE_STARTING EnvironmentPhase = 20
	// Running means the environment is able to actively perform work, either by
	// serving a user through Theia, or as a headless environment.
	EnvironmentPhase_ENVIRONMENT_PHASE_RUNNING EnvironmentPhase = 40
	// Updating means the environment is currently being updated. This includes
	// content updates, devcontainer updates, secret updates and SSH public key updates.
	// This phase implies that the environment is running.
	EnvironmentPhase_ENVIRONMENT_PHASE_UPDATING EnvironmentPhase = 45
	// Stopping means that the environment is currently shutting down. It could go
	// to stopped every moment.
	EnvironmentPhase_ENVIRONMENT_PHASE_STOPPING EnvironmentPhase = 50
	// Stopped means the environment ended regularly because it was shut down.
	EnvironmentPhase_ENVIRONMENT_PHASE_STOPPED EnvironmentPhase = 60
	// Deleting means the environment is currently being deleted. It could go to
	// deleted any moment. This phase implies that the environment is stopped.
	EnvironmentPhase_ENVIRONMENT_PHASE_DELETING EnvironmentPhase = 70
	// Deleted means the environment was deleted and cannot be started again.
	// This phase implies that the environment is stopped.
	EnvironmentPhase_ENVIRONMENT_PHASE_DELETED EnvironmentPhase = 80
)

// Enum value maps for EnvironmentPhase.
var (
	EnvironmentPhase_name = map[int32]string{
		0:  "ENVIRONMENT_PHASE_UNSPECIFIED",
		10: "ENVIRONMENT_PHASE_CREATING",
		20: "ENVIRONMENT_PHASE_STARTING",
		40: "ENVIRONMENT_PHASE_RUNNING",
		45: "ENVIRONMENT_PHASE_UPDATING",
		50: "ENVIRONMENT_PHASE_STOPPING",
		60: "ENVIRONMENT_PHASE_STOPPED",
		70: "ENVIRONMENT_PHASE_DELETING",
		80: "ENVIRONMENT_PHASE_DELETED",
	}
	EnvironmentPhase_value = map[string]int32{
		"ENVIRONMENT_PHASE_UNSPECIFIED": 0,
		"ENVIRONMENT_PHASE_CREATING":    10,
		"ENVIRONMENT_PHASE_STARTING":    20,
		"ENVIRONMENT_PHASE_RUNNING":     40,
		"ENVIRONMENT_PHASE_UPDATING":    45,
		"ENVIRONMENT_PHASE_STOPPING":    50,
		"ENVIRONMENT_PHASE_STOPPED":     60,
		"ENVIRONMENT_PHASE_DELETING":    70,
		"ENVIRONMENT_PHASE_DELETED":     80,
	}
)

func (x EnvironmentPhase) Enum() *EnvironmentPhase {
	p := new(EnvironmentPhase)
	*p = x
	return p
}

func (x EnvironmentPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvironmentPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_environment_proto_enumTypes[1].Descriptor()
}

func (EnvironmentPhase) Type() protoreflect.EnumType {
	return &file_gitpod_v1_environment_proto_enumTypes[1]
}

func (x EnvironmentPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvironmentPhase.Descriptor instead.
func (EnvironmentPhase) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{1}
}

type EnvironmentStatus_ContentPhase int32

const (
	EnvironmentStatus_CONTENT_PHASE_UNSPECIFIED  EnvironmentStatus_ContentPhase = 0
	EnvironmentStatus_CONTENT_PHASE_CREATING     EnvironmentStatus_ContentPhase = 10
	EnvironmentStatus_CONTENT_PHASE_INITIALIZING EnvironmentStatus_ContentPhase = 20
	EnvironmentStatus_CONTENT_PHASE_READY        EnvironmentStatus_ContentPhase = 30
	EnvironmentStatus_CONTENT_PHASE_UPDATING     EnvironmentStatus_ContentPhase = 35
	EnvironmentStatus_CONTENT_PHASE_FAILED       EnvironmentStatus_ContentPhase = 40
)

// Enum value maps for EnvironmentStatus_ContentPhase.
var (
	EnvironmentStatus_ContentPhase_name = map[int32]string{
		0:  "CONTENT_PHASE_UNSPECIFIED",
		10: "CONTENT_PHASE_CREATING",
		20: "CONTENT_PHASE_INITIALIZING",
		30: "CONTENT_PHASE_READY",
		35: "CONTENT_PHASE_UPDATING",
		40: "CONTENT_PHASE_FAILED",
	}
	EnvironmentStatus_ContentPhase_value = map[string]int32{
		"CONTENT_PHASE_UNSPECIFIED":  0,
		"CONTENT_PHASE_CREATING":     10,
		"CONTENT_PHASE_INITIALIZING": 20,
		"CONTENT_PHASE_READY":        30,
		"CONTENT_PHASE_UPDATING":     35,
		"CONTENT_PHASE_FAILED":       40,
	}
)

func (x EnvironmentStatus_ContentPhase) Enum() *EnvironmentStatus_ContentPhase {
	p := new(EnvironmentStatus_ContentPhase)
	*p = x
	return p
}

func (x EnvironmentStatus_ContentPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvironmentStatus_ContentPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_environment_proto_enumTypes[2].Descriptor()
}

func (EnvironmentStatus_ContentPhase) Type() protoreflect.EnumType {
	return &file_gitpod_v1_environment_proto_enumTypes[2]
}

func (x EnvironmentStatus_ContentPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvironmentStatus_ContentPhase.Descriptor instead.
func (EnvironmentStatus_ContentPhase) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 0}
}

type EnvironmentStatus_Machine_Phase int32

const (
	EnvironmentStatus_Machine_PHASE_UNSPECIFIED EnvironmentStatus_Machine_Phase = 0
	EnvironmentStatus_Machine_PHASE_CREATING    EnvironmentStatus_Machine_Phase = 10
	EnvironmentStatus_Machine_PHASE_STARTING    EnvironmentStatus_Machine_Phase = 20
	EnvironmentStatus_Machine_PHASE_RUNNING     EnvironmentStatus_Machine_Phase = 30
	EnvironmentStatus_Machine_PHASE_STOPPING    EnvironmentStatus_Machine_Phase = 40
	EnvironmentStatus_Machine_PHASE_STOPPED     EnvironmentStatus_Machine_Phase = 50
	EnvironmentStatus_Machine_PHASE_DELETING    EnvironmentStatus_Machine_Phase = 60
	EnvironmentStatus_Machine_PHASE_DELETED     EnvironmentStatus_Machine_Phase = 70
)

// Enum value maps for EnvironmentStatus_Machine_Phase.
var (
	EnvironmentStatus_Machine_Phase_name = map[int32]string{
		0:  "PHASE_UNSPECIFIED",
		10: "PHASE_CREATING",
		20: "PHASE_STARTING",
		30: "PHASE_RUNNING",
		40: "PHASE_STOPPING",
		50: "PHASE_STOPPED",
		60: "PHASE_DELETING",
		70: "PHASE_DELETED",
	}
	EnvironmentStatus_Machine_Phase_value = map[string]int32{
		"PHASE_UNSPECIFIED": 0,
		"PHASE_CREATING":    10,
		"PHASE_STARTING":    20,
		"PHASE_RUNNING":     30,
		"PHASE_STOPPING":    40,
		"PHASE_STOPPED":     50,
		"PHASE_DELETING":    60,
		"PHASE_DELETED":     70,
	}
)

func (x EnvironmentStatus_Machine_Phase) Enum() *EnvironmentStatus_Machine_Phase {
	p := new(EnvironmentStatus_Machine_Phase)
	*p = x
	return p
}

func (x EnvironmentStatus_Machine_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvironmentStatus_Machine_Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_environment_proto_enumTypes[3].Descriptor()
}

func (EnvironmentStatus_Machine_Phase) Type() protoreflect.EnumType {
	return &file_gitpod_v1_environment_proto_enumTypes[3]
}

func (x EnvironmentStatus_Machine_Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvironmentStatus_Machine_Phase.Descriptor instead.
func (EnvironmentStatus_Machine_Phase) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 3, 0}
}

type EnvironmentStatus_DevContainer_Phase int32

const (
	EnvironmentStatus_DevContainer_PHASE_UNSPECIFIED EnvironmentStatus_DevContainer_Phase = 0
	EnvironmentStatus_DevContainer_PHASE_CREATING    EnvironmentStatus_DevContainer_Phase = 10
	EnvironmentStatus_DevContainer_PHASE_RUNNING     EnvironmentStatus_DevContainer_Phase = 20
	EnvironmentStatus_DevContainer_PHASE_STOPPED     EnvironmentStatus_DevContainer_Phase = 30
	EnvironmentStatus_DevContainer_PHASE_FAILED      EnvironmentStatus_DevContainer_Phase = 40
)

// Enum value maps for EnvironmentStatus_DevContainer_Phase.
var (
	EnvironmentStatus_DevContainer_Phase_name = map[int32]string{
		0:  "PHASE_UNSPECIFIED",
		10: "PHASE_CREATING",
		20: "PHASE_RUNNING",
		30: "PHASE_STOPPED",
		40: "PHASE_FAILED",
	}
	EnvironmentStatus_DevContainer_Phase_value = map[string]int32{
		"PHASE_UNSPECIFIED": 0,
		"PHASE_CREATING":    10,
		"PHASE_RUNNING":     20,
		"PHASE_STOPPED":     30,
		"PHASE_FAILED":      40,
	}
)

func (x EnvironmentStatus_DevContainer_Phase) Enum() *EnvironmentStatus_DevContainer_Phase {
	p := new(EnvironmentStatus_DevContainer_Phase)
	*p = x
	return p
}

func (x EnvironmentStatus_DevContainer_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvironmentStatus_DevContainer_Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_environment_proto_enumTypes[4].Descriptor()
}

func (EnvironmentStatus_DevContainer_Phase) Type() protoreflect.EnumType {
	return &file_gitpod_v1_environment_proto_enumTypes[4]
}

func (x EnvironmentStatus_DevContainer_Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvironmentStatus_DevContainer_Phase.Descriptor instead.
func (EnvironmentStatus_DevContainer_Phase) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 6, 0}
}

type EnvironmentStatus_DevContainer_Presence int32

const (
	EnvironmentStatus_DevContainer_PRESENCE_UNSPECIFIED EnvironmentStatus_DevContainer_Presence = 0
	EnvironmentStatus_DevContainer_PRESENCE_GENERATED   EnvironmentStatus_DevContainer_Presence = 1
	EnvironmentStatus_DevContainer_PRESENCE_DISCOVERED  EnvironmentStatus_DevContainer_Presence = 2
	EnvironmentStatus_DevContainer_PRESENCE_SPECIFIED   EnvironmentStatus_DevContainer_Presence = 3
)

// Enum value maps for EnvironmentStatus_DevContainer_Presence.
var (
	EnvironmentStatus_DevContainer_Presence_name = map[int32]string{
		0: "PRESENCE_UNSPECIFIED",
		1: "PRESENCE_GENERATED",
		2: "PRESENCE_DISCOVERED",
		3: "PRESENCE_SPECIFIED",
	}
	EnvironmentStatus_DevContainer_Presence_value = map[string]int32{
		"PRESENCE_UNSPECIFIED": 0,
		"PRESENCE_GENERATED":   1,
		"PRESENCE_DISCOVERED":  2,
		"PRESENCE_SPECIFIED":   3,
	}
)

func (x EnvironmentStatus_DevContainer_Presence) Enum() *EnvironmentStatus_DevContainer_Presence {
	p := new(EnvironmentStatus_DevContainer_Presence)
	*p = x
	return p
}

func (x EnvironmentStatus_DevContainer_Presence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvironmentStatus_DevContainer_Presence) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_environment_proto_enumTypes[5].Descriptor()
}

func (EnvironmentStatus_DevContainer_Presence) Type() protoreflect.EnumType {
	return &file_gitpod_v1_environment_proto_enumTypes[5]
}

func (x EnvironmentStatus_DevContainer_Presence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvironmentStatus_DevContainer_Presence.Descriptor instead.
func (EnvironmentStatus_DevContainer_Presence) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 6, 1}
}

type EnvironmentStatus_RunnerACK_StatusCode int32

const (
	EnvironmentStatus_RunnerACK_STATUS_CODE_UNSPECIFIED         EnvironmentStatus_RunnerACK_StatusCode = 0
	EnvironmentStatus_RunnerACK_STATUS_CODE_OK                  EnvironmentStatus_RunnerACK_StatusCode = 1
	EnvironmentStatus_RunnerACK_STATUS_CODE_INVALID_RESOURCE    EnvironmentStatus_RunnerACK_StatusCode = 2
	EnvironmentStatus_RunnerACK_STATUS_CODE_FAILED_PRECONDITION EnvironmentStatus_RunnerACK_StatusCode = 3
)

// Enum value maps for EnvironmentStatus_RunnerACK_StatusCode.
var (
	EnvironmentStatus_RunnerACK_StatusCode_name = map[int32]string{
		0: "STATUS_CODE_UNSPECIFIED",
		1: "STATUS_CODE_OK",
		2: "STATUS_CODE_INVALID_RESOURCE",
		3: "STATUS_CODE_FAILED_PRECONDITION",
	}
	EnvironmentStatus_RunnerACK_StatusCode_value = map[string]int32{
		"STATUS_CODE_UNSPECIFIED":         0,
		"STATUS_CODE_OK":                  1,
		"STATUS_CODE_INVALID_RESOURCE":    2,
		"STATUS_CODE_FAILED_PRECONDITION": 3,
	}
)

func (x EnvironmentStatus_RunnerACK_StatusCode) Enum() *EnvironmentStatus_RunnerACK_StatusCode {
	p := new(EnvironmentStatus_RunnerACK_StatusCode)
	*p = x
	return p
}

func (x EnvironmentStatus_RunnerACK_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvironmentStatus_RunnerACK_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_environment_proto_enumTypes[6].Descriptor()
}

func (EnvironmentStatus_RunnerACK_StatusCode) Type() protoreflect.EnumType {
	return &file_gitpod_v1_environment_proto_enumTypes[6]
}

func (x EnvironmentStatus_RunnerACK_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvironmentStatus_RunnerACK_StatusCode.Descriptor instead.
func (EnvironmentStatus_RunnerACK_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 7, 0}
}

type EnvironmentStatus_AutomationsFile_Presence int32

const (
	EnvironmentStatus_AutomationsFile_PRESENCE_UNSPECIFIED EnvironmentStatus_AutomationsFile_Presence = 0
	EnvironmentStatus_AutomationsFile_PRESENCE_ABSENT      EnvironmentStatus_AutomationsFile_Presence = 1
	EnvironmentStatus_AutomationsFile_PRESENCE_DISCOVERED  EnvironmentStatus_AutomationsFile_Presence = 2
	EnvironmentStatus_AutomationsFile_PRESENCE_SPECIFIED   EnvironmentStatus_AutomationsFile_Presence = 3
)

// Enum value maps for EnvironmentStatus_AutomationsFile_Presence.
var (
	EnvironmentStatus_AutomationsFile_Presence_name = map[int32]string{
		0: "PRESENCE_UNSPECIFIED",
		1: "PRESENCE_ABSENT",
		2: "PRESENCE_DISCOVERED",
		3: "PRESENCE_SPECIFIED",
	}
	EnvironmentStatus_AutomationsFile_Presence_value = map[string]int32{
		"PRESENCE_UNSPECIFIED": 0,
		"PRESENCE_ABSENT":      1,
		"PRESENCE_DISCOVERED":  2,
		"PRESENCE_SPECIFIED":   3,
	}
)

func (x EnvironmentStatus_AutomationsFile_Presence) Enum() *EnvironmentStatus_AutomationsFile_Presence {
	p := new(EnvironmentStatus_AutomationsFile_Presence)
	*p = x
	return p
}

func (x EnvironmentStatus_AutomationsFile_Presence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvironmentStatus_AutomationsFile_Presence) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_environment_proto_enumTypes[7].Descriptor()
}

func (EnvironmentStatus_AutomationsFile_Presence) Type() protoreflect.EnumType {
	return &file_gitpod_v1_environment_proto_enumTypes[7]
}

func (x EnvironmentStatus_AutomationsFile_Presence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvironmentStatus_AutomationsFile_Presence.Descriptor instead.
func (EnvironmentStatus_AutomationsFile_Presence) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 9, 0}
}

// ChangeType is the type of change that happened to the file
type FileChange_ChangeType int32

const (
	FileChange_CHANGE_TYPE_UNSPECIFIED          FileChange_ChangeType = 0
	FileChange_CHANGE_TYPE_ADDED                FileChange_ChangeType = 1
	FileChange_CHANGE_TYPE_MODIFIED             FileChange_ChangeType = 2
	FileChange_CHANGE_TYPE_DELETED              FileChange_ChangeType = 3
	FileChange_CHANGE_TYPE_RENAMED              FileChange_ChangeType = 4
	FileChange_CHANGE_TYPE_COPIED               FileChange_ChangeType = 5
	FileChange_CHANGE_TYPE_UPDATED_BUT_UNMERGED FileChange_ChangeType = 6
	FileChange_CHANGE_TYPE_UNTRACKED            FileChange_ChangeType = 7
)

// Enum value maps for FileChange_ChangeType.
var (
	FileChange_ChangeType_name = map[int32]string{
		0: "CHANGE_TYPE_UNSPECIFIED",
		1: "CHANGE_TYPE_ADDED",
		2: "CHANGE_TYPE_MODIFIED",
		3: "CHANGE_TYPE_DELETED",
		4: "CHANGE_TYPE_RENAMED",
		5: "CHANGE_TYPE_COPIED",
		6: "CHANGE_TYPE_UPDATED_BUT_UNMERGED",
		7: "CHANGE_TYPE_UNTRACKED",
	}
	FileChange_ChangeType_value = map[string]int32{
		"CHANGE_TYPE_UNSPECIFIED":          0,
		"CHANGE_TYPE_ADDED":                1,
		"CHANGE_TYPE_MODIFIED":             2,
		"CHANGE_TYPE_DELETED":              3,
		"CHANGE_TYPE_RENAMED":              4,
		"CHANGE_TYPE_COPIED":               5,
		"CHANGE_TYPE_UPDATED_BUT_UNMERGED": 6,
		"CHANGE_TYPE_UNTRACKED":            7,
	}
)

func (x FileChange_ChangeType) Enum() *FileChange_ChangeType {
	p := new(FileChange_ChangeType)
	*p = x
	return p
}

func (x FileChange_ChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileChange_ChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_environment_proto_enumTypes[8].Descriptor()
}

func (FileChange_ChangeType) Type() protoreflect.EnumType {
	return &file_gitpod_v1_environment_proto_enumTypes[8]
}

func (x FileChange_ChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileChange_ChangeType.Descriptor instead.
func (FileChange_ChangeType) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{17, 0}
}

// CloneTargetMode is the target state in which we want to leave a
// GitEnvironment
type GitInitializer_CloneTargetMode int32

const (
	GitInitializer_CLONE_TARGET_MODE_UNSPECIFIED GitInitializer_CloneTargetMode = 0
	// REMOTE_HEAD has the local WS point at the remote branch head
	GitInitializer_CLONE_TARGET_MODE_REMOTE_HEAD GitInitializer_CloneTargetMode = 1
	// REMOTE_COMMIT has the local WS point at a specific commit
	GitInitializer_CLONE_TARGET_MODE_REMOTE_COMMIT GitInitializer_CloneTargetMode = 2
	// REMOTE_BRANCH has the local WS point at a remote branch
	GitInitializer_CLONE_TARGET_MODE_REMOTE_BRANCH GitInitializer_CloneTargetMode = 3
	// LOCAL_BRANCH creates a local branch in the environment
	GitInitializer_CLONE_TARGET_MODE_LOCAL_BRANCH GitInitializer_CloneTargetMode = 4
)

// Enum value maps for GitInitializer_CloneTargetMode.
var (
	GitInitializer_CloneTargetMode_name = map[int32]string{
		0: "CLONE_TARGET_MODE_UNSPECIFIED",
		1: "CLONE_TARGET_MODE_REMOTE_HEAD",
		2: "CLONE_TARGET_MODE_REMOTE_COMMIT",
		3: "CLONE_TARGET_MODE_REMOTE_BRANCH",
		4: "CLONE_TARGET_MODE_LOCAL_BRANCH",
	}
	GitInitializer_CloneTargetMode_value = map[string]int32{
		"CLONE_TARGET_MODE_UNSPECIFIED":   0,
		"CLONE_TARGET_MODE_REMOTE_HEAD":   1,
		"CLONE_TARGET_MODE_REMOTE_COMMIT": 2,
		"CLONE_TARGET_MODE_REMOTE_BRANCH": 3,
		"CLONE_TARGET_MODE_LOCAL_BRANCH":  4,
	}
)

func (x GitInitializer_CloneTargetMode) Enum() *GitInitializer_CloneTargetMode {
	p := new(GitInitializer_CloneTargetMode)
	*p = x
	return p
}

func (x GitInitializer_CloneTargetMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitInitializer_CloneTargetMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_environment_proto_enumTypes[9].Descriptor()
}

func (GitInitializer_CloneTargetMode) Type() protoreflect.EnumType {
	return &file_gitpod_v1_environment_proto_enumTypes[9]
}

func (x GitInitializer_CloneTargetMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitInitializer_CloneTargetMode.Descriptor instead.
func (GitInitializer_CloneTargetMode) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{20, 0}
}

type MarkEnvironmentActiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the environment to update activity for.
	EnvironmentId string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	// activity_signal specifies the activity.
	ActivitySignal *EnvironmentActivitySignal `protobuf:"bytes,2,opt,name=activity_signal,json=activitySignal,proto3" json:"activity_signal,omitempty"`
}

func (x *MarkEnvironmentActiveRequest) Reset() {
	*x = MarkEnvironmentActiveRequest{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkEnvironmentActiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkEnvironmentActiveRequest) ProtoMessage() {}

func (x *MarkEnvironmentActiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkEnvironmentActiveRequest.ProtoReflect.Descriptor instead.
func (*MarkEnvironmentActiveRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{0}
}

func (x *MarkEnvironmentActiveRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *MarkEnvironmentActiveRequest) GetActivitySignal() *EnvironmentActivitySignal {
	if x != nil {
		return x.ActivitySignal
	}
	return nil
}

// EnvironmentActivitySignal used to signal activity for an environment.
type EnvironmentActivitySignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source of the activity signal, such as "VS Code", "SSH", or "Automations".
	// It should be a human-readable string that describes the source of the activity signal.
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// timestamp of when the activity was observed by the source.
	// Only reported every 5 minutes.
	// Zero value means no activity was observed.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *EnvironmentActivitySignal) Reset() {
	*x = EnvironmentActivitySignal{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentActivitySignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentActivitySignal) ProtoMessage() {}

func (x *EnvironmentActivitySignal) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentActivitySignal.ProtoReflect.Descriptor instead.
func (*EnvironmentActivitySignal) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{1}
}

func (x *EnvironmentActivitySignal) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *EnvironmentActivitySignal) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type MarkEnvironmentActiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkEnvironmentActiveResponse) Reset() {
	*x = MarkEnvironmentActiveResponse{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkEnvironmentActiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkEnvironmentActiveResponse) ProtoMessage() {}

func (x *MarkEnvironmentActiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkEnvironmentActiveResponse.ProtoReflect.Descriptor instead.
func (*MarkEnvironmentActiveResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{2}
}

type GetEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// environment_id specifies the environment to get
	EnvironmentId string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
}

func (x *GetEnvironmentRequest) Reset() {
	*x = GetEnvironmentRequest{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvironmentRequest) ProtoMessage() {}

func (x *GetEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*GetEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{3}
}

func (x *GetEnvironmentRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type GetEnvironmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment *Environment `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *GetEnvironmentResponse) Reset() {
	*x = GetEnvironmentResponse{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvironmentResponse) ProtoMessage() {}

func (x *GetEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*GetEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{4}
}

func (x *GetEnvironmentResponse) GetEnvironment() *Environment {
	if x != nil {
		return x.Environment
	}
	return nil
}

type ListEnvironmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing environments
	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// organization_id is the ID of the organization that contains the environments
	OrganizationId string                          `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Filter         *ListEnvironmentsRequest_Filter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListEnvironmentsRequest) Reset() {
	*x = ListEnvironmentsRequest{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEnvironmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnvironmentsRequest) ProtoMessage() {}

func (x *ListEnvironmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnvironmentsRequest.ProtoReflect.Descriptor instead.
func (*ListEnvironmentsRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{5}
}

func (x *ListEnvironmentsRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListEnvironmentsRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ListEnvironmentsRequest) GetFilter() *ListEnvironmentsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListEnvironmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing environments
	Pagination *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// environments are the environments that matched the query
	Environments []*Environment `protobuf:"bytes,2,rep,name=environments,proto3" json:"environments,omitempty"`
}

func (x *ListEnvironmentsResponse) Reset() {
	*x = ListEnvironmentsResponse{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEnvironmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnvironmentsResponse) ProtoMessage() {}

func (x *ListEnvironmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnvironmentsResponse.ProtoReflect.Descriptor instead.
func (*ListEnvironmentsResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{6}
}

func (x *ListEnvironmentsResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListEnvironmentsResponse) GetEnvironments() []*Environment {
	if x != nil {
		return x.Environments
	}
	return nil
}

// Required fields:
// - metadata.organization_id
// - metadata.configuration_id
type CreateEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// spec is the configuration of the environment that's required for the to
	// start the environment
	Spec *EnvironmentSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *CreateEnvironmentRequest) Reset() {
	*x = CreateEnvironmentRequest{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnvironmentRequest) ProtoMessage() {}

func (x *CreateEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*CreateEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{7}
}

func (x *CreateEnvironmentRequest) GetSpec() *EnvironmentSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type CreateEnvironmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment *Environment `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *CreateEnvironmentResponse) Reset() {
	*x = CreateEnvironmentResponse{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnvironmentResponse) ProtoMessage() {}

func (x *CreateEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*CreateEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{8}
}

func (x *CreateEnvironmentResponse) GetEnvironment() *Environment {
	if x != nil {
		return x.Environment
	}
	return nil
}

type CreateEnvironmentFromProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Spec is the configuration of the environment that's required for the
	// runner to start the environment
	// Configuration already defined in the Project will override parts of the spec, if set
	Spec *EnvironmentSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *CreateEnvironmentFromProjectRequest) Reset() {
	*x = CreateEnvironmentFromProjectRequest{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEnvironmentFromProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnvironmentFromProjectRequest) ProtoMessage() {}

func (x *CreateEnvironmentFromProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnvironmentFromProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateEnvironmentFromProjectRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{9}
}

func (x *CreateEnvironmentFromProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateEnvironmentFromProjectRequest) GetSpec() *EnvironmentSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type CreateEnvironmentFromProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment *Environment `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *CreateEnvironmentFromProjectResponse) Reset() {
	*x = CreateEnvironmentFromProjectResponse{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEnvironmentFromProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnvironmentFromProjectResponse) ProtoMessage() {}

func (x *CreateEnvironmentFromProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnvironmentFromProjectResponse.ProtoReflect.Descriptor instead.
func (*CreateEnvironmentFromProjectResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{10}
}

func (x *CreateEnvironmentFromProjectResponse) GetEnvironment() *Environment {
	if x != nil {
		return x.Environment
	}
	return nil
}

// `CreateEnvironmentPreconditionFailureDetails` contains details about why a
// `CreateEnvironment` or `CreateEnvironmentFromProject` request failed with failed_precondition.
// The `missing_authentication_tokens_for_hosts` field lists the hosts for which the required authentication tokens were missing.
type CreateEnvironmentPreconditionFailureDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissingAuthenticationTokensForHosts []string `protobuf:"bytes,1,rep,name=missing_authentication_tokens_for_hosts,json=missingAuthenticationTokensForHosts,proto3" json:"missing_authentication_tokens_for_hosts,omitempty"`
}

func (x *CreateEnvironmentPreconditionFailureDetails) Reset() {
	*x = CreateEnvironmentPreconditionFailureDetails{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEnvironmentPreconditionFailureDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnvironmentPreconditionFailureDetails) ProtoMessage() {}

func (x *CreateEnvironmentPreconditionFailureDetails) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnvironmentPreconditionFailureDetails.ProtoReflect.Descriptor instead.
func (*CreateEnvironmentPreconditionFailureDetails) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{11}
}

func (x *CreateEnvironmentPreconditionFailureDetails) GetMissingAuthenticationTokensForHosts() []string {
	if x != nil {
		return x.MissingAuthenticationTokensForHosts
	}
	return nil
}

// +resource get environment
type Environment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is a unique identifier of this environment. No other environment with the
	// same name must be managed by this environment manager
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata is data associated with this environment that's required for other
	// parts of Gitpod to function
	Metadata *EnvironmentMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the configuration of the environment that's required for the
	// runner to start the environment
	Spec *EnvironmentSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the environment
	Status *EnvironmentStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Environment) Reset() {
	*x = Environment{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment) ProtoMessage() {}

func (x *Environment) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Environment.ProtoReflect.Descriptor instead.
func (*Environment) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{12}
}

func (x *Environment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Environment) GetMetadata() *EnvironmentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Environment) GetSpec() *EnvironmentSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Environment) GetStatus() *EnvironmentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// EnvironmentMetadata is data associated with an environment that's required for
// other parts of the system to function
type EnvironmentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// organization_id is the ID of the organization that contains the environment
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// annotations are key/value pairs that gets attached to the environment.
	// +internal - not yet implemented
	Annotations map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// name is the name of the environment as specified by the user
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// creator is the identity of the creator of the environment
	Creator *Subject `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	// original_context_url is the normalized URL from which the environment was
	// created
	OriginalContextUrl string `protobuf:"bytes,5,opt,name=original_context_url,json=originalContextUrl,proto3" json:"original_context_url,omitempty"`
	// Time when the Environment was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// If the Environment was started from a project, the project_id will reference the project.
	ProjectId string `protobuf:"bytes,7,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Runner is the ID of the runner that runs this environment.
	RunnerId string `protobuf:"bytes,9,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	// Time when the Environment was last started (i.e. CreateEnvironment or StartEnvironment were called).
	LastStartedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_started_at,json=lastStartedAt,proto3" json:"last_started_at,omitempty"`
}

func (x *EnvironmentMetadata) Reset() {
	*x = EnvironmentMetadata{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentMetadata) ProtoMessage() {}

func (x *EnvironmentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentMetadata.ProtoReflect.Descriptor instead.
func (*EnvironmentMetadata) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{13}
}

func (x *EnvironmentMetadata) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *EnvironmentMetadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *EnvironmentMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentMetadata) GetCreator() *Subject {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *EnvironmentMetadata) GetOriginalContextUrl() string {
	if x != nil {
		return x.OriginalContextUrl
	}
	return ""
}

func (x *EnvironmentMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EnvironmentMetadata) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *EnvironmentMetadata) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *EnvironmentMetadata) GetLastStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStartedAt
	}
	return nil
}

// EnvironmentSpec specifies the configuration of an environment for an environment
// start
type EnvironmentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version of the spec. The value of this field has no semantic
	// meaning (e.g. don't interpret it as as a timestamp),
	// but it can be used to impose a partial order. If a.spec_version <
	// b.spec_version then a was the spec before b.
	SpecVersion uint64 `protobuf:"varint,1,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	// Phase is the desired phase of the environment
	DesiredPhase EnvironmentPhase `protobuf:"varint,2,opt,name=desired_phase,json=desiredPhase,proto3,enum=gitpod.v1.EnvironmentPhase" json:"desired_phase,omitempty"`
	// machine is the machine spec of the environment
	Machine *EnvironmentSpec_Machine `protobuf:"bytes,3,opt,name=machine,proto3" json:"machine,omitempty"`
	// content is the content spec of the environment
	Content *EnvironmentSpec_Content `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// secrets are confidential data that is mounted into the environment
	Secrets []*EnvironmentSpec_Secret `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty"`
	// ports is the set of ports which ought to be exposed to the internet
	Ports []*EnvironmentSpec_EnvironmentPort `protobuf:"bytes,6,rep,name=ports,proto3" json:"ports,omitempty"`
	// Timeout configures the environment timeout
	Timeout *EnvironmentSpec_Timeout `protobuf:"bytes,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// admission controlls who can access the environment and its ports.
	Admission AdmissionLevel `protobuf:"varint,8,opt,name=admission,proto3,enum=gitpod.v1.AdmissionLevel" json:"admission,omitempty"`
	// devcontainer is the devcontainer spec of the environment
	Devcontainer *EnvironmentSpec_DevContainer `protobuf:"bytes,9,opt,name=devcontainer,proto3" json:"devcontainer,omitempty"`
	// ssh_public_keys are the public keys used to ssh into the environment
	SshPublicKeys []*EnvironmentSpec_SSHPublicKey `protobuf:"bytes,10,rep,name=ssh_public_keys,json=sshPublicKeys,proto3" json:"ssh_public_keys,omitempty"`
	// automations_file is the automations file spec of the environment
	AutomationsFile *EnvironmentSpec_AutomationsFile `protobuf:"bytes,11,opt,name=automations_file,json=automationsFile,proto3" json:"automations_file,omitempty"`
}

func (x *EnvironmentSpec) Reset() {
	*x = EnvironmentSpec{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpec) ProtoMessage() {}

func (x *EnvironmentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpec.ProtoReflect.Descriptor instead.
func (*EnvironmentSpec) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{14}
}

func (x *EnvironmentSpec) GetSpecVersion() uint64 {
	if x != nil {
		return x.SpecVersion
	}
	return 0
}

func (x *EnvironmentSpec) GetDesiredPhase() EnvironmentPhase {
	if x != nil {
		return x.DesiredPhase
	}
	return EnvironmentPhase_ENVIRONMENT_PHASE_UNSPECIFIED
}

func (x *EnvironmentSpec) GetMachine() *EnvironmentSpec_Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

func (x *EnvironmentSpec) GetContent() *EnvironmentSpec_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *EnvironmentSpec) GetSecrets() []*EnvironmentSpec_Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *EnvironmentSpec) GetPorts() []*EnvironmentSpec_EnvironmentPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *EnvironmentSpec) GetTimeout() *EnvironmentSpec_Timeout {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *EnvironmentSpec) GetAdmission() AdmissionLevel {
	if x != nil {
		return x.Admission
	}
	return AdmissionLevel_ADMISSION_LEVEL_UNSPECIFIED
}

func (x *EnvironmentSpec) GetDevcontainer() *EnvironmentSpec_DevContainer {
	if x != nil {
		return x.Devcontainer
	}
	return nil
}

func (x *EnvironmentSpec) GetSshPublicKeys() []*EnvironmentSpec_SSHPublicKey {
	if x != nil {
		return x.SshPublicKeys
	}
	return nil
}

func (x *EnvironmentSpec) GetAutomationsFile() *EnvironmentSpec_AutomationsFile {
	if x != nil {
		return x.AutomationsFile
	}
	return nil
}

// EnvironmentStatus describes an environment status
type EnvironmentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version of the status update. Environment instances themselves are
	// unversioned, but their status has different versions. The value of this
	// field has no semantic meaning (e.g. don't interpret it as as a timestamp),
	// but it can be used to impose a partial order. If a.status_version <
	// b.status_version then a was the status before b.
	StatusVersion uint64 `protobuf:"varint,1,opt,name=status_version,json=statusVersion,proto3" json:"status_version,omitempty"`
	// runner_ack contains the acknowledgement from the runner that is has
	// received the environment spec.
	RunnerAck *EnvironmentStatus_RunnerACK `protobuf:"bytes,2,opt,name=runner_ack,json=runnerAck,proto3" json:"runner_ack,omitempty"`
	// the phase of an environment is a simple, high-level summary of where the
	// environment is in its lifecycle
	Phase EnvironmentPhase `protobuf:"varint,3,opt,name=phase,proto3,enum=gitpod.v1.EnvironmentPhase" json:"phase,omitempty"`
	// failure_message summarises why the environment failed to operate. If this is non-empty
	// the environment has failed to operate and will likely transition to a stopped state.
	FailureMessage []string `protobuf:"bytes,4,rep,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	// environment_url contains the URL at which the environment can be accessed.
	// This field is only set if the environment is running.
	EnvironmentUrls *EnvironmentStatus_EnvironmentURLs `protobuf:"bytes,5,opt,name=environment_urls,json=environmentUrls,proto3" json:"environment_urls,omitempty"`
	// machine contains the status of the environment machine
	Machine *EnvironmentStatus_Machine `protobuf:"bytes,6,opt,name=machine,proto3" json:"machine,omitempty"`
	// secrets contains the status of the environment secrets
	Secrets []*EnvironmentStatus_Secret `protobuf:"bytes,7,rep,name=secrets,proto3" json:"secrets,omitempty"`
	// content contains the status of the environment content.
	Content *EnvironmentStatus_Content `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	// devcontainer contains the status of the devcontainer.
	Devcontainer *EnvironmentStatus_DevContainer `protobuf:"bytes,9,opt,name=devcontainer,proto3" json:"devcontainer,omitempty"`
	// ssh_public_keys contains the status of the environment ssh public keys
	SshPublicKeys []*EnvironmentStatus_SSHPublicKey `protobuf:"bytes,10,rep,name=ssh_public_keys,json=sshPublicKeys,proto3" json:"ssh_public_keys,omitempty"`
	// warning_message contains warnings, e.g. when the environment is present but not in the expected state.
	WarningMessage []string `protobuf:"bytes,11,rep,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
	// automations_file contains the status of the automations file.
	AutomationsFile *EnvironmentStatus_AutomationsFile `protobuf:"bytes,12,opt,name=automations_file,json=automationsFile,proto3" json:"automations_file,omitempty"`
	// activity_signal is the last activity signal for the environment.
	ActivitySignal *EnvironmentActivitySignal `protobuf:"bytes,13,opt,name=activity_signal,json=activitySignal,proto3" json:"activity_signal,omitempty"`
}

func (x *EnvironmentStatus) Reset() {
	*x = EnvironmentStatus{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus) ProtoMessage() {}

func (x *EnvironmentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15}
}

func (x *EnvironmentStatus) GetStatusVersion() uint64 {
	if x != nil {
		return x.StatusVersion
	}
	return 0
}

func (x *EnvironmentStatus) GetRunnerAck() *EnvironmentStatus_RunnerACK {
	if x != nil {
		return x.RunnerAck
	}
	return nil
}

func (x *EnvironmentStatus) GetPhase() EnvironmentPhase {
	if x != nil {
		return x.Phase
	}
	return EnvironmentPhase_ENVIRONMENT_PHASE_UNSPECIFIED
}

func (x *EnvironmentStatus) GetFailureMessage() []string {
	if x != nil {
		return x.FailureMessage
	}
	return nil
}

func (x *EnvironmentStatus) GetEnvironmentUrls() *EnvironmentStatus_EnvironmentURLs {
	if x != nil {
		return x.EnvironmentUrls
	}
	return nil
}

func (x *EnvironmentStatus) GetMachine() *EnvironmentStatus_Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

func (x *EnvironmentStatus) GetSecrets() []*EnvironmentStatus_Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *EnvironmentStatus) GetContent() *EnvironmentStatus_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *EnvironmentStatus) GetDevcontainer() *EnvironmentStatus_DevContainer {
	if x != nil {
		return x.Devcontainer
	}
	return nil
}

func (x *EnvironmentStatus) GetSshPublicKeys() []*EnvironmentStatus_SSHPublicKey {
	if x != nil {
		return x.SshPublicKeys
	}
	return nil
}

func (x *EnvironmentStatus) GetWarningMessage() []string {
	if x != nil {
		return x.WarningMessage
	}
	return nil
}

func (x *EnvironmentStatus) GetAutomationsFile() *EnvironmentStatus_AutomationsFile {
	if x != nil {
		return x.AutomationsFile
	}
	return nil
}

func (x *EnvironmentStatus) GetActivitySignal() *EnvironmentActivitySignal {
	if x != nil {
		return x.ActivitySignal
	}
	return nil
}

type EnvironmentGitStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clone_url is the repository url as you would pass it to "git clone".
	// Only HTTPS clone URLs are supported.
	CloneUrl string `protobuf:"bytes,1,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	// branch is branch we're currently on
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	// latest_commit is the most recent commit on the current branch
	LatestCommit string `protobuf:"bytes,3,opt,name=latest_commit,json=latestCommit,proto3" json:"latest_commit,omitempty"`
	// unpushed_commits is an array of unpushed changes in the environment, possibly
	// truncated
	UnpushedCommits []string `protobuf:"bytes,4,rep,name=unpushed_commits,json=unpushedCommits,proto3" json:"unpushed_commits,omitempty"`
	// the total number of unpushed changes
	TotalUnpushedCommits int32 `protobuf:"varint,5,opt,name=total_unpushed_commits,json=totalUnpushedCommits,proto3" json:"total_unpushed_commits,omitempty"`
	// changed_files is an array of changed files in the environment, possibly
	// truncated
	ChangedFiles      []*FileChange `protobuf:"bytes,6,rep,name=changed_files,json=changedFiles,proto3" json:"changed_files,omitempty"`
	TotalChangedFiles int32         `protobuf:"varint,7,opt,name=total_changed_files,json=totalChangedFiles,proto3" json:"total_changed_files,omitempty"`
}

func (x *EnvironmentGitStatus) Reset() {
	*x = EnvironmentGitStatus{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentGitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentGitStatus) ProtoMessage() {}

func (x *EnvironmentGitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentGitStatus.ProtoReflect.Descriptor instead.
func (*EnvironmentGitStatus) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{16}
}

func (x *EnvironmentGitStatus) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *EnvironmentGitStatus) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *EnvironmentGitStatus) GetLatestCommit() string {
	if x != nil {
		return x.LatestCommit
	}
	return ""
}

func (x *EnvironmentGitStatus) GetUnpushedCommits() []string {
	if x != nil {
		return x.UnpushedCommits
	}
	return nil
}

func (x *EnvironmentGitStatus) GetTotalUnpushedCommits() int32 {
	if x != nil {
		return x.TotalUnpushedCommits
	}
	return 0
}

func (x *EnvironmentGitStatus) GetChangedFiles() []*FileChange {
	if x != nil {
		return x.ChangedFiles
	}
	return nil
}

func (x *EnvironmentGitStatus) GetTotalChangedFiles() int32 {
	if x != nil {
		return x.TotalChangedFiles
	}
	return 0
}

type FileChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the path of the file
	Path       string                `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ChangeType FileChange_ChangeType `protobuf:"varint,2,opt,name=change_type,json=changeType,proto3,enum=gitpod.v1.FileChange_ChangeType" json:"change_type,omitempty"`
}

func (x *FileChange) Reset() {
	*x = FileChange{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChange) ProtoMessage() {}

func (x *FileChange) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChange.ProtoReflect.Descriptor instead.
func (*FileChange) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{17}
}

func (x *FileChange) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileChange) GetChangeType() FileChange_ChangeType {
	if x != nil {
		return x.ChangeType
	}
	return FileChange_CHANGE_TYPE_UNSPECIFIED
}

// EnvironmentInitializer specifies how an environment is to be initialized
type EnvironmentInitializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Specs []*EnvironmentInitializer_Spec `protobuf:"bytes,1,rep,name=specs,proto3" json:"specs,omitempty"`
}

func (x *EnvironmentInitializer) Reset() {
	*x = EnvironmentInitializer{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentInitializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentInitializer) ProtoMessage() {}

func (x *EnvironmentInitializer) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentInitializer.ProtoReflect.Descriptor instead.
func (*EnvironmentInitializer) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{18}
}

func (x *EnvironmentInitializer) GetSpecs() []*EnvironmentInitializer_Spec {
	if x != nil {
		return x.Specs
	}
	return nil
}

type ContextURLInitializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url is the URL from which the environment is created
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ContextURLInitializer) Reset() {
	*x = ContextURLInitializer{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextURLInitializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextURLInitializer) ProtoMessage() {}

func (x *ContextURLInitializer) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextURLInitializer.ProtoReflect.Descriptor instead.
func (*ContextURLInitializer) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{19}
}

func (x *ContextURLInitializer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GitInitializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// remote_uri is the Git remote origin
	RemoteUri string `protobuf:"bytes,1,opt,name=remote_uri,json=remoteUri,proto3" json:"remote_uri,omitempty"`
	// upstream_Remote_uri is the fork upstream of a repository
	UpstreamRemoteUri string `protobuf:"bytes,2,opt,name=upstream_remote_uri,json=upstreamRemoteUri,proto3" json:"upstream_remote_uri,omitempty"`
	// the target mode determines what gets checked out
	TargetMode GitInitializer_CloneTargetMode `protobuf:"varint,3,opt,name=target_mode,json=targetMode,proto3,enum=gitpod.v1.GitInitializer_CloneTargetMode" json:"target_mode,omitempty"`
	// the value for the clone target mode - use depends on the target mode
	CloneTarget string `protobuf:"bytes,4,opt,name=clone_target,json=cloneTarget,proto3" json:"clone_target,omitempty"`
	// a path relative to the environment root in which the code will be checked out
	// to
	CheckoutLocation string `protobuf:"bytes,5,opt,name=checkout_location,json=checkoutLocation,proto3" json:"checkout_location,omitempty"`
}

func (x *GitInitializer) Reset() {
	*x = GitInitializer{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitInitializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitInitializer) ProtoMessage() {}

func (x *GitInitializer) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitInitializer.ProtoReflect.Descriptor instead.
func (*GitInitializer) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{20}
}

func (x *GitInitializer) GetRemoteUri() string {
	if x != nil {
		return x.RemoteUri
	}
	return ""
}

func (x *GitInitializer) GetUpstreamRemoteUri() string {
	if x != nil {
		return x.UpstreamRemoteUri
	}
	return ""
}

func (x *GitInitializer) GetTargetMode() GitInitializer_CloneTargetMode {
	if x != nil {
		return x.TargetMode
	}
	return GitInitializer_CLONE_TARGET_MODE_UNSPECIFIED
}

func (x *GitInitializer) GetCloneTarget() string {
	if x != nil {
		return x.CloneTarget
	}
	return ""
}

func (x *GitInitializer) GetCheckoutLocation() string {
	if x != nil {
		return x.CheckoutLocation
	}
	return ""
}

type StartEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// environment_id specifies which environment should be started.
	EnvironmentId string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
}

func (x *StartEnvironmentRequest) Reset() {
	*x = StartEnvironmentRequest{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartEnvironmentRequest) ProtoMessage() {}

func (x *StartEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*StartEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{21}
}

func (x *StartEnvironmentRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type StartEnvironmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartEnvironmentResponse) Reset() {
	*x = StartEnvironmentResponse{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartEnvironmentResponse) ProtoMessage() {}

func (x *StartEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*StartEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{22}
}

type StopEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// environment_id specifies which environment should be stopped.
	//
	// +required
	EnvironmentId string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
}

func (x *StopEnvironmentRequest) Reset() {
	*x = StopEnvironmentRequest{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopEnvironmentRequest) ProtoMessage() {}

func (x *StopEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*StopEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{23}
}

func (x *StopEnvironmentRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type StopEnvironmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopEnvironmentResponse) Reset() {
	*x = StopEnvironmentResponse{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopEnvironmentResponse) ProtoMessage() {}

func (x *StopEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*StopEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{24}
}

type UpdateEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// environment_id specifies which environment should be updated.
	//
	// +required
	EnvironmentId string                             `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Metadata      *UpdateEnvironmentRequest_Metadata `protobuf:"bytes,2,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	Spec          *UpdateEnvironmentRequest_Spec     `protobuf:"bytes,3,opt,name=spec,proto3,oneof" json:"spec,omitempty"`
}

func (x *UpdateEnvironmentRequest) Reset() {
	*x = UpdateEnvironmentRequest{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentRequest) ProtoMessage() {}

func (x *UpdateEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateEnvironmentRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *UpdateEnvironmentRequest) GetMetadata() *UpdateEnvironmentRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateEnvironmentRequest) GetSpec() *UpdateEnvironmentRequest_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type UpdateEnvironmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateEnvironmentResponse) Reset() {
	*x = UpdateEnvironmentResponse{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentResponse) ProtoMessage() {}

func (x *UpdateEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{26}
}

type DeleteEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// environment_id specifies the environment that is going to delete.
	//
	// +required
	EnvironmentId string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	// force indicates whether the environment should be deleted forcefully
	// When force deleting an Environment, the Environment is removed immediately and
	// environment lifecycle is not respected.
	// Force deleting can result in data loss on the environment.
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteEnvironmentRequest) Reset() {
	*x = DeleteEnvironmentRequest{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEnvironmentRequest) ProtoMessage() {}

func (x *DeleteEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteEnvironmentRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *DeleteEnvironmentRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteEnvironmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteEnvironmentResponse) Reset() {
	*x = DeleteEnvironmentResponse{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEnvironmentResponse) ProtoMessage() {}

func (x *DeleteEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*DeleteEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{28}
}

type CreateEnvironmentLogsTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// environment_id specifies the environment for which the logs token should be created.
	//
	// +required
	EnvironmentId string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
}

func (x *CreateEnvironmentLogsTokenRequest) Reset() {
	*x = CreateEnvironmentLogsTokenRequest{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEnvironmentLogsTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnvironmentLogsTokenRequest) ProtoMessage() {}

func (x *CreateEnvironmentLogsTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnvironmentLogsTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateEnvironmentLogsTokenRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{29}
}

func (x *CreateEnvironmentLogsTokenRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type CreateEnvironmentLogsTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// access_token is the token that can be used to access the logs of the environment
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *CreateEnvironmentLogsTokenResponse) Reset() {
	*x = CreateEnvironmentLogsTokenResponse{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEnvironmentLogsTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnvironmentLogsTokenResponse) ProtoMessage() {}

func (x *CreateEnvironmentLogsTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnvironmentLogsTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateEnvironmentLogsTokenResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{30}
}

func (x *CreateEnvironmentLogsTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type ListEnvironmentsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// runner_ids filters the response to only Environments running on these Runner IDs
	RunnerIds []string `protobuf:"bytes,1,rep,name=runner_ids,json=runnerIds,proto3" json:"runner_ids,omitempty"`
	// actual_phases is a list of phases the environment must be in for it to be returned in the API call
	StatusPhases []EnvironmentPhase `protobuf:"varint,2,rep,packed,name=status_phases,json=statusPhases,proto3,enum=gitpod.v1.EnvironmentPhase" json:"status_phases,omitempty"`
	// creator_ids filters the response to only Environments created by specified members
	CreatorIds []string `protobuf:"bytes,3,rep,name=creator_ids,json=creatorIds,proto3" json:"creator_ids,omitempty"`
	// project_ids filters the response to only Environments associated with the specified projects
	ProjectIds []string `protobuf:"bytes,4,rep,name=project_ids,json=projectIds,proto3" json:"project_ids,omitempty"`
	// runner_kinds filters the response to only Environments running on these Runner Kinds
	RunnerKinds []RunnerKind `protobuf:"varint,5,rep,packed,name=runner_kinds,json=runnerKinds,proto3,enum=gitpod.v1.RunnerKind" json:"runner_kinds,omitempty"`
}

func (x *ListEnvironmentsRequest_Filter) Reset() {
	*x = ListEnvironmentsRequest_Filter{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEnvironmentsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnvironmentsRequest_Filter) ProtoMessage() {}

func (x *ListEnvironmentsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnvironmentsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListEnvironmentsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListEnvironmentsRequest_Filter) GetRunnerIds() []string {
	if x != nil {
		return x.RunnerIds
	}
	return nil
}

func (x *ListEnvironmentsRequest_Filter) GetStatusPhases() []EnvironmentPhase {
	if x != nil {
		return x.StatusPhases
	}
	return nil
}

func (x *ListEnvironmentsRequest_Filter) GetCreatorIds() []string {
	if x != nil {
		return x.CreatorIds
	}
	return nil
}

func (x *ListEnvironmentsRequest_Filter) GetProjectIds() []string {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

func (x *ListEnvironmentsRequest_Filter) GetRunnerKinds() []RunnerKind {
	if x != nil {
		return x.RunnerKinds
	}
	return nil
}

// Timeout configures the environment timeout
type EnvironmentSpec_Timeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inacitivity is the maximum time of disconnection before the environment is
	// stopped or paused. Minimum duration is 30 minutes. Set to 0 to disable.
	Disconnected *durationpb.Duration `protobuf:"bytes,2,opt,name=disconnected,proto3" json:"disconnected,omitempty"`
}

func (x *EnvironmentSpec_Timeout) Reset() {
	*x = EnvironmentSpec_Timeout{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentSpec_Timeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpec_Timeout) ProtoMessage() {}

func (x *EnvironmentSpec_Timeout) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpec_Timeout.ProtoReflect.Descriptor instead.
func (*EnvironmentSpec_Timeout) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{14, 0}
}

func (x *EnvironmentSpec_Timeout) GetDisconnected() *durationpb.Duration {
	if x != nil {
		return x.Disconnected
	}
	return nil
}

type EnvironmentSpec_Machine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// Class denotes the class of the environment we ought to start
	Class string `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *EnvironmentSpec_Machine) Reset() {
	*x = EnvironmentSpec_Machine{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentSpec_Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpec_Machine) ProtoMessage() {}

func (x *EnvironmentSpec_Machine) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpec_Machine.ProtoReflect.Descriptor instead.
func (*EnvironmentSpec_Machine) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{14, 1}
}

func (x *EnvironmentSpec_Machine) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *EnvironmentSpec_Machine) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

type EnvironmentSpec_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// initializer configures how the environment is to be initialized
	Initializer *EnvironmentInitializer `protobuf:"bytes,2,opt,name=initializer,proto3" json:"initializer,omitempty"`
	// The Git username
	GitUsername string `protobuf:"bytes,3,opt,name=git_username,json=gitUsername,proto3" json:"git_username,omitempty"`
	// The Git email address
	GitEmail string `protobuf:"bytes,4,opt,name=git_email,json=gitEmail,proto3" json:"git_email,omitempty"`
}

func (x *EnvironmentSpec_Content) Reset() {
	*x = EnvironmentSpec_Content{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentSpec_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpec_Content) ProtoMessage() {}

func (x *EnvironmentSpec_Content) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpec_Content.ProtoReflect.Descriptor instead.
func (*EnvironmentSpec_Content) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{14, 2}
}

func (x *EnvironmentSpec_Content) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *EnvironmentSpec_Content) GetInitializer() *EnvironmentInitializer {
	if x != nil {
		return x.Initializer
	}
	return nil
}

func (x *EnvironmentSpec_Content) GetGitUsername() string {
	if x != nil {
		return x.GitUsername
	}
	return ""
}

func (x *EnvironmentSpec_Content) GetGitEmail() string {
	if x != nil {
		return x.GitEmail
	}
	return ""
}

type EnvironmentSpec_DevContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// devcontainer_file_path is the path to the devcontainer file relative to the repo root
	DevcontainerFilePath string `protobuf:"bytes,2,opt,name=devcontainer_file_path,json=devcontainerFilePath,proto3" json:"devcontainer_file_path,omitempty"`
}

func (x *EnvironmentSpec_DevContainer) Reset() {
	*x = EnvironmentSpec_DevContainer{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentSpec_DevContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpec_DevContainer) ProtoMessage() {}

func (x *EnvironmentSpec_DevContainer) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpec_DevContainer.ProtoReflect.Descriptor instead.
func (*EnvironmentSpec_DevContainer) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{14, 3}
}

func (x *EnvironmentSpec_DevContainer) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *EnvironmentSpec_DevContainer) GetDevcontainerFilePath() string {
	if x != nil {
		return x.DevcontainerFilePath
	}
	return ""
}

type EnvironmentSpec_Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the human readable description of the secret
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// source is the source of the secret, for now control-plane or runner
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// source_ref into the source, in case of control-plane this is uuid of the secret
	SourceRef string `protobuf:"bytes,3,opt,name=source_ref,json=sourceRef,proto3" json:"source_ref,omitempty"`
	// mount specifies how the secret is materiaized in the environment
	//
	// Types that are assignable to Mount:
	//
	//	*EnvironmentSpec_Secret_FilePath
	//	*EnvironmentSpec_Secret_EnvironmentVariable
	//	*EnvironmentSpec_Secret_GitCredentialHost
	Mount isEnvironmentSpec_Secret_Mount `protobuf_oneof:"mount"`
	// session indicated the current session of the secret.
	// When the session does not change, secrets are not reloaded in the environment.
	Session string `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *EnvironmentSpec_Secret) Reset() {
	*x = EnvironmentSpec_Secret{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentSpec_Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpec_Secret) ProtoMessage() {}

func (x *EnvironmentSpec_Secret) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpec_Secret.ProtoReflect.Descriptor instead.
func (*EnvironmentSpec_Secret) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{14, 4}
}

func (x *EnvironmentSpec_Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentSpec_Secret) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *EnvironmentSpec_Secret) GetSourceRef() string {
	if x != nil {
		return x.SourceRef
	}
	return ""
}

func (m *EnvironmentSpec_Secret) GetMount() isEnvironmentSpec_Secret_Mount {
	if m != nil {
		return m.Mount
	}
	return nil
}

func (x *EnvironmentSpec_Secret) GetFilePath() string {
	if x, ok := x.GetMount().(*EnvironmentSpec_Secret_FilePath); ok {
		return x.FilePath
	}
	return ""
}

func (x *EnvironmentSpec_Secret) GetEnvironmentVariable() string {
	if x, ok := x.GetMount().(*EnvironmentSpec_Secret_EnvironmentVariable); ok {
		return x.EnvironmentVariable
	}
	return ""
}

func (x *EnvironmentSpec_Secret) GetGitCredentialHost() string {
	if x, ok := x.GetMount().(*EnvironmentSpec_Secret_GitCredentialHost); ok {
		return x.GitCredentialHost
	}
	return ""
}

func (x *EnvironmentSpec_Secret) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

type isEnvironmentSpec_Secret_Mount interface {
	isEnvironmentSpec_Secret_Mount()
}

type EnvironmentSpec_Secret_FilePath struct {
	// file_path is the path inside the devcontainer where the secret is mounted
	FilePath string `protobuf:"bytes,10,opt,name=file_path,json=filePath,proto3,oneof"`
}

type EnvironmentSpec_Secret_EnvironmentVariable struct {
	EnvironmentVariable string `protobuf:"bytes,11,opt,name=environment_variable,json=environmentVariable,proto3,oneof"`
}

type EnvironmentSpec_Secret_GitCredentialHost struct {
	GitCredentialHost string `protobuf:"bytes,12,opt,name=git_credential_host,json=gitCredentialHost,proto3,oneof"`
}

func (*EnvironmentSpec_Secret_FilePath) isEnvironmentSpec_Secret_Mount() {}

func (*EnvironmentSpec_Secret_EnvironmentVariable) isEnvironmentSpec_Secret_Mount() {}

func (*EnvironmentSpec_Secret_GitCredentialHost) isEnvironmentSpec_Secret_Mount() {}

type EnvironmentSpec_EnvironmentPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// port number
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// policy of this port
	Admission AdmissionLevel `protobuf:"varint,2,opt,name=admission,proto3,enum=gitpod.v1.AdmissionLevel" json:"admission,omitempty"`
	// name of this port
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EnvironmentSpec_EnvironmentPort) Reset() {
	*x = EnvironmentSpec_EnvironmentPort{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentSpec_EnvironmentPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpec_EnvironmentPort) ProtoMessage() {}

func (x *EnvironmentSpec_EnvironmentPort) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpec_EnvironmentPort.ProtoReflect.Descriptor instead.
func (*EnvironmentSpec_EnvironmentPort) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{14, 5}
}

func (x *EnvironmentSpec_EnvironmentPort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *EnvironmentSpec_EnvironmentPort) GetAdmission() AdmissionLevel {
	if x != nil {
		return x.Admission
	}
	return AdmissionLevel_ADMISSION_LEVEL_UNSPECIFIED
}

func (x *EnvironmentSpec_EnvironmentPort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EnvironmentSpec_SSHPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier of the public key
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// value is the actual public key in the public key file format
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EnvironmentSpec_SSHPublicKey) Reset() {
	*x = EnvironmentSpec_SSHPublicKey{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentSpec_SSHPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpec_SSHPublicKey) ProtoMessage() {}

func (x *EnvironmentSpec_SSHPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpec_SSHPublicKey.ProtoReflect.Descriptor instead.
func (*EnvironmentSpec_SSHPublicKey) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{14, 6}
}

func (x *EnvironmentSpec_SSHPublicKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnvironmentSpec_SSHPublicKey) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EnvironmentSpec_AutomationsFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// automations_file_path is the path to the automations file that is applied in the environment,
	// relative to the repo root.
	AutomationsFilePath string `protobuf:"bytes,2,opt,name=automations_file_path,json=automationsFilePath,proto3" json:"automations_file_path,omitempty"`
}

func (x *EnvironmentSpec_AutomationsFile) Reset() {
	*x = EnvironmentSpec_AutomationsFile{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentSpec_AutomationsFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSpec_AutomationsFile) ProtoMessage() {}

func (x *EnvironmentSpec_AutomationsFile) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSpec_AutomationsFile.ProtoReflect.Descriptor instead.
func (*EnvironmentSpec_AutomationsFile) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{14, 7}
}

func (x *EnvironmentSpec_AutomationsFile) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *EnvironmentSpec_AutomationsFile) GetAutomationsFilePath() string {
	if x != nil {
		return x.AutomationsFilePath
	}
	return ""
}

type EnvironmentStatus_EnvironmentPortURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// port is the port number of the environment port
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// url is the URL at which the environment port can be accessed
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *EnvironmentStatus_EnvironmentPortURL) Reset() {
	*x = EnvironmentStatus_EnvironmentPortURL{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentStatus_EnvironmentPortURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus_EnvironmentPortURL) ProtoMessage() {}

func (x *EnvironmentStatus_EnvironmentPortURL) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus_EnvironmentPortURL.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus_EnvironmentPortURL) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 0}
}

func (x *EnvironmentStatus_EnvironmentPortURL) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *EnvironmentStatus_EnvironmentPortURL) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type EnvironmentStatus_EnvironmentSSHURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *EnvironmentStatus_EnvironmentSSHURL) Reset() {
	*x = EnvironmentStatus_EnvironmentSSHURL{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentStatus_EnvironmentSSHURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus_EnvironmentSSHURL) ProtoMessage() {}

func (x *EnvironmentStatus_EnvironmentSSHURL) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus_EnvironmentSSHURL.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus_EnvironmentSSHURL) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 1}
}

func (x *EnvironmentStatus_EnvironmentSSHURL) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type EnvironmentStatus_EnvironmentURLs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SSH is the URL at which the environment can be accessed via SSH.
	Ssh   *EnvironmentStatus_EnvironmentSSHURL    `protobuf:"bytes,1,opt,name=ssh,proto3" json:"ssh,omitempty"`
	Ports []*EnvironmentStatus_EnvironmentPortURL `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	// logs is the URL at which the environment logs can be accessed.
	Logs string `protobuf:"bytes,3,opt,name=logs,proto3" json:"logs,omitempty"`
}

func (x *EnvironmentStatus_EnvironmentURLs) Reset() {
	*x = EnvironmentStatus_EnvironmentURLs{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentStatus_EnvironmentURLs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus_EnvironmentURLs) ProtoMessage() {}

func (x *EnvironmentStatus_EnvironmentURLs) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus_EnvironmentURLs.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus_EnvironmentURLs) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 2}
}

func (x *EnvironmentStatus_EnvironmentURLs) GetSsh() *EnvironmentStatus_EnvironmentSSHURL {
	if x != nil {
		return x.Ssh
	}
	return nil
}

func (x *EnvironmentStatus_EnvironmentURLs) GetPorts() []*EnvironmentStatus_EnvironmentPortURL {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *EnvironmentStatus_EnvironmentURLs) GetLogs() string {
	if x != nil {
		return x.Logs
	}
	return ""
}

type EnvironmentStatus_Machine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session is the session that is currently active in the machine.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// phase is the current phase of the environment machine
	Phase EnvironmentStatus_Machine_Phase `protobuf:"varint,2,opt,name=phase,proto3,enum=gitpod.v1.EnvironmentStatus_Machine_Phase" json:"phase,omitempty"`
	// failure_message contains the reason the machine failed to operate.
	FailureMessage string `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	// timeout contains the reason the environment has timed out. If this field is
	// empty, the environment has not timed out.
	Timeout string `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// versions contains the versions of components in the machine.
	Versions *EnvironmentStatus_Machine_Versions `protobuf:"bytes,5,opt,name=versions,proto3" json:"versions,omitempty"`
	// warning_message contains warnings, e.g. when the machine is present but not in the expected state.
	WarningMessage string `protobuf:"bytes,6,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
}

func (x *EnvironmentStatus_Machine) Reset() {
	*x = EnvironmentStatus_Machine{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentStatus_Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus_Machine) ProtoMessage() {}

func (x *EnvironmentStatus_Machine) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus_Machine.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus_Machine) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 3}
}

func (x *EnvironmentStatus_Machine) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *EnvironmentStatus_Machine) GetPhase() EnvironmentStatus_Machine_Phase {
	if x != nil {
		return x.Phase
	}
	return EnvironmentStatus_Machine_PHASE_UNSPECIFIED
}

func (x *EnvironmentStatus_Machine) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *EnvironmentStatus_Machine) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *EnvironmentStatus_Machine) GetVersions() *EnvironmentStatus_Machine_Versions {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *EnvironmentStatus_Machine) GetWarningMessage() string {
	if x != nil {
		return x.WarningMessage
	}
	return ""
}

type EnvironmentStatus_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session is the session that is currently active in the environment.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// phase is the current phase of the environment content
	Phase EnvironmentStatus_ContentPhase `protobuf:"varint,2,opt,name=phase,proto3,enum=gitpod.v1.EnvironmentStatus_ContentPhase" json:"phase,omitempty"`
	// git is the Git working copy status of the environment.
	// Note: this is a best-effort field and more often than not will not be
	// present. Its absence does not indicate the absence of a working copy.
	Git *EnvironmentGitStatus `protobuf:"bytes,3,opt,name=git,proto3" json:"git,omitempty"`
	// content_location_in_machine is the location of the content in the machine
	ContentLocationInMachine string `protobuf:"bytes,4,opt,name=content_location_in_machine,json=contentLocationInMachine,proto3" json:"content_location_in_machine,omitempty"`
	// failure_message contains the reason the content initialization failed.
	FailureMessage string `protobuf:"bytes,5,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	// warning_message contains warnings, e.g. when the content is present but not in the expected state.
	WarningMessage string `protobuf:"bytes,6,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
}

func (x *EnvironmentStatus_Content) Reset() {
	*x = EnvironmentStatus_Content{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentStatus_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus_Content) ProtoMessage() {}

func (x *EnvironmentStatus_Content) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus_Content.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus_Content) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 4}
}

func (x *EnvironmentStatus_Content) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *EnvironmentStatus_Content) GetPhase() EnvironmentStatus_ContentPhase {
	if x != nil {
		return x.Phase
	}
	return EnvironmentStatus_CONTENT_PHASE_UNSPECIFIED
}

func (x *EnvironmentStatus_Content) GetGit() *EnvironmentGitStatus {
	if x != nil {
		return x.Git
	}
	return nil
}

func (x *EnvironmentStatus_Content) GetContentLocationInMachine() string {
	if x != nil {
		return x.ContentLocationInMachine
	}
	return ""
}

func (x *EnvironmentStatus_Content) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *EnvironmentStatus_Content) GetWarningMessage() string {
	if x != nil {
		return x.WarningMessage
	}
	return ""
}

type EnvironmentStatus_Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase      EnvironmentStatus_ContentPhase `protobuf:"varint,2,opt,name=phase,proto3,enum=gitpod.v1.EnvironmentStatus_ContentPhase" json:"phase,omitempty"`
	SecretName string                         `protobuf:"bytes,3,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	// failure_message contains the reason the secret failed to be materialize.
	FailureMessage string `protobuf:"bytes,4,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	// warning_message contains warnings, e.g. when the secret is present but not in the expected state.
	WarningMessage string `protobuf:"bytes,5,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
	// session is the session that is currently active in the environment.
	Session string `protobuf:"bytes,6,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *EnvironmentStatus_Secret) Reset() {
	*x = EnvironmentStatus_Secret{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentStatus_Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus_Secret) ProtoMessage() {}

func (x *EnvironmentStatus_Secret) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus_Secret.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus_Secret) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 5}
}

func (x *EnvironmentStatus_Secret) GetPhase() EnvironmentStatus_ContentPhase {
	if x != nil {
		return x.Phase
	}
	return EnvironmentStatus_CONTENT_PHASE_UNSPECIFIED
}

func (x *EnvironmentStatus_Secret) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *EnvironmentStatus_Secret) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *EnvironmentStatus_Secret) GetWarningMessage() string {
	if x != nil {
		return x.WarningMessage
	}
	return ""
}

func (x *EnvironmentStatus_Secret) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

type EnvironmentStatus_DevContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session is the session that is currently active in the devcontainer.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// phase is the current phase of the devcontainer
	Phase EnvironmentStatus_DevContainer_Phase `protobuf:"varint,2,opt,name=phase,proto3,enum=gitpod.v1.EnvironmentStatus_DevContainer_Phase" json:"phase,omitempty"`
	// devcontainer_file_path is the path to the devcontainer file relative to the repo root
	DevcontainerFilePath string `protobuf:"bytes,3,opt,name=devcontainer_file_path,json=devcontainerFilePath,proto3" json:"devcontainer_file_path,omitempty"`
	// devcontainerconfig_in_sync indicates if the devcontainer is up to date w.r.t. the devcontainer config file.
	DevcontainerconfigInSync bool `protobuf:"varint,4,opt,name=devcontainerconfig_in_sync,json=devcontainerconfigInSync,proto3" json:"devcontainerconfig_in_sync,omitempty"`
	// secrets_in_sync indicates if the secrets are up to date w.r.t. the running devcontainer.
	SecretsInSync bool `protobuf:"varint,5,opt,name=secrets_in_sync,json=secretsInSync,proto3" json:"secrets_in_sync,omitempty"`
	// failure_message contains the reason the devcontainer failed to operate.
	FailureMessage string `protobuf:"bytes,6,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	// remote_user is the user that is used to connect to the devcontainer
	RemoteUser string `protobuf:"bytes,7,opt,name=remote_user,json=remoteUser,proto3" json:"remote_user,omitempty"`
	// remote_workspace_folder is the folder that is used to connect to the devcontainer
	RemoteWorkspaceFolder string `protobuf:"bytes,8,opt,name=remote_workspace_folder,json=remoteWorkspaceFolder,proto3" json:"remote_workspace_folder,omitempty"`
	// container_name is the name of the container that is used to connect to the devcontainer
	ContainerName string `protobuf:"bytes,9,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	// container_id is the ID of the container.
	ContainerId string `protobuf:"bytes,10,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// warning_message contains warnings, e.g. when the devcontainer is present but not in the expected state.
	WarningMessage string `protobuf:"bytes,12,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
	// devcontainer_file_presence indicates how the devcontainer file is present in the repo.
	DevcontainerFilePresence EnvironmentStatus_DevContainer_Presence `protobuf:"varint,13,opt,name=devcontainer_file_presence,json=devcontainerFilePresence,proto3,enum=gitpod.v1.EnvironmentStatus_DevContainer_Presence" json:"devcontainer_file_presence,omitempty"`
}

func (x *EnvironmentStatus_DevContainer) Reset() {
	*x = EnvironmentStatus_DevContainer{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentStatus_DevContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus_DevContainer) ProtoMessage() {}

func (x *EnvironmentStatus_DevContainer) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus_DevContainer.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus_DevContainer) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 6}
}

func (x *EnvironmentStatus_DevContainer) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *EnvironmentStatus_DevContainer) GetPhase() EnvironmentStatus_DevContainer_Phase {
	if x != nil {
		return x.Phase
	}
	return EnvironmentStatus_DevContainer_PHASE_UNSPECIFIED
}

func (x *EnvironmentStatus_DevContainer) GetDevcontainerFilePath() string {
	if x != nil {
		return x.DevcontainerFilePath
	}
	return ""
}

func (x *EnvironmentStatus_DevContainer) GetDevcontainerconfigInSync() bool {
	if x != nil {
		return x.DevcontainerconfigInSync
	}
	return false
}

func (x *EnvironmentStatus_DevContainer) GetSecretsInSync() bool {
	if x != nil {
		return x.SecretsInSync
	}
	return false
}

func (x *EnvironmentStatus_DevContainer) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *EnvironmentStatus_DevContainer) GetRemoteUser() string {
	if x != nil {
		return x.RemoteUser
	}
	return ""
}

func (x *EnvironmentStatus_DevContainer) GetRemoteWorkspaceFolder() string {
	if x != nil {
		return x.RemoteWorkspaceFolder
	}
	return ""
}

func (x *EnvironmentStatus_DevContainer) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *EnvironmentStatus_DevContainer) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *EnvironmentStatus_DevContainer) GetWarningMessage() string {
	if x != nil {
		return x.WarningMessage
	}
	return ""
}

func (x *EnvironmentStatus_DevContainer) GetDevcontainerFilePresence() EnvironmentStatus_DevContainer_Presence {
	if x != nil {
		return x.DevcontainerFilePresence
	}
	return EnvironmentStatus_DevContainer_PRESENCE_UNSPECIFIED
}

// RunnerACK is the acknowledgement from the runner that is has received the
// environment spec.
type EnvironmentStatus_RunnerACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecVersion uint64                                 `protobuf:"varint,1,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	StatusCode  EnvironmentStatus_RunnerACK_StatusCode `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3,enum=gitpod.v1.EnvironmentStatus_RunnerACK_StatusCode" json:"status_code,omitempty"`
	Message     string                                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EnvironmentStatus_RunnerACK) Reset() {
	*x = EnvironmentStatus_RunnerACK{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentStatus_RunnerACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus_RunnerACK) ProtoMessage() {}

func (x *EnvironmentStatus_RunnerACK) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus_RunnerACK.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus_RunnerACK) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 7}
}

func (x *EnvironmentStatus_RunnerACK) GetSpecVersion() uint64 {
	if x != nil {
		return x.SpecVersion
	}
	return 0
}

func (x *EnvironmentStatus_RunnerACK) GetStatusCode() EnvironmentStatus_RunnerACK_StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return EnvironmentStatus_RunnerACK_STATUS_CODE_UNSPECIFIED
}

func (x *EnvironmentStatus_RunnerACK) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EnvironmentStatus_SSHPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier of the public key
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// phase is the current phase of the public key
	Phase EnvironmentStatus_ContentPhase `protobuf:"varint,2,opt,name=phase,proto3,enum=gitpod.v1.EnvironmentStatus_ContentPhase" json:"phase,omitempty"`
}

func (x *EnvironmentStatus_SSHPublicKey) Reset() {
	*x = EnvironmentStatus_SSHPublicKey{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentStatus_SSHPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus_SSHPublicKey) ProtoMessage() {}

func (x *EnvironmentStatus_SSHPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus_SSHPublicKey.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus_SSHPublicKey) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 8}
}

func (x *EnvironmentStatus_SSHPublicKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnvironmentStatus_SSHPublicKey) GetPhase() EnvironmentStatus_ContentPhase {
	if x != nil {
		return x.Phase
	}
	return EnvironmentStatus_CONTENT_PHASE_UNSPECIFIED
}

type EnvironmentStatus_AutomationsFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session is the automations file session that is currently applied in the environment.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// automations_file_path is the path to the automations file relative to the repo root.
	AutomationsFilePath string `protobuf:"bytes,2,opt,name=automations_file_path,json=automationsFilePath,proto3" json:"automations_file_path,omitempty"`
	// phase is the current phase of the automations file.
	Phase EnvironmentStatus_ContentPhase `protobuf:"varint,3,opt,name=phase,proto3,enum=gitpod.v1.EnvironmentStatus_ContentPhase" json:"phase,omitempty"`
	// failure_message contains the reason the automations file failed to be applied.
	// This is only set if the phase is FAILED.
	FailureMessage string `protobuf:"bytes,4,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
	// automations_file_presence indicates how an automations file is present in the environment.
	AutomationsFilePresence EnvironmentStatus_AutomationsFile_Presence `protobuf:"varint,5,opt,name=automations_file_presence,json=automationsFilePresence,proto3,enum=gitpod.v1.EnvironmentStatus_AutomationsFile_Presence" json:"automations_file_presence,omitempty"`
}

func (x *EnvironmentStatus_AutomationsFile) Reset() {
	*x = EnvironmentStatus_AutomationsFile{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentStatus_AutomationsFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus_AutomationsFile) ProtoMessage() {}

func (x *EnvironmentStatus_AutomationsFile) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus_AutomationsFile.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus_AutomationsFile) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 9}
}

func (x *EnvironmentStatus_AutomationsFile) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *EnvironmentStatus_AutomationsFile) GetAutomationsFilePath() string {
	if x != nil {
		return x.AutomationsFilePath
	}
	return ""
}

func (x *EnvironmentStatus_AutomationsFile) GetPhase() EnvironmentStatus_ContentPhase {
	if x != nil {
		return x.Phase
	}
	return EnvironmentStatus_CONTENT_PHASE_UNSPECIFIED
}

func (x *EnvironmentStatus_AutomationsFile) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

func (x *EnvironmentStatus_AutomationsFile) GetAutomationsFilePresence() EnvironmentStatus_AutomationsFile_Presence {
	if x != nil {
		return x.AutomationsFilePresence
	}
	return EnvironmentStatus_AutomationsFile_PRESENCE_UNSPECIFIED
}

type EnvironmentStatus_Machine_Versions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupervisorVersion string `protobuf:"bytes,1,opt,name=supervisor_version,json=supervisorVersion,proto3" json:"supervisor_version,omitempty"`
	SupervisorCommit  string `protobuf:"bytes,2,opt,name=supervisor_commit,json=supervisorCommit,proto3" json:"supervisor_commit,omitempty"`
}

func (x *EnvironmentStatus_Machine_Versions) Reset() {
	*x = EnvironmentStatus_Machine_Versions{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentStatus_Machine_Versions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentStatus_Machine_Versions) ProtoMessage() {}

func (x *EnvironmentStatus_Machine_Versions) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentStatus_Machine_Versions.ProtoReflect.Descriptor instead.
func (*EnvironmentStatus_Machine_Versions) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{15, 3, 0}
}

func (x *EnvironmentStatus_Machine_Versions) GetSupervisorVersion() string {
	if x != nil {
		return x.SupervisorVersion
	}
	return ""
}

func (x *EnvironmentStatus_Machine_Versions) GetSupervisorCommit() string {
	if x != nil {
		return x.SupervisorCommit
	}
	return ""
}

type EnvironmentInitializer_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Spec:
	//
	//	*EnvironmentInitializer_Spec_Git
	//	*EnvironmentInitializer_Spec_ContextUrl
	Spec isEnvironmentInitializer_Spec_Spec `protobuf_oneof:"spec"`
}

func (x *EnvironmentInitializer_Spec) Reset() {
	*x = EnvironmentInitializer_Spec{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentInitializer_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentInitializer_Spec) ProtoMessage() {}

func (x *EnvironmentInitializer_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentInitializer_Spec.ProtoReflect.Descriptor instead.
func (*EnvironmentInitializer_Spec) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{18, 0}
}

func (m *EnvironmentInitializer_Spec) GetSpec() isEnvironmentInitializer_Spec_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *EnvironmentInitializer_Spec) GetGit() *GitInitializer {
	if x, ok := x.GetSpec().(*EnvironmentInitializer_Spec_Git); ok {
		return x.Git
	}
	return nil
}

func (x *EnvironmentInitializer_Spec) GetContextUrl() *ContextURLInitializer {
	if x, ok := x.GetSpec().(*EnvironmentInitializer_Spec_ContextUrl); ok {
		return x.ContextUrl
	}
	return nil
}

type isEnvironmentInitializer_Spec_Spec interface {
	isEnvironmentInitializer_Spec_Spec()
}

type EnvironmentInitializer_Spec_Git struct {
	Git *GitInitializer `protobuf:"bytes,1,opt,name=git,proto3,oneof"`
}

type EnvironmentInitializer_Spec_ContextUrl struct {
	ContextUrl *ContextURLInitializer `protobuf:"bytes,2,opt,name=context_url,json=contextUrl,proto3,oneof"`
}

func (*EnvironmentInitializer_Spec_Git) isEnvironmentInitializer_Spec_Spec() {}

func (*EnvironmentInitializer_Spec_ContextUrl) isEnvironmentInitializer_Spec_Spec() {}

type UpdateEnvironmentRequest_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session should be changed to trigger a content reinitialization
	Session *string `protobuf:"bytes,1,opt,name=session,proto3,oneof" json:"session,omitempty"`
	// initializer configures how the environment is to be initialized
	Initializer *EnvironmentInitializer `protobuf:"bytes,2,opt,name=initializer,proto3,oneof" json:"initializer,omitempty"`
	// The Git username
	GitUsername *string `protobuf:"bytes,3,opt,name=git_username,json=gitUsername,proto3,oneof" json:"git_username,omitempty"`
	// The Git email address
	GitEmail *string `protobuf:"bytes,4,opt,name=git_email,json=gitEmail,proto3,oneof" json:"git_email,omitempty"`
}

func (x *UpdateEnvironmentRequest_Content) Reset() {
	*x = UpdateEnvironmentRequest_Content{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentRequest_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentRequest_Content) ProtoMessage() {}

func (x *UpdateEnvironmentRequest_Content) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentRequest_Content.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentRequest_Content) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{25, 0}
}

func (x *UpdateEnvironmentRequest_Content) GetSession() string {
	if x != nil && x.Session != nil {
		return *x.Session
	}
	return ""
}

func (x *UpdateEnvironmentRequest_Content) GetInitializer() *EnvironmentInitializer {
	if x != nil {
		return x.Initializer
	}
	return nil
}

func (x *UpdateEnvironmentRequest_Content) GetGitUsername() string {
	if x != nil && x.GitUsername != nil {
		return *x.GitUsername
	}
	return ""
}

func (x *UpdateEnvironmentRequest_Content) GetGitEmail() string {
	if x != nil && x.GitEmail != nil {
		return *x.GitEmail
	}
	return ""
}

type UpdateEnvironmentRequest_SSHPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique identifier of the public key
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// value is the actual public key in the public key file format
	// if not provided, the public key will be removed
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *UpdateEnvironmentRequest_SSHPublicKey) Reset() {
	*x = UpdateEnvironmentRequest_SSHPublicKey{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentRequest_SSHPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentRequest_SSHPublicKey) ProtoMessage() {}

func (x *UpdateEnvironmentRequest_SSHPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentRequest_SSHPublicKey.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentRequest_SSHPublicKey) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{25, 1}
}

func (x *UpdateEnvironmentRequest_SSHPublicKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateEnvironmentRequest_SSHPublicKey) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type UpdateEnvironmentRequest_DevContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session should be changed to trigger a devcontainer rebuild
	Session *string `protobuf:"bytes,1,opt,name=session,proto3,oneof" json:"session,omitempty"`
	// devcontainer_file_path is the path to the devcontainer file relative to the repo root
	DevcontainerFilePath *string `protobuf:"bytes,2,opt,name=devcontainer_file_path,json=devcontainerFilePath,proto3,oneof" json:"devcontainer_file_path,omitempty"`
}

func (x *UpdateEnvironmentRequest_DevContainer) Reset() {
	*x = UpdateEnvironmentRequest_DevContainer{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentRequest_DevContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentRequest_DevContainer) ProtoMessage() {}

func (x *UpdateEnvironmentRequest_DevContainer) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentRequest_DevContainer.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentRequest_DevContainer) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{25, 2}
}

func (x *UpdateEnvironmentRequest_DevContainer) GetSession() string {
	if x != nil && x.Session != nil {
		return *x.Session
	}
	return ""
}

func (x *UpdateEnvironmentRequest_DevContainer) GetDevcontainerFilePath() string {
	if x != nil && x.DevcontainerFilePath != nil {
		return *x.DevcontainerFilePath
	}
	return ""
}

type UpdateEnvironmentRequest_Timeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inacitivity is the maximum time of disconnection before the environment is
	// stopped or paused. Minimum duration is 30 minutes. Set to 0 to disable.
	Disconnected *durationpb.Duration `protobuf:"bytes,1,opt,name=disconnected,proto3,oneof" json:"disconnected,omitempty"`
}

func (x *UpdateEnvironmentRequest_Timeout) Reset() {
	*x = UpdateEnvironmentRequest_Timeout{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentRequest_Timeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentRequest_Timeout) ProtoMessage() {}

func (x *UpdateEnvironmentRequest_Timeout) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentRequest_Timeout.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentRequest_Timeout) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{25, 3}
}

func (x *UpdateEnvironmentRequest_Timeout) GetDisconnected() *durationpb.Duration {
	if x != nil {
		return x.Disconnected
	}
	return nil
}

type UpdateEnvironmentRequest_AutomationsFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *string `protobuf:"bytes,1,opt,name=session,proto3,oneof" json:"session,omitempty"`
	// automations_file_path is the path to the automations file that is applied in the environment,
	// relative to the repo root.
	AutomationsFilePath *string `protobuf:"bytes,2,opt,name=automations_file_path,json=automationsFilePath,proto3,oneof" json:"automations_file_path,omitempty"`
}

func (x *UpdateEnvironmentRequest_AutomationsFile) Reset() {
	*x = UpdateEnvironmentRequest_AutomationsFile{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentRequest_AutomationsFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentRequest_AutomationsFile) ProtoMessage() {}

func (x *UpdateEnvironmentRequest_AutomationsFile) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentRequest_AutomationsFile.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentRequest_AutomationsFile) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{25, 4}
}

func (x *UpdateEnvironmentRequest_AutomationsFile) GetSession() string {
	if x != nil && x.Session != nil {
		return *x.Session
	}
	return ""
}

func (x *UpdateEnvironmentRequest_AutomationsFile) GetAutomationsFilePath() string {
	if x != nil && x.AutomationsFilePath != nil {
		return *x.AutomationsFilePath
	}
	return ""
}

type UpdateEnvironmentRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateEnvironmentRequest_Metadata) Reset() {
	*x = UpdateEnvironmentRequest_Metadata{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentRequest_Metadata) ProtoMessage() {}

func (x *UpdateEnvironmentRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentRequest_Metadata.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{25, 5}
}

type UpdateEnvironmentRequest_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content *UpdateEnvironmentRequest_Content `protobuf:"bytes,2,opt,name=content,proto3,oneof" json:"content,omitempty"`
	// ssh_public_keys are the public keys to update
	// empty array means nothing to update
	SshPublicKeys []*UpdateEnvironmentRequest_SSHPublicKey `protobuf:"bytes,3,rep,name=ssh_public_keys,json=sshPublicKeys,proto3" json:"ssh_public_keys,omitempty"`
	Devcontainer  *UpdateEnvironmentRequest_DevContainer   `protobuf:"bytes,4,opt,name=devcontainer,proto3,oneof" json:"devcontainer,omitempty"`
	// ports controls port sharing
	Ports []*EnvironmentSpec_EnvironmentPort `protobuf:"bytes,5,rep,name=ports,proto3" json:"ports,omitempty"`
	// Timeout configures the environment timeout
	Timeout *UpdateEnvironmentRequest_Timeout `protobuf:"bytes,6,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	// automations_file is the automations file spec of the environment
	AutomationsFile *UpdateEnvironmentRequest_AutomationsFile `protobuf:"bytes,7,opt,name=automations_file,json=automationsFile,proto3,oneof" json:"automations_file,omitempty"`
}

func (x *UpdateEnvironmentRequest_Spec) Reset() {
	*x = UpdateEnvironmentRequest_Spec{}
	mi := &file_gitpod_v1_environment_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentRequest_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentRequest_Spec) ProtoMessage() {}

func (x *UpdateEnvironmentRequest_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_environment_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentRequest_Spec.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentRequest_Spec) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_environment_proto_rawDescGZIP(), []int{25, 6}
}

func (x *UpdateEnvironmentRequest_Spec) GetContent() *UpdateEnvironmentRequest_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *UpdateEnvironmentRequest_Spec) GetSshPublicKeys() []*UpdateEnvironmentRequest_SSHPublicKey {
	if x != nil {
		return x.SshPublicKeys
	}
	return nil
}

func (x *UpdateEnvironmentRequest_Spec) GetDevcontainer() *UpdateEnvironmentRequest_DevContainer {
	if x != nil {
		return x.Devcontainer
	}
	return nil
}

func (x *UpdateEnvironmentRequest_Spec) GetPorts() []*EnvironmentSpec_EnvironmentPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *UpdateEnvironmentRequest_Spec) GetTimeout() *UpdateEnvironmentRequest_Timeout {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *UpdateEnvironmentRequest_Spec) GetAutomationsFile() *UpdateEnvironmentRequest_AutomationsFile {
	if x != nil {
		return x.AutomationsFile
	}
	return nil
}

var File_gitpod_v1_environment_proto protoreflect.FileDescriptor

var file_gitpod_v1_environment_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x01, 0x0a, 0x1c,
	0x4d, 0x61, 0x72, 0x6b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab,
	0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x22, 0x78, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x21, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba,
	0x48, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x50, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x1f, 0x0a, 0x1d, 0x4d, 0x61,
	0x72, 0x6b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9c, 0x05,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x11, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x69, 0x64, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0xb7, 0x03, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a,
	0x0a, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x28, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x13, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x09, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x66, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x24, 0xba, 0x48, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x00, 0x10, 0x19, 0xa2, 0xab, 0x1e, 0x16, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x29, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x14, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x29, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0xa2, 0xab, 0x1e, 0x14, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x64, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x42, 0x2a, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0xa2, 0xab, 0x1e, 0x15, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x52,
	0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x22, 0x95, 0x01, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0x55, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e,
	0x0c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x64, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x60, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x2b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x27, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x23, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xa2, 0xab,
	0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbc, 0x04, 0x0a, 0x13, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x49, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xba, 0x48, 0x08, 0xd0, 0x01,
	0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x11, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x69, 0x64, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x18, 0x50, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xa2, 0xab, 0x1e, 0x0b, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf2, 0x0e, 0x0a, 0x0f, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x3c,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x64, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x4f, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x53, 0x48, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x0d, 0x73, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x55, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x57, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xaa, 0x01, 0x07, 0x22, 0x00, 0x32, 0x03, 0x08,
	0x88, 0x0e, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x1a, 0x43, 0x0a, 0x07, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x1a, 0xbe, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x16,
	0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0xba, 0x48,
	0x5a, 0xba, 0x01, 0x57, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x2a, 0x70, 0x61, 0x74, 0x68, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x20, 0x28,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x2f, 0x29, 0x1a,
	0x1a, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e,
	0x24, 0x7c, 0x5e, 0x5b, 0x5e, 0x2f, 0x5d, 0x2e, 0x2a, 0x27, 0x29, 0x52, 0x14, 0x64, 0x65, 0x76,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x1a, 0x83, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x67,
	0x69, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x67, 0x69, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x1a, 0x8a, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xba, 0x48, 0x08, 0x1a, 0x06,
	0x10, 0xff, 0xff, 0x03, 0x20, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x09,
	0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x34, 0x0a, 0x0c, 0x53, 0x53, 0x48, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xbf, 0x01, 0x0a, 0x0f, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x15, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0xba, 0x48, 0x5a, 0xba, 0x01, 0x57,
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x2a, 0x70, 0x61, 0x74, 0x68, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x20, 0x28, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x2f, 0x29, 0x1a, 0x1a, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x24, 0x7c, 0x5e, 0x5b,
	0x5e, 0x2f, 0x5d, 0x2e, 0x2a, 0x27, 0x29, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xa3, 0x20, 0x0a,
	0x11, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x41, 0x43, 0x4b, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x6b,
	0x12, 0x31, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x10,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x52, 0x4c, 0x73, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x53, 0x48, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x73, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x57, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x1a, 0x47, 0x0a, 0x12, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x1f, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0x1a, 0x06, 0x10, 0xff, 0xff, 0x03, 0x20, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x1a, 0x25, 0x0a, 0x11, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x53, 0x48, 0x55, 0x52, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0xae, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x40, 0x0a, 0x03, 0x73,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x53, 0x48, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x73, 0x73, 0x68, 0x12, 0x45, 0x0a,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x52, 0x4c, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0xb8, 0x04, 0x0a, 0x07, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a,
	0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x66, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x05, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x1e, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x28, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x32, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x3c,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x46, 0x1a, 0xb2, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xd6, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0xd7, 0x06, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64,
	0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x49, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x70,
	0x0a, 0x1a, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0x6a, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x28, 0x22, 0x6d, 0x0a, 0x08,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x1a, 0xad, 0x02, 0x0a, 0x09,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x43, 0x4b, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x43, 0x4b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4f, 0x4b, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x5f, 0x0a, 0x0c, 0x53,
	0x53, 0x48, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x1a, 0xa8, 0x03, 0x0a,
	0x0f, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3f,
	0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x71, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x6a, 0x0a, 0x08, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x42,
	0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e,
	0x47, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x23, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x28, 0x22, 0xd1, 0x02, 0x0a, 0x14, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x10, 0x75, 0x6e, 0x70, 0x75, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x10, 0x65, 0x52, 0x0f, 0x75, 0x6e, 0x70, 0x75, 0x73,
	0x68, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x6e, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x44, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x10, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xd5, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4e, 0x41,
	0x4d, 0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x50, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x24, 0x0a,
	0x20, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x07, 0x22, 0xe2,
	0x01, 0x0a, 0x16, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x1a, 0x89, 0x01, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x2d, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12,
	0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x52, 0x4c, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x55, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x05, 0xba, 0x48,
	0x02, 0x08, 0x01, 0x22, 0x33, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x52,
	0x4c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0x88, 0x01, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc3, 0x03, 0x0a, 0x0e, 0x47, 0x69, 0x74,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x69, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x69, 0x12, 0x4a, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c,
	0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c,
	0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x04, 0x22, 0x5e,
	0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x10, 0x0a,
	0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x52,
	0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x1a,
	0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x16, 0x53, 0x74,
	0x6f, 0x70, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x74, 0x6f,
	0x70, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe0, 0x0d, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x88, 0x01, 0x01, 0x1a, 0xf7, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x48, 0x01, 0x52, 0x0b, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x67, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x67, 0x69, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x69, 0x74, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x1a, 0x43, 0x0a, 0x0c, 0x53, 0x53, 0x48, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xef, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x16, 0x64, 0x65, 0x76, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0xba, 0x48, 0x5a, 0xba, 0x01, 0x57,
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x2a, 0x70, 0x61, 0x74, 0x68, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x20, 0x28, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x2f, 0x29, 0x1a, 0x1a, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x24, 0x7c, 0x5e, 0x5b,
	0x5e, 0x2f, 0x5d, 0x2e, 0x2a, 0x27, 0x29, 0x48, 0x01, 0x52, 0x14, 0x64, 0x65, 0x76, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x6d, 0x0a, 0x07, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xaa, 0x01, 0x07, 0x22, 0x00, 0x32,
	0x03, 0x08, 0x88, 0x0e, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x1a, 0xef, 0x01, 0x0a, 0x0f, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x96, 0x01, 0x0a, 0x15,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0xba, 0x48, 0x5a,
	0xba, 0x01, 0x57, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x2a, 0x70, 0x61, 0x74, 0x68, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x20, 0x28, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x2f, 0x29, 0x1a, 0x1a,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x24,
	0x7c, 0x5e, 0x5b, 0x5e, 0x2f, 0x5d, 0x2e, 0x2a, 0x27, 0x29, 0x48, 0x01, 0x52, 0x13, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x0a, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xb8, 0x04, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x4a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0f, 0x73,
	0x73, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x53, 0x48, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x73, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x01, 0x52,
	0x0c, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x63,
	0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x03, 0x52,
	0x0f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0xa2, 0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2,
	0xab, 0x1e, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x69, 0x64, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x47, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2a, 0x6f, 0x0a, 0x0e, 0x41,
	0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x45, 0x56, 0x45, 0x52, 0x59, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0xb2, 0x02, 0x0a,
	0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x28, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x2d, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e,
	0x47, 0x10, 0x32, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x3c, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x46, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x50, 0x32, 0x93, 0x09, 0x0a, 0x12, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x90, 0x02, 0x01, 0x12, 0x60, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x72, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67,
	0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f,
	0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x4d, 0x61, 0x72,
	0x6b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x69, 0x6f, 0x2f,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitpod_v1_environment_proto_rawDescOnce sync.Once
	file_gitpod_v1_environment_proto_rawDescData = file_gitpod_v1_environment_proto_rawDesc
)

func file_gitpod_v1_environment_proto_rawDescGZIP() []byte {
	file_gitpod_v1_environment_proto_rawDescOnce.Do(func() {
		file_gitpod_v1_environment_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitpod_v1_environment_proto_rawDescData)
	})
	return file_gitpod_v1_environment_proto_rawDescData
}

var file_gitpod_v1_environment_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_gitpod_v1_environment_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_gitpod_v1_environment_proto_goTypes = []any{
	(AdmissionLevel)(0),                                 // 0: gitpod.v1.AdmissionLevel
	(EnvironmentPhase)(0),                               // 1: gitpod.v1.EnvironmentPhase
	(EnvironmentStatus_ContentPhase)(0),                 // 2: gitpod.v1.EnvironmentStatus.ContentPhase
	(EnvironmentStatus_Machine_Phase)(0),                // 3: gitpod.v1.EnvironmentStatus.Machine.Phase
	(EnvironmentStatus_DevContainer_Phase)(0),           // 4: gitpod.v1.EnvironmentStatus.DevContainer.Phase
	(EnvironmentStatus_DevContainer_Presence)(0),        // 5: gitpod.v1.EnvironmentStatus.DevContainer.Presence
	(EnvironmentStatus_RunnerACK_StatusCode)(0),         // 6: gitpod.v1.EnvironmentStatus.RunnerACK.StatusCode
	(EnvironmentStatus_AutomationsFile_Presence)(0),     // 7: gitpod.v1.EnvironmentStatus.AutomationsFile.Presence
	(FileChange_ChangeType)(0),                          // 8: gitpod.v1.FileChange.ChangeType
	(GitInitializer_CloneTargetMode)(0),                 // 9: gitpod.v1.GitInitializer.CloneTargetMode
	(*MarkEnvironmentActiveRequest)(nil),                // 10: gitpod.v1.MarkEnvironmentActiveRequest
	(*EnvironmentActivitySignal)(nil),                   // 11: gitpod.v1.EnvironmentActivitySignal
	(*MarkEnvironmentActiveResponse)(nil),               // 12: gitpod.v1.MarkEnvironmentActiveResponse
	(*GetEnvironmentRequest)(nil),                       // 13: gitpod.v1.GetEnvironmentRequest
	(*GetEnvironmentResponse)(nil),                      // 14: gitpod.v1.GetEnvironmentResponse
	(*ListEnvironmentsRequest)(nil),                     // 15: gitpod.v1.ListEnvironmentsRequest
	(*ListEnvironmentsResponse)(nil),                    // 16: gitpod.v1.ListEnvironmentsResponse
	(*CreateEnvironmentRequest)(nil),                    // 17: gitpod.v1.CreateEnvironmentRequest
	(*CreateEnvironmentResponse)(nil),                   // 18: gitpod.v1.CreateEnvironmentResponse
	(*CreateEnvironmentFromProjectRequest)(nil),         // 19: gitpod.v1.CreateEnvironmentFromProjectRequest
	(*CreateEnvironmentFromProjectResponse)(nil),        // 20: gitpod.v1.CreateEnvironmentFromProjectResponse
	(*CreateEnvironmentPreconditionFailureDetails)(nil), // 21: gitpod.v1.CreateEnvironmentPreconditionFailureDetails
	(*Environment)(nil),                                 // 22: gitpod.v1.Environment
	(*EnvironmentMetadata)(nil),                         // 23: gitpod.v1.EnvironmentMetadata
	(*EnvironmentSpec)(nil),                             // 24: gitpod.v1.EnvironmentSpec
	(*EnvironmentStatus)(nil),                           // 25: gitpod.v1.EnvironmentStatus
	(*EnvironmentGitStatus)(nil),                        // 26: gitpod.v1.EnvironmentGitStatus
	(*FileChange)(nil),                                  // 27: gitpod.v1.FileChange
	(*EnvironmentInitializer)(nil),                      // 28: gitpod.v1.EnvironmentInitializer
	(*ContextURLInitializer)(nil),                       // 29: gitpod.v1.ContextURLInitializer
	(*GitInitializer)(nil),                              // 30: gitpod.v1.GitInitializer
	(*StartEnvironmentRequest)(nil),                     // 31: gitpod.v1.StartEnvironmentRequest
	(*StartEnvironmentResponse)(nil),                    // 32: gitpod.v1.StartEnvironmentResponse
	(*StopEnvironmentRequest)(nil),                      // 33: gitpod.v1.StopEnvironmentRequest
	(*StopEnvironmentResponse)(nil),                     // 34: gitpod.v1.StopEnvironmentResponse
	(*UpdateEnvironmentRequest)(nil),                    // 35: gitpod.v1.UpdateEnvironmentRequest
	(*UpdateEnvironmentResponse)(nil),                   // 36: gitpod.v1.UpdateEnvironmentResponse
	(*DeleteEnvironmentRequest)(nil),                    // 37: gitpod.v1.DeleteEnvironmentRequest
	(*DeleteEnvironmentResponse)(nil),                   // 38: gitpod.v1.DeleteEnvironmentResponse
	(*CreateEnvironmentLogsTokenRequest)(nil),           // 39: gitpod.v1.CreateEnvironmentLogsTokenRequest
	(*CreateEnvironmentLogsTokenResponse)(nil),          // 40: gitpod.v1.CreateEnvironmentLogsTokenResponse
	(*ListEnvironmentsRequest_Filter)(nil),              // 41: gitpod.v1.ListEnvironmentsRequest.Filter
	nil,                                                 // 42: gitpod.v1.EnvironmentMetadata.AnnotationsEntry
	(*EnvironmentSpec_Timeout)(nil),                     // 43: gitpod.v1.EnvironmentSpec.Timeout
	(*EnvironmentSpec_Machine)(nil),                     // 44: gitpod.v1.EnvironmentSpec.Machine
	(*EnvironmentSpec_Content)(nil),                     // 45: gitpod.v1.EnvironmentSpec.Content
	(*EnvironmentSpec_DevContainer)(nil),                // 46: gitpod.v1.EnvironmentSpec.DevContainer
	(*EnvironmentSpec_Secret)(nil),                      // 47: gitpod.v1.EnvironmentSpec.Secret
	(*EnvironmentSpec_EnvironmentPort)(nil),             // 48: gitpod.v1.EnvironmentSpec.EnvironmentPort
	(*EnvironmentSpec_SSHPublicKey)(nil),                // 49: gitpod.v1.EnvironmentSpec.SSHPublicKey
	(*EnvironmentSpec_AutomationsFile)(nil),             // 50: gitpod.v1.EnvironmentSpec.AutomationsFile
	(*EnvironmentStatus_EnvironmentPortURL)(nil),        // 51: gitpod.v1.EnvironmentStatus.EnvironmentPortURL
	(*EnvironmentStatus_EnvironmentSSHURL)(nil),         // 52: gitpod.v1.EnvironmentStatus.EnvironmentSSHURL
	(*EnvironmentStatus_EnvironmentURLs)(nil),           // 53: gitpod.v1.EnvironmentStatus.EnvironmentURLs
	(*EnvironmentStatus_Machine)(nil),                   // 54: gitpod.v1.EnvironmentStatus.Machine
	(*EnvironmentStatus_Content)(nil),                   // 55: gitpod.v1.EnvironmentStatus.Content
	(*EnvironmentStatus_Secret)(nil),                    // 56: gitpod.v1.EnvironmentStatus.Secret
	(*EnvironmentStatus_DevContainer)(nil),              // 57: gitpod.v1.EnvironmentStatus.DevContainer
	(*EnvironmentStatus_RunnerACK)(nil),                 // 58: gitpod.v1.EnvironmentStatus.RunnerACK
	(*EnvironmentStatus_SSHPublicKey)(nil),              // 59: gitpod.v1.EnvironmentStatus.SSHPublicKey
	(*EnvironmentStatus_AutomationsFile)(nil),           // 60: gitpod.v1.EnvironmentStatus.AutomationsFile
	(*EnvironmentStatus_Machine_Versions)(nil),          // 61: gitpod.v1.EnvironmentStatus.Machine.Versions
	(*EnvironmentInitializer_Spec)(nil),                 // 62: gitpod.v1.EnvironmentInitializer.Spec
	(*UpdateEnvironmentRequest_Content)(nil),            // 63: gitpod.v1.UpdateEnvironmentRequest.Content
	(*UpdateEnvironmentRequest_SSHPublicKey)(nil),       // 64: gitpod.v1.UpdateEnvironmentRequest.SSHPublicKey
	(*UpdateEnvironmentRequest_DevContainer)(nil),       // 65: gitpod.v1.UpdateEnvironmentRequest.DevContainer
	(*UpdateEnvironmentRequest_Timeout)(nil),            // 66: gitpod.v1.UpdateEnvironmentRequest.Timeout
	(*UpdateEnvironmentRequest_AutomationsFile)(nil),    // 67: gitpod.v1.UpdateEnvironmentRequest.AutomationsFile
	(*UpdateEnvironmentRequest_Metadata)(nil),           // 68: gitpod.v1.UpdateEnvironmentRequest.Metadata
	(*UpdateEnvironmentRequest_Spec)(nil),               // 69: gitpod.v1.UpdateEnvironmentRequest.Spec
	(*timestamppb.Timestamp)(nil),                       // 70: google.protobuf.Timestamp
	(*PaginationRequest)(nil),                           // 71: gitpod.v1.PaginationRequest
	(*PaginationResponse)(nil),                          // 72: gitpod.v1.PaginationResponse
	(*Subject)(nil),                                     // 73: gitpod.v1.Subject
	(RunnerKind)(0),                                     // 74: gitpod.v1.RunnerKind
	(*durationpb.Duration)(nil),                         // 75: google.protobuf.Duration
	(*ListEnvironmentClassesRequest)(nil),               // 76: gitpod.v1.ListEnvironmentClassesRequest
	(*ListEnvironmentClassesResponse)(nil),              // 77: gitpod.v1.ListEnvironmentClassesResponse
}
var file_gitpod_v1_environment_proto_depIdxs = []int32{
	11, // 0: gitpod.v1.MarkEnvironmentActiveRequest.activity_signal:type_name -> gitpod.v1.EnvironmentActivitySignal
	70, // 1: gitpod.v1.EnvironmentActivitySignal.timestamp:type_name -> google.protobuf.Timestamp
	22, // 2: gitpod.v1.GetEnvironmentResponse.environment:type_name -> gitpod.v1.Environment
	71, // 3: gitpod.v1.ListEnvironmentsRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	41, // 4: gitpod.v1.ListEnvironmentsRequest.filter:type_name -> gitpod.v1.ListEnvironmentsRequest.Filter
	72, // 5: gitpod.v1.ListEnvironmentsResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	22, // 6: gitpod.v1.ListEnvironmentsResponse.environments:type_name -> gitpod.v1.Environment
	24, // 7: gitpod.v1.CreateEnvironmentRequest.spec:type_name -> gitpod.v1.EnvironmentSpec
	22, // 8: gitpod.v1.CreateEnvironmentResponse.environment:type_name -> gitpod.v1.Environment
	24, // 9: gitpod.v1.CreateEnvironmentFromProjectRequest.spec:type_name -> gitpod.v1.EnvironmentSpec
	22, // 10: gitpod.v1.CreateEnvironmentFromProjectResponse.environment:type_name -> gitpod.v1.Environment
	23, // 11: gitpod.v1.Environment.metadata:type_name -> gitpod.v1.EnvironmentMetadata
	24, // 12: gitpod.v1.Environment.spec:type_name -> gitpod.v1.EnvironmentSpec
	25, // 13: gitpod.v1.Environment.status:type_name -> gitpod.v1.EnvironmentStatus
	42, // 14: gitpod.v1.EnvironmentMetadata.annotations:type_name -> gitpod.v1.EnvironmentMetadata.AnnotationsEntry
	73, // 15: gitpod.v1.EnvironmentMetadata.creator:type_name -> gitpod.v1.Subject
	70, // 16: gitpod.v1.EnvironmentMetadata.created_at:type_name -> google.protobuf.Timestamp
	70, // 17: gitpod.v1.EnvironmentMetadata.last_started_at:type_name -> google.protobuf.Timestamp
	1,  // 18: gitpod.v1.EnvironmentSpec.desired_phase:type_name -> gitpod.v1.EnvironmentPhase
	44, // 19: gitpod.v1.EnvironmentSpec.machine:type_name -> gitpod.v1.EnvironmentSpec.Machine
	45, // 20: gitpod.v1.EnvironmentSpec.content:type_name -> gitpod.v1.EnvironmentSpec.Content
	47, // 21: gitpod.v1.EnvironmentSpec.secrets:type_name -> gitpod.v1.EnvironmentSpec.Secret
	48, // 22: gitpod.v1.EnvironmentSpec.ports:type_name -> gitpod.v1.EnvironmentSpec.EnvironmentPort
	43, // 23: gitpod.v1.EnvironmentSpec.timeout:type_name -> gitpod.v1.EnvironmentSpec.Timeout
	0,  // 24: gitpod.v1.EnvironmentSpec.admission:type_name -> gitpod.v1.AdmissionLevel
	46, // 25: gitpod.v1.EnvironmentSpec.devcontainer:type_name -> gitpod.v1.EnvironmentSpec.DevContainer
	49, // 26: gitpod.v1.EnvironmentSpec.ssh_public_keys:type_name -> gitpod.v1.EnvironmentSpec.SSHPublicKey
	50, // 27: gitpod.v1.EnvironmentSpec.automations_file:type_name -> gitpod.v1.EnvironmentSpec.AutomationsFile
	58, // 28: gitpod.v1.EnvironmentStatus.runner_ack:type_name -> gitpod.v1.EnvironmentStatus.RunnerACK
	1,  // 29: gitpod.v1.EnvironmentStatus.phase:type_name -> gitpod.v1.EnvironmentPhase
	53, // 30: gitpod.v1.EnvironmentStatus.environment_urls:type_name -> gitpod.v1.EnvironmentStatus.EnvironmentURLs
	54, // 31: gitpod.v1.EnvironmentStatus.machine:type_name -> gitpod.v1.EnvironmentStatus.Machine
	56, // 32: gitpod.v1.EnvironmentStatus.secrets:type_name -> gitpod.v1.EnvironmentStatus.Secret
	55, // 33: gitpod.v1.EnvironmentStatus.content:type_name -> gitpod.v1.EnvironmentStatus.Content
	57, // 34: gitpod.v1.EnvironmentStatus.devcontainer:type_name -> gitpod.v1.EnvironmentStatus.DevContainer
	59, // 35: gitpod.v1.EnvironmentStatus.ssh_public_keys:type_name -> gitpod.v1.EnvironmentStatus.SSHPublicKey
	60, // 36: gitpod.v1.EnvironmentStatus.automations_file:type_name -> gitpod.v1.EnvironmentStatus.AutomationsFile
	11, // 37: gitpod.v1.EnvironmentStatus.activity_signal:type_name -> gitpod.v1.EnvironmentActivitySignal
	27, // 38: gitpod.v1.EnvironmentGitStatus.changed_files:type_name -> gitpod.v1.FileChange
	8,  // 39: gitpod.v1.FileChange.change_type:type_name -> gitpod.v1.FileChange.ChangeType
	62, // 40: gitpod.v1.EnvironmentInitializer.specs:type_name -> gitpod.v1.EnvironmentInitializer.Spec
	9,  // 41: gitpod.v1.GitInitializer.target_mode:type_name -> gitpod.v1.GitInitializer.CloneTargetMode
	68, // 42: gitpod.v1.UpdateEnvironmentRequest.metadata:type_name -> gitpod.v1.UpdateEnvironmentRequest.Metadata
	69, // 43: gitpod.v1.UpdateEnvironmentRequest.spec:type_name -> gitpod.v1.UpdateEnvironmentRequest.Spec
	1,  // 44: gitpod.v1.ListEnvironmentsRequest.Filter.status_phases:type_name -> gitpod.v1.EnvironmentPhase
	74, // 45: gitpod.v1.ListEnvironmentsRequest.Filter.runner_kinds:type_name -> gitpod.v1.RunnerKind
	75, // 46: gitpod.v1.EnvironmentSpec.Timeout.disconnected:type_name -> google.protobuf.Duration
	28, // 47: gitpod.v1.EnvironmentSpec.Content.initializer:type_name -> gitpod.v1.EnvironmentInitializer
	0,  // 48: gitpod.v1.EnvironmentSpec.EnvironmentPort.admission:type_name -> gitpod.v1.AdmissionLevel
	52, // 49: gitpod.v1.EnvironmentStatus.EnvironmentURLs.ssh:type_name -> gitpod.v1.EnvironmentStatus.EnvironmentSSHURL
	51, // 50: gitpod.v1.EnvironmentStatus.EnvironmentURLs.ports:type_name -> gitpod.v1.EnvironmentStatus.EnvironmentPortURL
	3,  // 51: gitpod.v1.EnvironmentStatus.Machine.phase:type_name -> gitpod.v1.EnvironmentStatus.Machine.Phase
	61, // 52: gitpod.v1.EnvironmentStatus.Machine.versions:type_name -> gitpod.v1.EnvironmentStatus.Machine.Versions
	2,  // 53: gitpod.v1.EnvironmentStatus.Content.phase:type_name -> gitpod.v1.EnvironmentStatus.ContentPhase
	26, // 54: gitpod.v1.EnvironmentStatus.Content.git:type_name -> gitpod.v1.EnvironmentGitStatus
	2,  // 55: gitpod.v1.EnvironmentStatus.Secret.phase:type_name -> gitpod.v1.EnvironmentStatus.ContentPhase
	4,  // 56: gitpod.v1.EnvironmentStatus.DevContainer.phase:type_name -> gitpod.v1.EnvironmentStatus.DevContainer.Phase
	5,  // 57: gitpod.v1.EnvironmentStatus.DevContainer.devcontainer_file_presence:type_name -> gitpod.v1.EnvironmentStatus.DevContainer.Presence
	6,  // 58: gitpod.v1.EnvironmentStatus.RunnerACK.status_code:type_name -> gitpod.v1.EnvironmentStatus.RunnerACK.StatusCode
	2,  // 59: gitpod.v1.EnvironmentStatus.SSHPublicKey.phase:type_name -> gitpod.v1.EnvironmentStatus.ContentPhase
	2,  // 60: gitpod.v1.EnvironmentStatus.AutomationsFile.phase:type_name -> gitpod.v1.EnvironmentStatus.ContentPhase
	7,  // 61: gitpod.v1.EnvironmentStatus.AutomationsFile.automations_file_presence:type_name -> gitpod.v1.EnvironmentStatus.AutomationsFile.Presence
	30, // 62: gitpod.v1.EnvironmentInitializer.Spec.git:type_name -> gitpod.v1.GitInitializer
	29, // 63: gitpod.v1.EnvironmentInitializer.Spec.context_url:type_name -> gitpod.v1.ContextURLInitializer
	28, // 64: gitpod.v1.UpdateEnvironmentRequest.Content.initializer:type_name -> gitpod.v1.EnvironmentInitializer
	75, // 65: gitpod.v1.UpdateEnvironmentRequest.Timeout.disconnected:type_name -> google.protobuf.Duration
	63, // 66: gitpod.v1.UpdateEnvironmentRequest.Spec.content:type_name -> gitpod.v1.UpdateEnvironmentRequest.Content
	64, // 67: gitpod.v1.UpdateEnvironmentRequest.Spec.ssh_public_keys:type_name -> gitpod.v1.UpdateEnvironmentRequest.SSHPublicKey
	65, // 68: gitpod.v1.UpdateEnvironmentRequest.Spec.devcontainer:type_name -> gitpod.v1.UpdateEnvironmentRequest.DevContainer
	48, // 69: gitpod.v1.UpdateEnvironmentRequest.Spec.ports:type_name -> gitpod.v1.EnvironmentSpec.EnvironmentPort
	66, // 70: gitpod.v1.UpdateEnvironmentRequest.Spec.timeout:type_name -> gitpod.v1.UpdateEnvironmentRequest.Timeout
	67, // 71: gitpod.v1.UpdateEnvironmentRequest.Spec.automations_file:type_name -> gitpod.v1.UpdateEnvironmentRequest.AutomationsFile
	13, // 72: gitpod.v1.EnvironmentService.GetEnvironment:input_type -> gitpod.v1.GetEnvironmentRequest
	15, // 73: gitpod.v1.EnvironmentService.ListEnvironments:input_type -> gitpod.v1.ListEnvironmentsRequest
	76, // 74: gitpod.v1.EnvironmentService.ListEnvironmentClasses:input_type -> gitpod.v1.ListEnvironmentClassesRequest
	17, // 75: gitpod.v1.EnvironmentService.CreateEnvironment:input_type -> gitpod.v1.CreateEnvironmentRequest
	19, // 76: gitpod.v1.EnvironmentService.CreateEnvironmentFromProject:input_type -> gitpod.v1.CreateEnvironmentFromProjectRequest
	31, // 77: gitpod.v1.EnvironmentService.StartEnvironment:input_type -> gitpod.v1.StartEnvironmentRequest
	33, // 78: gitpod.v1.EnvironmentService.StopEnvironment:input_type -> gitpod.v1.StopEnvironmentRequest
	35, // 79: gitpod.v1.EnvironmentService.UpdateEnvironment:input_type -> gitpod.v1.UpdateEnvironmentRequest
	37, // 80: gitpod.v1.EnvironmentService.DeleteEnvironment:input_type -> gitpod.v1.DeleteEnvironmentRequest
	39, // 81: gitpod.v1.EnvironmentService.CreateEnvironmentLogsToken:input_type -> gitpod.v1.CreateEnvironmentLogsTokenRequest
	10, // 82: gitpod.v1.EnvironmentService.MarkEnvironmentActive:input_type -> gitpod.v1.MarkEnvironmentActiveRequest
	14, // 83: gitpod.v1.EnvironmentService.GetEnvironment:output_type -> gitpod.v1.GetEnvironmentResponse
	16, // 84: gitpod.v1.EnvironmentService.ListEnvironments:output_type -> gitpod.v1.ListEnvironmentsResponse
	77, // 85: gitpod.v1.EnvironmentService.ListEnvironmentClasses:output_type -> gitpod.v1.ListEnvironmentClassesResponse
	18, // 86: gitpod.v1.EnvironmentService.CreateEnvironment:output_type -> gitpod.v1.CreateEnvironmentResponse
	20, // 87: gitpod.v1.EnvironmentService.CreateEnvironmentFromProject:output_type -> gitpod.v1.CreateEnvironmentFromProjectResponse
	32, // 88: gitpod.v1.EnvironmentService.StartEnvironment:output_type -> gitpod.v1.StartEnvironmentResponse
	34, // 89: gitpod.v1.EnvironmentService.StopEnvironment:output_type -> gitpod.v1.StopEnvironmentResponse
	36, // 90: gitpod.v1.EnvironmentService.UpdateEnvironment:output_type -> gitpod.v1.UpdateEnvironmentResponse
	38, // 91: gitpod.v1.EnvironmentService.DeleteEnvironment:output_type -> gitpod.v1.DeleteEnvironmentResponse
	40, // 92: gitpod.v1.EnvironmentService.CreateEnvironmentLogsToken:output_type -> gitpod.v1.CreateEnvironmentLogsTokenResponse
	12, // 93: gitpod.v1.EnvironmentService.MarkEnvironmentActive:output_type -> gitpod.v1.MarkEnvironmentActiveResponse
	83, // [83:94] is the sub-list for method output_type
	72, // [72:83] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_gitpod_v1_environment_proto_init() }
func file_gitpod_v1_environment_proto_init() {
	if File_gitpod_v1_environment_proto != nil {
		return
	}
	file_gitpod_v1_identity_proto_init()
	file_gitpod_v1_pagination_proto_init()
	file_gitpod_v1_runner_proto_init()
	file_gitpod_v1_runner_configuration_proto_init()
	file_gitpod_v1_environment_proto_msgTypes[25].OneofWrappers = []any{}
	file_gitpod_v1_environment_proto_msgTypes[37].OneofWrappers = []any{
		(*EnvironmentSpec_Secret_FilePath)(nil),
		(*EnvironmentSpec_Secret_EnvironmentVariable)(nil),
		(*EnvironmentSpec_Secret_GitCredentialHost)(nil),
	}
	file_gitpod_v1_environment_proto_msgTypes[52].OneofWrappers = []any{
		(*EnvironmentInitializer_Spec_Git)(nil),
		(*EnvironmentInitializer_Spec_ContextUrl)(nil),
	}
	file_gitpod_v1_environment_proto_msgTypes[53].OneofWrappers = []any{}
	file_gitpod_v1_environment_proto_msgTypes[54].OneofWrappers = []any{}
	file_gitpod_v1_environment_proto_msgTypes[55].OneofWrappers = []any{}
	file_gitpod_v1_environment_proto_msgTypes[56].OneofWrappers = []any{}
	file_gitpod_v1_environment_proto_msgTypes[57].OneofWrappers = []any{}
	file_gitpod_v1_environment_proto_msgTypes[59].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitpod_v1_environment_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitpod_v1_environment_proto_goTypes,
		DependencyIndexes: file_gitpod_v1_environment_proto_depIdxs,
		EnumInfos:         file_gitpod_v1_environment_proto_enumTypes,
		MessageInfos:      file_gitpod_v1_environment_proto_msgTypes,
	}.Build()
	File_gitpod_v1_environment_proto = out.File
	file_gitpod_v1_environment_proto_rawDesc = nil
	file_gitpod_v1_environment_proto_goTypes = nil
	file_gitpod_v1_environment_proto_depIdxs = nil
}
