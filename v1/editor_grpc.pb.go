// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gitpod/v1/editor.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EditorService_ListEditors_FullMethodName      = "/gitpod.v1.EditorService/ListEditors"
	EditorService_GetEditor_FullMethodName        = "/gitpod.v1.EditorService/GetEditor"
	EditorService_ResolveEditorURL_FullMethodName = "/gitpod.v1.EditorService/ResolveEditorURL"
)

// EditorServiceClient is the client API for EditorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EditorServiceClient interface {
	// ListEditors lists all editors available to the caller
	ListEditors(ctx context.Context, in *ListEditorsRequest, opts ...grpc.CallOption) (*ListEditorsResponse, error)
	// GetEditor returns the editor with the given ID
	GetEditor(ctx context.Context, in *GetEditorRequest, opts ...grpc.CallOption) (*GetEditorResponse, error)
	// ResolveEditorURL resolves the editor's URL for an environment
	ResolveEditorURL(ctx context.Context, in *ResolveEditorURLRequest, opts ...grpc.CallOption) (*ResolveEditorURLResponse, error)
}

type editorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEditorServiceClient(cc grpc.ClientConnInterface) EditorServiceClient {
	return &editorServiceClient{cc}
}

func (c *editorServiceClient) ListEditors(ctx context.Context, in *ListEditorsRequest, opts ...grpc.CallOption) (*ListEditorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEditorsResponse)
	err := c.cc.Invoke(ctx, EditorService_ListEditors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editorServiceClient) GetEditor(ctx context.Context, in *GetEditorRequest, opts ...grpc.CallOption) (*GetEditorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEditorResponse)
	err := c.cc.Invoke(ctx, EditorService_GetEditor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editorServiceClient) ResolveEditorURL(ctx context.Context, in *ResolveEditorURLRequest, opts ...grpc.CallOption) (*ResolveEditorURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveEditorURLResponse)
	err := c.cc.Invoke(ctx, EditorService_ResolveEditorURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EditorServiceServer is the server API for EditorService service.
// All implementations must embed UnimplementedEditorServiceServer
// for forward compatibility.
type EditorServiceServer interface {
	// ListEditors lists all editors available to the caller
	ListEditors(context.Context, *ListEditorsRequest) (*ListEditorsResponse, error)
	// GetEditor returns the editor with the given ID
	GetEditor(context.Context, *GetEditorRequest) (*GetEditorResponse, error)
	// ResolveEditorURL resolves the editor's URL for an environment
	ResolveEditorURL(context.Context, *ResolveEditorURLRequest) (*ResolveEditorURLResponse, error)
	mustEmbedUnimplementedEditorServiceServer()
}

// UnimplementedEditorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEditorServiceServer struct{}

func (UnimplementedEditorServiceServer) ListEditors(context.Context, *ListEditorsRequest) (*ListEditorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEditors not implemented")
}
func (UnimplementedEditorServiceServer) GetEditor(context.Context, *GetEditorRequest) (*GetEditorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEditor not implemented")
}
func (UnimplementedEditorServiceServer) ResolveEditorURL(context.Context, *ResolveEditorURLRequest) (*ResolveEditorURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveEditorURL not implemented")
}
func (UnimplementedEditorServiceServer) mustEmbedUnimplementedEditorServiceServer() {}
func (UnimplementedEditorServiceServer) testEmbeddedByValue()                       {}

// UnsafeEditorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EditorServiceServer will
// result in compilation errors.
type UnsafeEditorServiceServer interface {
	mustEmbedUnimplementedEditorServiceServer()
}

func RegisterEditorServiceServer(s grpc.ServiceRegistrar, srv EditorServiceServer) {
	// If the following call pancis, it indicates UnimplementedEditorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EditorService_ServiceDesc, srv)
}

func _EditorService_ListEditors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEditorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorServiceServer).ListEditors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EditorService_ListEditors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorServiceServer).ListEditors(ctx, req.(*ListEditorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EditorService_GetEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEditorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorServiceServer).GetEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EditorService_GetEditor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorServiceServer).GetEditor(ctx, req.(*GetEditorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EditorService_ResolveEditorURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveEditorURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorServiceServer).ResolveEditorURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EditorService_ResolveEditorURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorServiceServer).ResolveEditorURL(ctx, req.(*ResolveEditorURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EditorService_ServiceDesc is the grpc.ServiceDesc for EditorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EditorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitpod.v1.EditorService",
	HandlerType: (*EditorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEditors",
			Handler:    _EditorService_ListEditors_Handler,
		},
		{
			MethodName: "GetEditor",
			Handler:    _EditorService_GetEditor_Handler,
		},
		{
			MethodName: "ResolveEditorURL",
			Handler:    _EditorService_ResolveEditorURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitpod/v1/editor.proto",
}
