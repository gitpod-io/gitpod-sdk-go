// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: gitpod/v1/event.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceOperation int32

const (
	ResourceOperation_RESOURCE_OPERATION_UNSPECIFIED ResourceOperation = 0
	ResourceOperation_RESOURCE_OPERATION_CREATE      ResourceOperation = 1
	ResourceOperation_RESOURCE_OPERATION_UPDATE      ResourceOperation = 2
	ResourceOperation_RESOURCE_OPERATION_DELETE      ResourceOperation = 3
	// UPDATE_STATUS is emitted only iff the resource's status has been updated. If the status and something else
	// are updated, a single UPDATE event is emitted.
	ResourceOperation_RESOURCE_OPERATION_UPDATE_STATUS ResourceOperation = 4
)

// Enum value maps for ResourceOperation.
var (
	ResourceOperation_name = map[int32]string{
		0: "RESOURCE_OPERATION_UNSPECIFIED",
		1: "RESOURCE_OPERATION_CREATE",
		2: "RESOURCE_OPERATION_UPDATE",
		3: "RESOURCE_OPERATION_DELETE",
		4: "RESOURCE_OPERATION_UPDATE_STATUS",
	}
	ResourceOperation_value = map[string]int32{
		"RESOURCE_OPERATION_UNSPECIFIED":   0,
		"RESOURCE_OPERATION_CREATE":        1,
		"RESOURCE_OPERATION_UPDATE":        2,
		"RESOURCE_OPERATION_DELETE":        3,
		"RESOURCE_OPERATION_UPDATE_STATUS": 4,
	}
)

func (x ResourceOperation) Enum() *ResourceOperation {
	p := new(ResourceOperation)
	*p = x
	return p
}

func (x ResourceOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_event_proto_enumTypes[0].Descriptor()
}

func (ResourceOperation) Type() protoreflect.EnumType {
	return &file_gitpod_v1_event_proto_enumTypes[0]
}

func (x ResourceOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceOperation.Descriptor instead.
func (ResourceOperation) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_event_proto_rawDescGZIP(), []int{0}
}

type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_UNSPECIFIED               ResourceType = 0
	ResourceType_RESOURCE_TYPE_ENVIRONMENT               ResourceType = 1
	ResourceType_RESOURCE_TYPE_RUNNER                    ResourceType = 2
	ResourceType_RESOURCE_TYPE_PROJECT                   ResourceType = 3
	ResourceType_RESOURCE_TYPE_TASK                      ResourceType = 4
	ResourceType_RESOURCE_TYPE_TASK_EXECUTION            ResourceType = 5
	ResourceType_RESOURCE_TYPE_SERVICE                   ResourceType = 6
	ResourceType_RESOURCE_TYPE_ORGANIZATION              ResourceType = 7
	ResourceType_RESOURCE_TYPE_USER                      ResourceType = 8
	ResourceType_RESOURCE_TYPE_ENVIRONMENT_CLASS         ResourceType = 9
	ResourceType_RESOURCE_TYPE_RUNNER_SCM_INTEGRATION    ResourceType = 10
	ResourceType_RESOURCE_TYPE_HOST_AUTHENTICATION_TOKEN ResourceType = 11
	ResourceType_RESOURCE_TYPE_GROUP                     ResourceType = 12
	ResourceType_RESOURCE_TYPE_PERSONAL_ACCESS_TOKEN     ResourceType = 13
	ResourceType_RESOURCE_TYPE_USER_PREFERENCE           ResourceType = 14
	ResourceType_RESOURCE_TYPE_SERVICE_ACCOUNT           ResourceType = 15
	ResourceType_RESOURCE_TYPE_SECRET                    ResourceType = 16
	ResourceType_RESOURCE_TYPE_SSO_CONFIG                ResourceType = 17
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0:  "RESOURCE_TYPE_UNSPECIFIED",
		1:  "RESOURCE_TYPE_ENVIRONMENT",
		2:  "RESOURCE_TYPE_RUNNER",
		3:  "RESOURCE_TYPE_PROJECT",
		4:  "RESOURCE_TYPE_TASK",
		5:  "RESOURCE_TYPE_TASK_EXECUTION",
		6:  "RESOURCE_TYPE_SERVICE",
		7:  "RESOURCE_TYPE_ORGANIZATION",
		8:  "RESOURCE_TYPE_USER",
		9:  "RESOURCE_TYPE_ENVIRONMENT_CLASS",
		10: "RESOURCE_TYPE_RUNNER_SCM_INTEGRATION",
		11: "RESOURCE_TYPE_HOST_AUTHENTICATION_TOKEN",
		12: "RESOURCE_TYPE_GROUP",
		13: "RESOURCE_TYPE_PERSONAL_ACCESS_TOKEN",
		14: "RESOURCE_TYPE_USER_PREFERENCE",
		15: "RESOURCE_TYPE_SERVICE_ACCOUNT",
		16: "RESOURCE_TYPE_SECRET",
		17: "RESOURCE_TYPE_SSO_CONFIG",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED":               0,
		"RESOURCE_TYPE_ENVIRONMENT":               1,
		"RESOURCE_TYPE_RUNNER":                    2,
		"RESOURCE_TYPE_PROJECT":                   3,
		"RESOURCE_TYPE_TASK":                      4,
		"RESOURCE_TYPE_TASK_EXECUTION":            5,
		"RESOURCE_TYPE_SERVICE":                   6,
		"RESOURCE_TYPE_ORGANIZATION":              7,
		"RESOURCE_TYPE_USER":                      8,
		"RESOURCE_TYPE_ENVIRONMENT_CLASS":         9,
		"RESOURCE_TYPE_RUNNER_SCM_INTEGRATION":    10,
		"RESOURCE_TYPE_HOST_AUTHENTICATION_TOKEN": 11,
		"RESOURCE_TYPE_GROUP":                     12,
		"RESOURCE_TYPE_PERSONAL_ACCESS_TOKEN":     13,
		"RESOURCE_TYPE_USER_PREFERENCE":           14,
		"RESOURCE_TYPE_SERVICE_ACCOUNT":           15,
		"RESOURCE_TYPE_SECRET":                    16,
		"RESOURCE_TYPE_SSO_CONFIG":                17,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitpod_v1_event_proto_enumTypes[1].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_gitpod_v1_event_proto_enumTypes[1]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_gitpod_v1_event_proto_rawDescGZIP(), []int{1}
}

type WatchEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scope defines the kind of events one watches. If no value is provided we default to organization scope.
	//
	// Types that are assignable to Scope:
	//
	//	*WatchEventsRequest_Organization
	//	*WatchEventsRequest_EnvironmentId
	Scope isWatchEventsRequest_Scope `protobuf_oneof:"scope"`
}

func (x *WatchEventsRequest) Reset() {
	*x = WatchEventsRequest{}
	mi := &file_gitpod_v1_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchEventsRequest) ProtoMessage() {}

func (x *WatchEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchEventsRequest.ProtoReflect.Descriptor instead.
func (*WatchEventsRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_event_proto_rawDescGZIP(), []int{0}
}

func (m *WatchEventsRequest) GetScope() isWatchEventsRequest_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *WatchEventsRequest) GetOrganization() bool {
	if x, ok := x.GetScope().(*WatchEventsRequest_Organization); ok {
		return x.Organization
	}
	return false
}

func (x *WatchEventsRequest) GetEnvironmentId() string {
	if x, ok := x.GetScope().(*WatchEventsRequest_EnvironmentId); ok {
		return x.EnvironmentId
	}
	return ""
}

type isWatchEventsRequest_Scope interface {
	isWatchEventsRequest_Scope()
}

type WatchEventsRequest_Organization struct {
	// Organization scope produces events for all projects, runners and environments
	// the caller can see within their organization. No task, task execution or service events
	// are produed.
	Organization bool `protobuf:"varint,1,opt,name=organization,proto3,oneof"`
}

type WatchEventsRequest_EnvironmentId struct {
	// Environment scope produces events for the environment itself, all tasks, task executions,
	// and services associated with that environment.
	EnvironmentId string `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3,oneof"`
}

func (*WatchEventsRequest_Organization) isWatchEventsRequest_Scope() {}

func (*WatchEventsRequest_EnvironmentId) isWatchEventsRequest_Scope() {}

type WatchEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation    ResourceOperation `protobuf:"varint,1,opt,name=operation,proto3,enum=gitpod.v1.ResourceOperation" json:"operation,omitempty"`
	ResourceType ResourceType      `protobuf:"varint,2,opt,name=resource_type,json=resourceType,proto3,enum=gitpod.v1.ResourceType" json:"resource_type,omitempty"`
	ResourceId   string            `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *WatchEventsResponse) Reset() {
	*x = WatchEventsResponse{}
	mi := &file_gitpod_v1_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchEventsResponse) ProtoMessage() {}

func (x *WatchEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchEventsResponse.ProtoReflect.Descriptor instead.
func (*WatchEventsResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_event_proto_rawDescGZIP(), []int{1}
}

func (x *WatchEventsResponse) GetOperation() ResourceOperation {
	if x != nil {
		return x.Operation
	}
	return ResourceOperation_RESOURCE_OPERATION_UNSPECIFIED
}

func (x *WatchEventsResponse) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_UNSPECIFIED
}

func (x *WatchEventsResponse) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type ListAuditLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination contains the pagination options for listing environments
	Pagination *PaginationRequest           `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filter     *ListAuditLogsRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListAuditLogsRequest) Reset() {
	*x = ListAuditLogsRequest{}
	mi := &file_gitpod_v1_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuditLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogsRequest) ProtoMessage() {}

func (x *ListAuditLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogsRequest.ProtoReflect.Descriptor instead.
func (*ListAuditLogsRequest) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_event_proto_rawDescGZIP(), []int{2}
}

func (x *ListAuditLogsRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListAuditLogsRequest) GetFilter() *ListAuditLogsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListAuditLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ListAuditLogsResponse_AuditLogEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	// pagination contains the pagination options for listing environments
	Pagination *PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListAuditLogsResponse) Reset() {
	*x = ListAuditLogsResponse{}
	mi := &file_gitpod_v1_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuditLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogsResponse) ProtoMessage() {}

func (x *ListAuditLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogsResponse.ProtoReflect.Descriptor instead.
func (*ListAuditLogsResponse) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_event_proto_rawDescGZIP(), []int{3}
}

func (x *ListAuditLogsResponse) GetEntries() []*ListAuditLogsResponse_AuditLogEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ListAuditLogsResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListAuditLogsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorIds        []string       `protobuf:"bytes,1,rep,name=actor_ids,json=actorIds,proto3" json:"actor_ids,omitempty"`
	ActorPrincipals []Principal    `protobuf:"varint,2,rep,packed,name=actor_principals,json=actorPrincipals,proto3,enum=gitpod.v1.Principal" json:"actor_principals,omitempty"`
	SubjectIds      []string       `protobuf:"bytes,3,rep,name=subject_ids,json=subjectIds,proto3" json:"subject_ids,omitempty"`
	SubjectTypes    []ResourceType `protobuf:"varint,4,rep,packed,name=subject_types,json=subjectTypes,proto3,enum=gitpod.v1.ResourceType" json:"subject_types,omitempty"`
}

func (x *ListAuditLogsRequest_Filter) Reset() {
	*x = ListAuditLogsRequest_Filter{}
	mi := &file_gitpod_v1_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuditLogsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogsRequest_Filter) ProtoMessage() {}

func (x *ListAuditLogsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListAuditLogsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_event_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ListAuditLogsRequest_Filter) GetActorIds() []string {
	if x != nil {
		return x.ActorIds
	}
	return nil
}

func (x *ListAuditLogsRequest_Filter) GetActorPrincipals() []Principal {
	if x != nil {
		return x.ActorPrincipals
	}
	return nil
}

func (x *ListAuditLogsRequest_Filter) GetSubjectIds() []string {
	if x != nil {
		return x.SubjectIds
	}
	return nil
}

func (x *ListAuditLogsRequest_Filter) GetSubjectTypes() []ResourceType {
	if x != nil {
		return x.SubjectTypes
	}
	return nil
}

type ListAuditLogsResponse_AuditLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ActorId        string                 `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActorPrincipal Principal              `protobuf:"varint,3,opt,name=actor_principal,json=actorPrincipal,proto3,enum=gitpod.v1.Principal" json:"actor_principal,omitempty"`
	SubjectId      string                 `protobuf:"bytes,4,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	SubjectType    ResourceType           `protobuf:"varint,5,opt,name=subject_type,json=subjectType,proto3,enum=gitpod.v1.ResourceType" json:"subject_type,omitempty"`
	Action         string                 `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ListAuditLogsResponse_AuditLogEntry) Reset() {
	*x = ListAuditLogsResponse_AuditLogEntry{}
	mi := &file_gitpod_v1_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuditLogsResponse_AuditLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogsResponse_AuditLogEntry) ProtoMessage() {}

func (x *ListAuditLogsResponse_AuditLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_gitpod_v1_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogsResponse_AuditLogEntry.ProtoReflect.Descriptor instead.
func (*ListAuditLogsResponse_AuditLogEntry) Descriptor() ([]byte, []int) {
	return file_gitpod_v1_event_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListAuditLogsResponse_AuditLogEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListAuditLogsResponse_AuditLogEntry) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *ListAuditLogsResponse_AuditLogEntry) GetActorPrincipal() Principal {
	if x != nil {
		return x.ActorPrincipal
	}
	return Principal_PRINCIPAL_UNSPECIFIED
}

func (x *ListAuditLogsResponse_AuditLogEntry) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *ListAuditLogsResponse_AuditLogEntry) GetSubjectType() ResourceType {
	if x != nil {
		return x.SubjectType
	}
	return ResourceType_RESOURCE_TYPE_UNSPECIFIED
}

func (x *ListAuditLogsResponse_AuditLogEntry) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ListAuditLogsResponse_AuditLogEntry) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_gitpod_v1_event_proto protoreflect.FileDescriptor

var file_gitpod_v1_event_proto_rawDesc = []byte{
	0x0a, 0x15, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x6f, 0x67, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x8d, 0x04, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xf6, 0x02, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x27, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08,
	0x00, 0x10, 0x19, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x12, 0x0a, 0x10,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x6f, 0x0a, 0x10, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x2e, 0xba, 0x48, 0x0e, 0x92,
	0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0xa2, 0xab, 0x1e,
	0x19, 0x0a, 0x17, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x29, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08, 0x00, 0x10, 0x19, 0x22, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0xa2, 0xab, 0x1e, 0x14, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x52, 0x0a, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x69, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2b, 0xba, 0x48, 0x0e, 0x92, 0x01, 0x0b, 0x08,
	0x00, 0x10, 0x19, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0xa2, 0xab, 0x1e, 0x16, 0x0a, 0x14,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0xca, 0x03, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74,
	0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa7, 0x02, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a,
	0xba, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x04, 0x2a, 0xca, 0x04, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e,
	0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x08, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x4d, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x0c, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x0e, 0x12, 0x21,
	0x0a, 0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x0f, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x53, 0x4f,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x11, 0x32, 0xb9, 0x01, 0x0a, 0x0c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x70,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1f, 0x2e,
	0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x70, 0x6f, 0x64, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x69,
	0x74, 0x70, 0x6f, 0x64, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitpod_v1_event_proto_rawDescOnce sync.Once
	file_gitpod_v1_event_proto_rawDescData = file_gitpod_v1_event_proto_rawDesc
)

func file_gitpod_v1_event_proto_rawDescGZIP() []byte {
	file_gitpod_v1_event_proto_rawDescOnce.Do(func() {
		file_gitpod_v1_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitpod_v1_event_proto_rawDescData)
	})
	return file_gitpod_v1_event_proto_rawDescData
}

var file_gitpod_v1_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gitpod_v1_event_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_gitpod_v1_event_proto_goTypes = []any{
	(ResourceOperation)(0),                      // 0: gitpod.v1.ResourceOperation
	(ResourceType)(0),                           // 1: gitpod.v1.ResourceType
	(*WatchEventsRequest)(nil),                  // 2: gitpod.v1.WatchEventsRequest
	(*WatchEventsResponse)(nil),                 // 3: gitpod.v1.WatchEventsResponse
	(*ListAuditLogsRequest)(nil),                // 4: gitpod.v1.ListAuditLogsRequest
	(*ListAuditLogsResponse)(nil),               // 5: gitpod.v1.ListAuditLogsResponse
	(*ListAuditLogsRequest_Filter)(nil),         // 6: gitpod.v1.ListAuditLogsRequest.Filter
	(*ListAuditLogsResponse_AuditLogEntry)(nil), // 7: gitpod.v1.ListAuditLogsResponse.AuditLogEntry
	(*PaginationRequest)(nil),                   // 8: gitpod.v1.PaginationRequest
	(*PaginationResponse)(nil),                  // 9: gitpod.v1.PaginationResponse
	(Principal)(0),                              // 10: gitpod.v1.Principal
	(*timestamppb.Timestamp)(nil),               // 11: google.protobuf.Timestamp
}
var file_gitpod_v1_event_proto_depIdxs = []int32{
	0,  // 0: gitpod.v1.WatchEventsResponse.operation:type_name -> gitpod.v1.ResourceOperation
	1,  // 1: gitpod.v1.WatchEventsResponse.resource_type:type_name -> gitpod.v1.ResourceType
	8,  // 2: gitpod.v1.ListAuditLogsRequest.pagination:type_name -> gitpod.v1.PaginationRequest
	6,  // 3: gitpod.v1.ListAuditLogsRequest.filter:type_name -> gitpod.v1.ListAuditLogsRequest.Filter
	7,  // 4: gitpod.v1.ListAuditLogsResponse.entries:type_name -> gitpod.v1.ListAuditLogsResponse.AuditLogEntry
	9,  // 5: gitpod.v1.ListAuditLogsResponse.pagination:type_name -> gitpod.v1.PaginationResponse
	10, // 6: gitpod.v1.ListAuditLogsRequest.Filter.actor_principals:type_name -> gitpod.v1.Principal
	1,  // 7: gitpod.v1.ListAuditLogsRequest.Filter.subject_types:type_name -> gitpod.v1.ResourceType
	10, // 8: gitpod.v1.ListAuditLogsResponse.AuditLogEntry.actor_principal:type_name -> gitpod.v1.Principal
	1,  // 9: gitpod.v1.ListAuditLogsResponse.AuditLogEntry.subject_type:type_name -> gitpod.v1.ResourceType
	11, // 10: gitpod.v1.ListAuditLogsResponse.AuditLogEntry.created_at:type_name -> google.protobuf.Timestamp
	2,  // 11: gitpod.v1.EventService.WatchEvents:input_type -> gitpod.v1.WatchEventsRequest
	4,  // 12: gitpod.v1.EventService.ListAuditLogs:input_type -> gitpod.v1.ListAuditLogsRequest
	3,  // 13: gitpod.v1.EventService.WatchEvents:output_type -> gitpod.v1.WatchEventsResponse
	5,  // 14: gitpod.v1.EventService.ListAuditLogs:output_type -> gitpod.v1.ListAuditLogsResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_gitpod_v1_event_proto_init() }
func file_gitpod_v1_event_proto_init() {
	if File_gitpod_v1_event_proto != nil {
		return
	}
	file_gitpod_v1_identity_proto_init()
	file_gitpod_v1_pagination_proto_init()
	file_gitpod_v1_event_proto_msgTypes[0].OneofWrappers = []any{
		(*WatchEventsRequest_Organization)(nil),
		(*WatchEventsRequest_EnvironmentId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitpod_v1_event_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitpod_v1_event_proto_goTypes,
		DependencyIndexes: file_gitpod_v1_event_proto_depIdxs,
		EnumInfos:         file_gitpod_v1_event_proto_enumTypes,
		MessageInfos:      file_gitpod_v1_event_proto_msgTypes,
	}.Build()
	File_gitpod_v1_event_proto = out.File
	file_gitpod_v1_event_proto_rawDesc = nil
	file_gitpod_v1_event_proto_goTypes = nil
	file_gitpod_v1_event_proto_depIdxs = nil
}
